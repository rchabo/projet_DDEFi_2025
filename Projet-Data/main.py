{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rchabo/projet_DDEFi_2025/blob/main/Final_Data_Project.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Appel des bibliothèques"
      ],
      "metadata": {
        "id": "xLtKhIqTOXQQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Installation des bibliothèques"
      ],
      "metadata": {
        "id": "c6Qpah7iObQx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install eurostat gdown"
      ],
      "metadata": {
        "id": "GRc9CuIrOoTH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bb24abda-9fe9-47d0-f513-94a55bcaa7e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting eurostat\n",
            "  Downloading eurostat-1.1.1-py3-none-any.whl.metadata (26 kB)\n",
            "Requirement already satisfied: gdown in /usr/local/lib/python3.11/dist-packages (5.2.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from eurostat) (2.2.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from eurostat) (2.32.3)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from gdown) (4.13.3)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from gdown) (3.17.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from gdown) (4.67.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->gdown) (2.6)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->gdown) (4.12.2)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas->eurostat) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->eurostat) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->eurostat) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->eurostat) (2025.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->eurostat) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->eurostat) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->eurostat) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->eurostat) (2025.1.31)\n",
            "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (1.7.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->eurostat) (1.17.0)\n",
            "Downloading eurostat-1.1.1-py3-none-any.whl (16 kB)\n",
            "Installing collected packages: eurostat\n",
            "Successfully installed eurostat-1.1.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Importation des bibliothèques"
      ],
      "metadata": {
        "id": "dNhQY3V-Oh0M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import requests\n",
        "import json\n",
        "import eurostat\n",
        "from sklearn.preprocessing import Normalizer\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn import metrics\n",
        "import seaborn as sns\n",
        "import plotly.express as px\n",
        "import gdown"
      ],
      "metadata": {
        "id": "zLRpvE29WpwC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pd.set_option(\"display.max_columns\", None)"
      ],
      "metadata": {
        "id": "FkykdaNuxTDN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Utilisation des données via API"
      ],
      "metadata": {
        "id": "PzFyfAaAOMah"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Liste des pays de l'UE :"
      ],
      "metadata": {
        "id": "Ysw7tn799_4X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Liste des correspondances entre les codes pays\n",
        "url = \"https://data.enseignementsup-recherche.gouv.fr/api/explore/v2.1/catalog/datasets/curiexplore-pays/records?select=name_en%2Cname_fr%2Ciso2%2Ciso3&where=ue27%20%3D%20%22True%22&limit=-1\"\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "\n",
        "# Transformer en DataFrame\n",
        "code_EU = pd.DataFrame(data['results'])\n",
        "code_EU"
      ],
      "metadata": {
        "id": "6vp5D8i-9_qz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 896
        },
        "outputId": "ba854eb4-dabf-4b7b-aa1e-5ab988e315be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           name_en             name_fr iso2 iso3\n",
              "0          Croatia             Croatie   HR  HRV\n",
              "1          Romania            Roumanie   RO  ROU\n",
              "2           Latvia            Lettonie   LV  LVA\n",
              "3          Austria            Autriche   AT  AUT\n",
              "4        Lithuania            Lituanie   LT  LTU\n",
              "5            Spain             Espagne   ES  ESP\n",
              "6         Slovenia            Slovénie   SI  SVN\n",
              "7          Belgium            Belgique   BE  BEL\n",
              "8      Netherlands            Pays-Bas   NL  NLD\n",
              "9           Poland             Pologne   PL  POL\n",
              "10  Czech Republic  République tchèque   CZ  CZE\n",
              "11          France              France   FR  FRA\n",
              "12        Slovakia           Slovaquie   SK  SVK\n",
              "13          Greece               Grèce   GR  GRC\n",
              "14         Finland            Finlande   FI  FIN\n",
              "15           Italy              Italie   IT  ITA\n",
              "16          Sweden               Suède   SE  SWE\n",
              "17         Denmark            Danemark   DK  DNK\n",
              "18         Germany           Allemagne   DE  DEU\n",
              "19        Portugal            Portugal   PT  PRT\n",
              "20        Bulgaria            Bulgarie   BG  BGR\n",
              "21          Cyprus              Chypre   CY  CYP\n",
              "22         Hungary             Hongrie   HU  HUN\n",
              "23         Ireland             Irlande   IE  IRL\n",
              "24      Luxembourg          Luxembourg   LU  LUX\n",
              "25         Estonia             Estonie   EE  EST\n",
              "26           Malta               Malte   MT  MLT"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d87b705c-100f-49f6-b99d-7a02353da8d3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name_en</th>\n",
              "      <th>name_fr</th>\n",
              "      <th>iso2</th>\n",
              "      <th>iso3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Croatia</td>\n",
              "      <td>Croatie</td>\n",
              "      <td>HR</td>\n",
              "      <td>HRV</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Romania</td>\n",
              "      <td>Roumanie</td>\n",
              "      <td>RO</td>\n",
              "      <td>ROU</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Latvia</td>\n",
              "      <td>Lettonie</td>\n",
              "      <td>LV</td>\n",
              "      <td>LVA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Austria</td>\n",
              "      <td>Autriche</td>\n",
              "      <td>AT</td>\n",
              "      <td>AUT</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Lithuania</td>\n",
              "      <td>Lituanie</td>\n",
              "      <td>LT</td>\n",
              "      <td>LTU</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Spain</td>\n",
              "      <td>Espagne</td>\n",
              "      <td>ES</td>\n",
              "      <td>ESP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Slovenia</td>\n",
              "      <td>Slovénie</td>\n",
              "      <td>SI</td>\n",
              "      <td>SVN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Belgium</td>\n",
              "      <td>Belgique</td>\n",
              "      <td>BE</td>\n",
              "      <td>BEL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Netherlands</td>\n",
              "      <td>Pays-Bas</td>\n",
              "      <td>NL</td>\n",
              "      <td>NLD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Poland</td>\n",
              "      <td>Pologne</td>\n",
              "      <td>PL</td>\n",
              "      <td>POL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Czech Republic</td>\n",
              "      <td>République tchèque</td>\n",
              "      <td>CZ</td>\n",
              "      <td>CZE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>France</td>\n",
              "      <td>France</td>\n",
              "      <td>FR</td>\n",
              "      <td>FRA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Slovakia</td>\n",
              "      <td>Slovaquie</td>\n",
              "      <td>SK</td>\n",
              "      <td>SVK</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Greece</td>\n",
              "      <td>Grèce</td>\n",
              "      <td>GR</td>\n",
              "      <td>GRC</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Finland</td>\n",
              "      <td>Finlande</td>\n",
              "      <td>FI</td>\n",
              "      <td>FIN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Italy</td>\n",
              "      <td>Italie</td>\n",
              "      <td>IT</td>\n",
              "      <td>ITA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Sweden</td>\n",
              "      <td>Suède</td>\n",
              "      <td>SE</td>\n",
              "      <td>SWE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>Danemark</td>\n",
              "      <td>DK</td>\n",
              "      <td>DNK</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Germany</td>\n",
              "      <td>Allemagne</td>\n",
              "      <td>DE</td>\n",
              "      <td>DEU</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Portugal</td>\n",
              "      <td>Portugal</td>\n",
              "      <td>PT</td>\n",
              "      <td>PRT</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Bulgaria</td>\n",
              "      <td>Bulgarie</td>\n",
              "      <td>BG</td>\n",
              "      <td>BGR</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Cyprus</td>\n",
              "      <td>Chypre</td>\n",
              "      <td>CY</td>\n",
              "      <td>CYP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Hungary</td>\n",
              "      <td>Hongrie</td>\n",
              "      <td>HU</td>\n",
              "      <td>HUN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Ireland</td>\n",
              "      <td>Irlande</td>\n",
              "      <td>IE</td>\n",
              "      <td>IRL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Luxembourg</td>\n",
              "      <td>Luxembourg</td>\n",
              "      <td>LU</td>\n",
              "      <td>LUX</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Estonia</td>\n",
              "      <td>Estonie</td>\n",
              "      <td>EE</td>\n",
              "      <td>EST</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Malta</td>\n",
              "      <td>Malte</td>\n",
              "      <td>MT</td>\n",
              "      <td>MLT</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d87b705c-100f-49f6-b99d-7a02353da8d3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d87b705c-100f-49f6-b99d-7a02353da8d3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d87b705c-100f-49f6-b99d-7a02353da8d3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-da88668b-0176-4c76-9bb0-fa6f99bd3127\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-da88668b-0176-4c76-9bb0-fa6f99bd3127')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-da88668b-0176-4c76-9bb0-fa6f99bd3127 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_69ead2ea-352a-4c24-9774-dac1fd21fb63\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('code_EU')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_69ead2ea-352a-4c24-9774-dac1fd21fb63 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('code_EU');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "code_EU",
              "summary": "{\n  \"name\": \"code_EU\",\n  \"rows\": 27,\n  \"fields\": [\n    {\n      \"column\": \"name_en\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Netherlands\",\n          \"Greece\",\n          \"Poland\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name_fr\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Pays-Bas\",\n          \"Gr\\u00e8ce\",\n          \"Pologne\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"iso2\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"NL\",\n          \"GR\",\n          \"PL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"iso3\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"NLD\",\n          \"GRC\",\n          \"POL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Données utilisées :"
      ],
      "metadata": {
        "id": "01D2itA1-cWH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Electricity prices for household consumers - bi-annual data"
      ],
      "metadata": {
        "id": "i1y4a7DAWVRn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "electricity_price = eurostat.get_data_df('nrg_pc_204')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "electricity_price = electricity_price.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "electricity_price = electricity_price[electricity_price[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "electricity_price = electricity_price[electricity_price[\"nrg_cons\"]=='TOT_KWH'] # TOT_KWH - consommation totale en kWh\n",
        "electricity_price = electricity_price[electricity_price[\"tax\"]=='X_TAX'] # [X_TAX] - Toutes taxes comprises (All taxes included)\n",
        "electricity_price = electricity_price[electricity_price[\"currency\"]=='PPS'] # PPS (Purchasing Power Standard) – Standard de pouvoir d'achat\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "electricity_price = electricity_price.drop(columns=electricity_price.loc[:, \"2007-S1\":\"2021-S1\"].columns)\n",
        "electricity_price = electricity_price.drop(columns=electricity_price.columns[0:electricity_price.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = electricity_price.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = electricity_price.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "electricity_price['mean_energy_price'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "electricity_price = electricity_price.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "electricity_price.head()"
      ],
      "metadata": {
        "id": "zPYaXYqttGJ8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "01941a81-401c-435f-fb0e-c61f9086ead6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     country  mean_energy_price\n",
              "2043      AT           0.198467\n",
              "2045      BE           0.257600\n",
              "2046      BG           0.164633\n",
              "2047      CY           0.226533\n",
              "2048      CZ           0.263067"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7b91bada-9ea6-48c3-b7ec-be4c4bc10e16\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_energy_price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2043</th>\n",
              "      <td>AT</td>\n",
              "      <td>0.198467</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2045</th>\n",
              "      <td>BE</td>\n",
              "      <td>0.257600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2046</th>\n",
              "      <td>BG</td>\n",
              "      <td>0.164633</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2047</th>\n",
              "      <td>CY</td>\n",
              "      <td>0.226533</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2048</th>\n",
              "      <td>CZ</td>\n",
              "      <td>0.263067</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7b91bada-9ea6-48c3-b7ec-be4c4bc10e16')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7b91bada-9ea6-48c3-b7ec-be4c4bc10e16 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7b91bada-9ea6-48c3-b7ec-be4c4bc10e16');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7cd0f09a-1e30-41cf-beb3-8df115620e78\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7cd0f09a-1e30-41cf-beb3-8df115620e78')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7cd0f09a-1e30-41cf-beb3-8df115620e78 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "electricity_price",
              "summary": "{\n  \"name\": \"electricity_price\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_energy_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05724846566808954,\n        \"min\": 0.10759999999999999,\n        \"max\": 0.2989,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          0.25279999999999997,\n          0.1686,\n          0.19846666666666668\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#regarder le pays manquants dans electricity_price\n",
        "\n",
        "unique_col1 = set(electricity_price[\"country\"]) - set(code_EU[\"iso2\"])  # Présent dans col1 mais pas col2\n",
        "unique_col2 = set(code_EU[\"iso2\"]) - set(electricity_price[\"country\"])  # Présent dans col2 mais pas col1\n",
        "\n",
        "print(\"Uniquement dans electricity_price :\", unique_col1)\n",
        "print(\"Uniquement dans code_EU :\", unique_col2) #il manque GR/Grèce"
      ],
      "metadata": {
        "id": "5S0AkOqmOMdG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "19420b7b-d7f3-45e4-bdd9-59954ea15b5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Uniquement dans electricity_price : set()\n",
            "Uniquement dans code_EU : {'GR'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Share of energy from renewable sources"
      ],
      "metadata": {
        "id": "ypYTq6BAWaHE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "share_renew_energy = eurostat.get_data_df('nrg_ind_ren')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "share_renew_energy = share_renew_energy.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes de colusions lors du merge\n",
        "share_renew_energy = share_renew_energy.rename(columns={\"2023\": \"MixEn_2023\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "share_renew_energy = share_renew_energy[share_renew_energy[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "share_renew_energy = share_renew_energy[share_renew_energy[\"nrg_bal\"]=='REN']\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "share_renew_energy = share_renew_energy.drop(columns=share_renew_energy.columns[0:share_renew_energy.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = share_renew_energy.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = share_renew_energy.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "share_renew_energy['mean_share_renew_energy'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "share_renew_energy = share_renew_energy.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "share_renew_energy.head()\n"
      ],
      "metadata": {
        "id": "kkubAZWxwiTP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "d8871d99-94fb-496d-c709-77fae4c2edbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  country  mean_share_renew_energy\n",
              "1      AT                 31.83285\n",
              "3      BE                  7.67355\n",
              "4      BG                 16.11650\n",
              "5      CY                  9.75290\n",
              "6      CZ                 12.94330"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91e0b519-cbba-4401-8cd5-bfa392d2ac8f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_share_renew_energy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AT</td>\n",
              "      <td>31.83285</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>BE</td>\n",
              "      <td>7.67355</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>BG</td>\n",
              "      <td>16.11650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>CY</td>\n",
              "      <td>9.75290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>CZ</td>\n",
              "      <td>12.94330</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91e0b519-cbba-4401-8cd5-bfa392d2ac8f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-91e0b519-cbba-4401-8cd5-bfa392d2ac8f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-91e0b519-cbba-4401-8cd5-bfa392d2ac8f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-45c31836-f63b-4e73-b0e4-5434b8481325\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-45c31836-f63b-4e73-b0e4-5434b8481325')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-45c31836-f63b-4e73-b0e4-5434b8481325 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "share_renew_energy",
              "summary": "{\n  \"name\": \"share_renew_energy\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_share_renew_energy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.419626696684732,\n        \"min\": 5.11215,\n        \"max\": 51.099500000000006,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          15.260899999999998,\n          5.687900000000001,\n          31.832850000000008\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#regarder le pays manquants\n",
        "\n",
        "unique_col1 = set(share_renew_energy[\"country\"]) - set(code_EU[\"iso2\"])  # Présent dans col1 mais pas col2\n",
        "unique_col2 = set(code_EU[\"iso2\"]) - set(share_renew_energy[\"country\"])  # Présent dans col2 mais pas col1\n",
        "\n",
        "print(\"Uniquement dans share_renew_energy :\", unique_col1)\n",
        "print(\"Uniquement dans code_EU :\", unique_col2) #il manque GR/Grèce"
      ],
      "metadata": {
        "id": "su7-xqeEXuz1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "51737576-5ffe-4be3-e5fb-3a6b2d932168"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Uniquement dans share_renew_energy : set()\n",
            "Uniquement dans code_EU : {'GR'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Real GDP per capita"
      ],
      "metadata": {
        "id": "GDEg5wlJXxCn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "GDP_per_capita = eurostat.get_data_df('sdg_08_10')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "GDP_per_capita = GDP_per_capita.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes de colusions lors du merge\n",
        "GDP_per_capita = GDP_per_capita.rename(columns={\"2023\": \"GPDpH_2023\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "GDP_per_capita = GDP_per_capita[GDP_per_capita[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "GDP_per_capita = GDP_per_capita[GDP_per_capita[\"unit\"]=='CLV_PCH_PRE_HAB'] #en parité de pouvoir d'achat par habitatants\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "GDP_per_capita = GDP_per_capita.drop(columns=GDP_per_capita.columns[0:GDP_per_capita.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = GDP_per_capita.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = GDP_per_capita.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "GDP_per_capita['mean_GDP_per_capita'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "GDP_per_capita = GDP_per_capita.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "GDP_per_capita.head()\n",
        "\n"
      ],
      "metadata": {
        "id": "Mf6b5pUDxHZ6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "941aff1d-2bf9-4298-e211-5cb3c7326287"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   country  mean_GDP_per_capita\n",
              "38      AT             0.916667\n",
              "39      BE             1.100000\n",
              "40      BG             4.383333\n",
              "42      CY             1.825000\n",
              "43      CZ             2.229167"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2fc82713-a9e8-4103-a871-ea4853b90a89\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_GDP_per_capita</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>AT</td>\n",
              "      <td>0.916667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>BE</td>\n",
              "      <td>1.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>BG</td>\n",
              "      <td>4.383333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>CY</td>\n",
              "      <td>1.825000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>CZ</td>\n",
              "      <td>2.229167</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2fc82713-a9e8-4103-a871-ea4853b90a89')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2fc82713-a9e8-4103-a871-ea4853b90a89 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2fc82713-a9e8-4103-a871-ea4853b90a89');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d155cd87-2047-4b59-b5a3-0bb9cb71a8fe\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d155cd87-2047-4b59-b5a3-0bb9cb71a8fe')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d155cd87-2047-4b59-b5a3-0bb9cb71a8fe button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GDP_per_capita",
              "summary": "{\n  \"name\": \"GDP_per_capita\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_GDP_per_capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4229844342675393,\n        \"min\": 0.38749999999999996,\n        \"max\": 4.891666666666667,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          1.012,\n          0.8458333333333333,\n          0.9166666666666666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#regarder le pays manquants\n",
        "\n",
        "unique_col1 = set(GDP_per_capita[\"country\"]) - set(code_EU[\"iso2\"])  # Présent dans col1 mais pas col2\n",
        "unique_col2 = set(code_EU[\"iso2\"]) - set(GDP_per_capita[\"country\"])  # Présent dans col2 mais pas col1\n",
        "\n",
        "print(\"Uniquement dans GDP_per_capita :\", unique_col1)\n",
        "print(\"Uniquement dans code_EU :\", unique_col2) #il manque GR/Grèce"
      ],
      "metadata": {
        "id": "iwNfT9PWaT-K",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4dd8222a-2d3a-495a-d0de-f2b701b4c34f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Uniquement dans GDP_per_capita : set()\n",
            "Uniquement dans code_EU : {'GR'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### HICP - inflation rate"
      ],
      "metadata": {
        "id": "0895kobPc80D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "HICP_inflation = eurostat.get_data_df('tec00118')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "HICP_inflation = HICP_inflation.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes de colusions lors du merge\n",
        "HICP_inflation = HICP_inflation.rename(columns={\"2024\": \"HICP_2024\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "HICP_inflation = HICP_inflation[HICP_inflation[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "HICP_inflation = HICP_inflation.drop(columns=HICP_inflation.columns[0:HICP_inflation.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = HICP_inflation.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = HICP_inflation.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "HICP_inflation['mean_HICP_inflation'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "HICP_inflation = HICP_inflation.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "HICP_inflation.head()"
      ],
      "metadata": {
        "id": "ZXF-9yEtx_GE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "374cbc45-5de5-4e90-c48f-a599fca3f61a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  country  mean_HICP_inflation\n",
              "1      AT             2.883333\n",
              "2      BE             2.525000\n",
              "3      BG             2.575000\n",
              "5      CY             1.241667\n",
              "6      CZ             3.816667"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-965168c0-218c-448c-a86c-f0a37c8a2e02\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_HICP_inflation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AT</td>\n",
              "      <td>2.883333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>BE</td>\n",
              "      <td>2.525000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>BG</td>\n",
              "      <td>2.575000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>CY</td>\n",
              "      <td>1.241667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>CZ</td>\n",
              "      <td>3.816667</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-965168c0-218c-448c-a86c-f0a37c8a2e02')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-965168c0-218c-448c-a86c-f0a37c8a2e02 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-965168c0-218c-448c-a86c-f0a37c8a2e02');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-98bd0133-c17b-4407-a26e-f7a604dc4d1b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-98bd0133-c17b-4407-a26e-f7a604dc4d1b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-98bd0133-c17b-4407-a26e-f7a604dc4d1b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "HICP_inflation",
              "summary": "{\n  \"name\": \"HICP_inflation\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_HICP_inflation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8987593538141208,\n        \"min\": 1.2416666666666665,\n        \"max\": 4.625,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          1.8499999999999999,\n          3.3416666666666663,\n          2.8833333333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#regarder le pays manquants\n",
        "\n",
        "unique_col1 = set(HICP_inflation[\"country\"]) - set(code_EU[\"iso2\"])  # Présent dans col1 mais pas col2\n",
        "unique_col2 = set(code_EU[\"iso2\"]) - set(HICP_inflation[\"country\"])  # Présent dans col2 mais pas col1\n",
        "\n",
        "print(\"Uniquement dans HICP_inflation :\", unique_col1)\n",
        "print(\"Uniquement dans code_EU :\", unique_col2) #il manque GR/Grèce"
      ],
      "metadata": {
        "id": "LZDY_Mredq8P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1796563c-57a2-491c-d47a-365102c774eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Uniquement dans HICP_inflation : set()\n",
            "Uniquement dans code_EU : {'GR'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### General government deficit/surplus"
      ],
      "metadata": {
        "id": "LImfdZ6Tdv0G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "GOV_deficit = eurostat.get_data_df('tec00127')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "GOV_deficit = GOV_deficit.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes de colusions lors du merge\n",
        "GOV_deficit = GOV_deficit.rename(columns={\"2023\": \"DEFICIT_2023\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "GOV_deficit = GOV_deficit[GOV_deficit[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "GOV_deficit = GOV_deficit[GOV_deficit[\"unit\"]=='PC_GDP']\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "GOV_deficit = GOV_deficit.drop(columns=GOV_deficit.columns[0:GOV_deficit.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = GOV_deficit.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = GOV_deficit.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "GOV_deficit['mean_GOV_deficit'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "GOV_deficit = GOV_deficit.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "GOV_deficit.head()"
      ],
      "metadata": {
        "id": "6p7ded3azJY1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "4d3a6ab1-34e8-4e51-9f7c-7e9f3291decf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   country  mean_GOV_deficit\n",
              "30      AT         -2.333333\n",
              "31      BE         -3.466667\n",
              "32      BG         -1.300000\n",
              "33      CY         -2.733333\n",
              "34      CZ         -1.841667"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9b25dd3b-d564-4df6-9e85-76dcbe4d06e5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_GOV_deficit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>AT</td>\n",
              "      <td>-2.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>BE</td>\n",
              "      <td>-3.466667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>BG</td>\n",
              "      <td>-1.300000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>CY</td>\n",
              "      <td>-2.733333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>CZ</td>\n",
              "      <td>-1.841667</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b25dd3b-d564-4df6-9e85-76dcbe4d06e5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9b25dd3b-d564-4df6-9e85-76dcbe4d06e5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9b25dd3b-d564-4df6-9e85-76dcbe4d06e5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0df50894-3e7d-49d4-b908-7052f107dd9f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0df50894-3e7d-49d4-b908-7052f107dd9f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0df50894-3e7d-49d4-b908-7052f107dd9f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GOV_deficit",
              "summary": "{\n  \"name\": \"GOV_deficit\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_GOV_deficit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6343211625605176,\n        \"min\": -5.666666666666667,\n        \"max\": 1.2249999999999999,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          -5.666666666666667,\n          0.8750000000000001,\n          -2.3333333333333335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Energy imports dependency"
      ],
      "metadata": {
        "id": "AQ7zRuTwelvT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "NRJ_dependency = eurostat.get_data_df('nrg_ind_id')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "NRJ_dependency = NRJ_dependency.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes de colusions lors du merge\n",
        "NRJ_dependency = NRJ_dependency.rename(columns={\"2023\": \"Dep_NRJ_2023\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "NRJ_dependency = NRJ_dependency[NRJ_dependency[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "NRJ_dependency = NRJ_dependency[NRJ_dependency[\"siec\"]=='TOTAL']\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "NRJ_dependency = NRJ_dependency.drop(columns=NRJ_dependency.columns[0:NRJ_dependency.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = NRJ_dependency.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = NRJ_dependency.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "NRJ_dependency['mean_NRJ_dependency'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "NRJ_dependency = NRJ_dependency.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "NRJ_dependency.head()"
      ],
      "metadata": {
        "id": "uXCPIaLbzpyh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "fde3d18f-0aaf-4422-d2be-e7ab10fb7453"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    country  mean_NRJ_dependency\n",
              "505      AT            66.289353\n",
              "507      BE            78.216324\n",
              "508      BG            46.046500\n",
              "509      CY            96.887500\n",
              "510      CZ            27.591353"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-534f6003-cbab-4e23-a8f4-804fc3ded858\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_NRJ_dependency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>505</th>\n",
              "      <td>AT</td>\n",
              "      <td>66.289353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>507</th>\n",
              "      <td>BE</td>\n",
              "      <td>78.216324</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>508</th>\n",
              "      <td>BG</td>\n",
              "      <td>46.046500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>509</th>\n",
              "      <td>CY</td>\n",
              "      <td>96.887500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>510</th>\n",
              "      <td>CZ</td>\n",
              "      <td>27.591353</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-534f6003-cbab-4e23-a8f4-804fc3ded858')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-534f6003-cbab-4e23-a8f4-804fc3ded858 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-534f6003-cbab-4e23-a8f4-804fc3ded858');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ddf4e97f-7a0d-41ec-aa7f-86728417cc93\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ddf4e97f-7a0d-41ec-aa7f-86728417cc93')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ddf4e97f-7a0d-41ec-aa7f-86728417cc93 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "NRJ_dependency",
              "summary": "{\n  \"name\": \"NRJ_dependency\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_NRJ_dependency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.120759576745797,\n        \"min\": 4.645794117647059,\n        \"max\": 100.61591176470588,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          73.34785294117648,\n          96.9539411764706,\n          66.28935294117647\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Net greenhouse gas emissions"
      ],
      "metadata": {
        "id": "i1Jdq6itfS1z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "CO2_emissions = eurostat.get_data_df('sdg_13_10')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "CO2_emissions = CO2_emissions.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes de colusions lors du merge\n",
        "CO2_emissions = CO2_emissions.rename(columns={\"2022\": \"EmCO2_2022\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "CO2_emissions = CO2_emissions[CO2_emissions[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "CO2_emissions = CO2_emissions[CO2_emissions[\"src_crf\"]=='TOTXMEMONIA']\n",
        "CO2_emissions = CO2_emissions[CO2_emissions[\"unit\"]=='I90']\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "CO2_emissions = CO2_emissions.drop(columns=CO2_emissions.columns[0:CO2_emissions.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = CO2_emissions.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = CO2_emissions.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "CO2_emissions['mean_CO2_emissions'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "CO2_emissions = CO2_emissions.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "CO2_emissions.head()"
      ],
      "metadata": {
        "id": "3oCmUtv40BdY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "115ba731-c6ce-4482-985c-5e8cdedfd695"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   country  mean_CO2_emissions\n",
              "62      AT          105.006061\n",
              "63      BE           94.218182\n",
              "64      BG           62.218182\n",
              "66      CY          144.924242\n",
              "67      CZ           72.954545"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5bd00e29-9b65-49a4-b07f-90f5f0f46d72\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_CO2_emissions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>AT</td>\n",
              "      <td>105.006061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>BE</td>\n",
              "      <td>94.218182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>BG</td>\n",
              "      <td>62.218182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>CY</td>\n",
              "      <td>144.924242</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>CZ</td>\n",
              "      <td>72.954545</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5bd00e29-9b65-49a4-b07f-90f5f0f46d72')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5bd00e29-9b65-49a4-b07f-90f5f0f46d72 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5bd00e29-9b65-49a4-b07f-90f5f0f46d72');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-997c610e-9cdb-4beb-b025-a7c08a35fc4a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-997c610e-9cdb-4beb-b025-a7c08a35fc4a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-997c610e-9cdb-4beb-b025-a7c08a35fc4a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "CO2_emissions",
              "summary": "{\n  \"name\": \"CO2_emissions\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_CO2_emissions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.000789149090405,\n        \"min\": 39.81212121212122,\n        \"max\": 144.9242424242425,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          121.9939393939394,\n          89.58787878787878,\n          105.0060606060606\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Long term government bond yields"
      ],
      "metadata": {
        "id": "1gkZHciXhAbL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "GOV_bound = eurostat.get_data_df('teimf050')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "GOV_bound = GOV_bound.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "GOV_bound = GOV_bound[GOV_bound[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "GOV_bound = GOV_bound.drop(columns=GOV_bound.columns[0:GOV_bound.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = GOV_bound.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = GOV_bound.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "GOV_bound['mean_GOV_bound'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "GOV_bound = GOV_bound.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "GOV_bound.head()"
      ],
      "metadata": {
        "id": "wKG3O1uh2C6k",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "dc9d764d-3197-49ae-bb4d-781d9c9a0b2e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  country  mean_GOV_bound\n",
              "0      AT        2.855000\n",
              "1      BE        2.949167\n",
              "2      BG        3.930000\n",
              "3      CY        3.113333\n",
              "4      CZ        4.005000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c9959333-0a3a-4ced-bea2-ad91a4119f75\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_GOV_bound</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AT</td>\n",
              "      <td>2.855000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>BE</td>\n",
              "      <td>2.949167</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>BG</td>\n",
              "      <td>3.930000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CY</td>\n",
              "      <td>3.113333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CZ</td>\n",
              "      <td>4.005000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9959333-0a3a-4ced-bea2-ad91a4119f75')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c9959333-0a3a-4ced-bea2-ad91a4119f75 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c9959333-0a3a-4ced-bea2-ad91a4119f75');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7abc64d8-beeb-4d97-b1c4-d374e6925cd3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7abc64d8-beeb-4d97-b1c4-d374e6925cd3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7abc64d8-beeb-4d97-b1c4-d374e6925cd3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GOV_bound",
              "summary": "{\n  \"name\": \"GOV_bound\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_GOV_bound\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1200901868641657,\n        \"min\": 2.2075,\n        \"max\": 6.571666666666665,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          3.1491666666666673,\n          2.7874999999999996,\n          2.8550000000000004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### EU direct investments indicators in % of GDP, impact indicators and rate of return on direct investment (BPM6)"
      ],
      "metadata": {
        "id": "R5A4f_84iJ6d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "FDI_impact = eurostat.get_data_df('bop_fdi6_ind')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "FDI_impact = FDI_impact.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "FDI_impact = FDI_impact[FDI_impact[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "\"\"\"\n",
        "indic_bp :\n",
        "[FGDP] GDP (flows in % of GDP)\n",
        "[SGDP] GDP (stocks in % of GDP)\n",
        "[IPOS] Rate of return on direct investment (FDI income/FDI stocks)\n",
        "[PCPOS] FDI stocks (in % of extra EU FDI stocks)\n",
        "[TIFDI] Market integration - foreign direct investment intensity - average value of inward and outward foreign direct investment flows divided by GDP, multiplied by 100\n",
        "\n",
        "fdi_item :\n",
        "[DO__D__F] Direct investment abroad (DIA)\n",
        "[DI__D__F] Direct investment in the reporting economy (DIRE)\n",
        "[NAP] Not applicable\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "FDI_impact = FDI_impact[FDI_impact['indic_bp']=='IPOS']\n",
        "FDI_impact = FDI_impact[FDI_impact[\"fdi_item\"]=='DO__D__F']\n",
        "\n",
        "# Récupérer la dernière valeur\n",
        "first_col_value = FDI_impact.columns.get_loc('country') + 1 #récupérer l'indeice de la première colonne avce des valeurs\n",
        "last_col = FDI_impact.shape[1]\n",
        "\n",
        "\n",
        "FDI_impact = pd.pivot_table(\n",
        "    FDI_impact,\n",
        "    values=FDI_impact.columns[first_col_value:last_col],\n",
        "    index=['country'],\n",
        "    columns=['indic_bp', 'fdi_item'],\n",
        "    aggfunc='mean')\n",
        "\n",
        "FDI_impact.head(100)"
      ],
      "metadata": {
        "id": "OnrF91KnH4U2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 958
        },
        "outputId": "9ce9c954-2f28-42e3-c883-6439459b7fcf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               2013       2014       2015       2016        2017       2018  \\\n",
              "indic_bp       IPOS       IPOS       IPOS       IPOS        IPOS       IPOS   \n",
              "fdi_item   DO__D__F   DO__D__F   DO__D__F   DO__D__F    DO__D__F   DO__D__F   \n",
              "country                                                                       \n",
              "AT         8.592308   5.276923   5.623077   6.623077    5.554545  -4.308333   \n",
              "BE         5.561538   4.215385   1.980000  50.484615    8.261538  16.507692   \n",
              "BG        -0.415385   1.146154   2.700000   1.869231    2.238462  -2.107692   \n",
              "CY         4.650000   4.112500   5.983333   2.300000    2.850000   5.500000   \n",
              "CZ       -10.923077 -14.508333 -38.411111 -62.472727 -328.740000 -10.315385   \n",
              "DE         8.384615   9.330769   8.007692   8.033333    9.930769   8.691667   \n",
              "DK        10.884615  10.523077  10.969231   7.423077    7.630769   7.192308   \n",
              "EE        13.670000   7.160000  -3.627273   3.453846    5.027273   6.536364   \n",
              "ES        15.466667   8.492308   5.246154   9.369231    5.784615   7.700000   \n",
              "FI        -6.990000   9.100000  -6.037500  -9.790000   -2.230000   8.822222   \n",
              "FR         6.841667   6.166667   5.908333   6.525000    6.591667   6.727273   \n",
              "HR        -6.085714  -9.155556 -27.850000 -12.725000    0.187500  14.925000   \n",
              "HU         0.346154   1.642857   1.140000   4.214286    2.280000   4.528571   \n",
              "IE         3.183333   5.800000   0.800000   0.744444    1.520000  -1.400000   \n",
              "IT         3.161538   5.623077   1.000000   3.146154    3.969231   4.169231   \n",
              "LT        -1.200000  -0.740000   2.625000   4.755556   -1.122222   3.142857   \n",
              "LU         3.561538   3.123077   2.584615   3.092308    5.423077   6.161538   \n",
              "LV        -5.771429  -3.866667   5.300000   1.050000    9.142857   4.220000   \n",
              "MT         0.566667   0.783333   0.933333   0.012500    0.100000   0.100000   \n",
              "NL         7.176923   5.592308   5.290000   5.100000    7.025000   7.011111   \n",
              "PL        -7.607692   0.984615  -2.423077  -1.507692  -30.061538   3.976923   \n",
              "PT       -17.407692  -9.207692  -0.423077   6.584615   -1.176923  -2.876923   \n",
              "RO         5.100000  94.200000  19.133333   1.725000   -1.050000   4.400000   \n",
              "SE        22.276923  14.161538   9.484615  10.300000   10.915385  12.692308   \n",
              "SI        12.881818   8.461538  17.946154   9.023077    3.269231   1.315385   \n",
              "SK         8.266667  20.560000   6.500000   6.000000    4.950000   5.487500   \n",
              "\n",
              "                2019       2020       2021       2022       2023  \n",
              "indic_bp        IPOS       IPOS       IPOS       IPOS       IPOS  \n",
              "fdi_item    DO__D__F   DO__D__F   DO__D__F   DO__D__F   DO__D__F  \n",
              "country                                                           \n",
              "AT         11.072727   5.390000   7.950000  13.327273   6.230000  \n",
              "BE          9.061538   8.241667  10.750000   5.333333   4.625000  \n",
              "BG          7.469231   0.250000   8.250000   3.216667   1.541667  \n",
              "CY          5.380000   4.300000   4.385714   3.550000   4.500000  \n",
              "CZ          8.081818  21.941667  21.333333  17.045455 -11.663636  \n",
              "DE          9.515385   7.338462   7.850000  10.583333  10.858333  \n",
              "DK         11.146154  11.161538  13.733333   9.625000  11.008333  \n",
              "EE          8.650000   5.354545   4.791667   2.408333  23.500000  \n",
              "ES          6.084615   5.808333   8.200000   8.466667   8.550000  \n",
              "FI       -195.670000   1.730000  50.309091   0.727273   1.660000  \n",
              "FR          6.354545   4.145455  10.645455  15.890909  10.418182  \n",
              "HR          5.612500   7.185714  13.233333   5.420000 -62.660000  \n",
              "HU          6.125000   4.085714   2.850000   7.050000   7.250000  \n",
              "IE          9.557143  12.285714   5.620000   1.920000  31.700000  \n",
              "IT          4.523077  -0.853846   5.815385   6.800000   7.166667  \n",
              "LT          5.328571   3.183333  -4.500000  -4.485714   2.850000  \n",
              "LU          5.591667   7.145455   8.818182   6.618182   8.130000  \n",
              "LV         34.228571   5.783333   8.271429   5.550000   4.257143  \n",
              "MT               NaN        NaN        NaN        NaN        NaN  \n",
              "NL          5.810000   3.955556   5.260000   7.100000   5.536364  \n",
              "PL        108.476923  -1.115385  23.430769  18.815385  -1.027273  \n",
              "PT          5.369231   6.853846  15.407692  10.446154  36.341667  \n",
              "RO          2.300000   2.666667  11.066667   7.200000 -13.450000  \n",
              "SE          9.509091  11.577778  13.916667  13.650000  10.116667  \n",
              "SI          6.615385  -2.723077  16.138462   8.430769   6.391667  \n",
              "SK          4.887500   5.525000  11.771429   3.560000  10.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-39a48f0b-91f1-4fa1-b1a9-0f0f7e8051f8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>2013</th>\n",
              "      <th>2014</th>\n",
              "      <th>2015</th>\n",
              "      <th>2016</th>\n",
              "      <th>2017</th>\n",
              "      <th>2018</th>\n",
              "      <th>2019</th>\n",
              "      <th>2020</th>\n",
              "      <th>2021</th>\n",
              "      <th>2022</th>\n",
              "      <th>2023</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>indic_bp</th>\n",
              "      <th>IPOS</th>\n",
              "      <th>IPOS</th>\n",
              "      <th>IPOS</th>\n",
              "      <th>IPOS</th>\n",
              "      <th>IPOS</th>\n",
              "      <th>IPOS</th>\n",
              "      <th>IPOS</th>\n",
              "      <th>IPOS</th>\n",
              "      <th>IPOS</th>\n",
              "      <th>IPOS</th>\n",
              "      <th>IPOS</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fdi_item</th>\n",
              "      <th>DO__D__F</th>\n",
              "      <th>DO__D__F</th>\n",
              "      <th>DO__D__F</th>\n",
              "      <th>DO__D__F</th>\n",
              "      <th>DO__D__F</th>\n",
              "      <th>DO__D__F</th>\n",
              "      <th>DO__D__F</th>\n",
              "      <th>DO__D__F</th>\n",
              "      <th>DO__D__F</th>\n",
              "      <th>DO__D__F</th>\n",
              "      <th>DO__D__F</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>AT</th>\n",
              "      <td>8.592308</td>\n",
              "      <td>5.276923</td>\n",
              "      <td>5.623077</td>\n",
              "      <td>6.623077</td>\n",
              "      <td>5.554545</td>\n",
              "      <td>-4.308333</td>\n",
              "      <td>11.072727</td>\n",
              "      <td>5.390000</td>\n",
              "      <td>7.950000</td>\n",
              "      <td>13.327273</td>\n",
              "      <td>6.230000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BE</th>\n",
              "      <td>5.561538</td>\n",
              "      <td>4.215385</td>\n",
              "      <td>1.980000</td>\n",
              "      <td>50.484615</td>\n",
              "      <td>8.261538</td>\n",
              "      <td>16.507692</td>\n",
              "      <td>9.061538</td>\n",
              "      <td>8.241667</td>\n",
              "      <td>10.750000</td>\n",
              "      <td>5.333333</td>\n",
              "      <td>4.625000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BG</th>\n",
              "      <td>-0.415385</td>\n",
              "      <td>1.146154</td>\n",
              "      <td>2.700000</td>\n",
              "      <td>1.869231</td>\n",
              "      <td>2.238462</td>\n",
              "      <td>-2.107692</td>\n",
              "      <td>7.469231</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>8.250000</td>\n",
              "      <td>3.216667</td>\n",
              "      <td>1.541667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CY</th>\n",
              "      <td>4.650000</td>\n",
              "      <td>4.112500</td>\n",
              "      <td>5.983333</td>\n",
              "      <td>2.300000</td>\n",
              "      <td>2.850000</td>\n",
              "      <td>5.500000</td>\n",
              "      <td>5.380000</td>\n",
              "      <td>4.300000</td>\n",
              "      <td>4.385714</td>\n",
              "      <td>3.550000</td>\n",
              "      <td>4.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CZ</th>\n",
              "      <td>-10.923077</td>\n",
              "      <td>-14.508333</td>\n",
              "      <td>-38.411111</td>\n",
              "      <td>-62.472727</td>\n",
              "      <td>-328.740000</td>\n",
              "      <td>-10.315385</td>\n",
              "      <td>8.081818</td>\n",
              "      <td>21.941667</td>\n",
              "      <td>21.333333</td>\n",
              "      <td>17.045455</td>\n",
              "      <td>-11.663636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DE</th>\n",
              "      <td>8.384615</td>\n",
              "      <td>9.330769</td>\n",
              "      <td>8.007692</td>\n",
              "      <td>8.033333</td>\n",
              "      <td>9.930769</td>\n",
              "      <td>8.691667</td>\n",
              "      <td>9.515385</td>\n",
              "      <td>7.338462</td>\n",
              "      <td>7.850000</td>\n",
              "      <td>10.583333</td>\n",
              "      <td>10.858333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DK</th>\n",
              "      <td>10.884615</td>\n",
              "      <td>10.523077</td>\n",
              "      <td>10.969231</td>\n",
              "      <td>7.423077</td>\n",
              "      <td>7.630769</td>\n",
              "      <td>7.192308</td>\n",
              "      <td>11.146154</td>\n",
              "      <td>11.161538</td>\n",
              "      <td>13.733333</td>\n",
              "      <td>9.625000</td>\n",
              "      <td>11.008333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>EE</th>\n",
              "      <td>13.670000</td>\n",
              "      <td>7.160000</td>\n",
              "      <td>-3.627273</td>\n",
              "      <td>3.453846</td>\n",
              "      <td>5.027273</td>\n",
              "      <td>6.536364</td>\n",
              "      <td>8.650000</td>\n",
              "      <td>5.354545</td>\n",
              "      <td>4.791667</td>\n",
              "      <td>2.408333</td>\n",
              "      <td>23.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ES</th>\n",
              "      <td>15.466667</td>\n",
              "      <td>8.492308</td>\n",
              "      <td>5.246154</td>\n",
              "      <td>9.369231</td>\n",
              "      <td>5.784615</td>\n",
              "      <td>7.700000</td>\n",
              "      <td>6.084615</td>\n",
              "      <td>5.808333</td>\n",
              "      <td>8.200000</td>\n",
              "      <td>8.466667</td>\n",
              "      <td>8.550000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FI</th>\n",
              "      <td>-6.990000</td>\n",
              "      <td>9.100000</td>\n",
              "      <td>-6.037500</td>\n",
              "      <td>-9.790000</td>\n",
              "      <td>-2.230000</td>\n",
              "      <td>8.822222</td>\n",
              "      <td>-195.670000</td>\n",
              "      <td>1.730000</td>\n",
              "      <td>50.309091</td>\n",
              "      <td>0.727273</td>\n",
              "      <td>1.660000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FR</th>\n",
              "      <td>6.841667</td>\n",
              "      <td>6.166667</td>\n",
              "      <td>5.908333</td>\n",
              "      <td>6.525000</td>\n",
              "      <td>6.591667</td>\n",
              "      <td>6.727273</td>\n",
              "      <td>6.354545</td>\n",
              "      <td>4.145455</td>\n",
              "      <td>10.645455</td>\n",
              "      <td>15.890909</td>\n",
              "      <td>10.418182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HR</th>\n",
              "      <td>-6.085714</td>\n",
              "      <td>-9.155556</td>\n",
              "      <td>-27.850000</td>\n",
              "      <td>-12.725000</td>\n",
              "      <td>0.187500</td>\n",
              "      <td>14.925000</td>\n",
              "      <td>5.612500</td>\n",
              "      <td>7.185714</td>\n",
              "      <td>13.233333</td>\n",
              "      <td>5.420000</td>\n",
              "      <td>-62.660000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HU</th>\n",
              "      <td>0.346154</td>\n",
              "      <td>1.642857</td>\n",
              "      <td>1.140000</td>\n",
              "      <td>4.214286</td>\n",
              "      <td>2.280000</td>\n",
              "      <td>4.528571</td>\n",
              "      <td>6.125000</td>\n",
              "      <td>4.085714</td>\n",
              "      <td>2.850000</td>\n",
              "      <td>7.050000</td>\n",
              "      <td>7.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>IE</th>\n",
              "      <td>3.183333</td>\n",
              "      <td>5.800000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>0.744444</td>\n",
              "      <td>1.520000</td>\n",
              "      <td>-1.400000</td>\n",
              "      <td>9.557143</td>\n",
              "      <td>12.285714</td>\n",
              "      <td>5.620000</td>\n",
              "      <td>1.920000</td>\n",
              "      <td>31.700000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>IT</th>\n",
              "      <td>3.161538</td>\n",
              "      <td>5.623077</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.146154</td>\n",
              "      <td>3.969231</td>\n",
              "      <td>4.169231</td>\n",
              "      <td>4.523077</td>\n",
              "      <td>-0.853846</td>\n",
              "      <td>5.815385</td>\n",
              "      <td>6.800000</td>\n",
              "      <td>7.166667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LT</th>\n",
              "      <td>-1.200000</td>\n",
              "      <td>-0.740000</td>\n",
              "      <td>2.625000</td>\n",
              "      <td>4.755556</td>\n",
              "      <td>-1.122222</td>\n",
              "      <td>3.142857</td>\n",
              "      <td>5.328571</td>\n",
              "      <td>3.183333</td>\n",
              "      <td>-4.500000</td>\n",
              "      <td>-4.485714</td>\n",
              "      <td>2.850000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LU</th>\n",
              "      <td>3.561538</td>\n",
              "      <td>3.123077</td>\n",
              "      <td>2.584615</td>\n",
              "      <td>3.092308</td>\n",
              "      <td>5.423077</td>\n",
              "      <td>6.161538</td>\n",
              "      <td>5.591667</td>\n",
              "      <td>7.145455</td>\n",
              "      <td>8.818182</td>\n",
              "      <td>6.618182</td>\n",
              "      <td>8.130000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LV</th>\n",
              "      <td>-5.771429</td>\n",
              "      <td>-3.866667</td>\n",
              "      <td>5.300000</td>\n",
              "      <td>1.050000</td>\n",
              "      <td>9.142857</td>\n",
              "      <td>4.220000</td>\n",
              "      <td>34.228571</td>\n",
              "      <td>5.783333</td>\n",
              "      <td>8.271429</td>\n",
              "      <td>5.550000</td>\n",
              "      <td>4.257143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MT</th>\n",
              "      <td>0.566667</td>\n",
              "      <td>0.783333</td>\n",
              "      <td>0.933333</td>\n",
              "      <td>0.012500</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NL</th>\n",
              "      <td>7.176923</td>\n",
              "      <td>5.592308</td>\n",
              "      <td>5.290000</td>\n",
              "      <td>5.100000</td>\n",
              "      <td>7.025000</td>\n",
              "      <td>7.011111</td>\n",
              "      <td>5.810000</td>\n",
              "      <td>3.955556</td>\n",
              "      <td>5.260000</td>\n",
              "      <td>7.100000</td>\n",
              "      <td>5.536364</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PL</th>\n",
              "      <td>-7.607692</td>\n",
              "      <td>0.984615</td>\n",
              "      <td>-2.423077</td>\n",
              "      <td>-1.507692</td>\n",
              "      <td>-30.061538</td>\n",
              "      <td>3.976923</td>\n",
              "      <td>108.476923</td>\n",
              "      <td>-1.115385</td>\n",
              "      <td>23.430769</td>\n",
              "      <td>18.815385</td>\n",
              "      <td>-1.027273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PT</th>\n",
              "      <td>-17.407692</td>\n",
              "      <td>-9.207692</td>\n",
              "      <td>-0.423077</td>\n",
              "      <td>6.584615</td>\n",
              "      <td>-1.176923</td>\n",
              "      <td>-2.876923</td>\n",
              "      <td>5.369231</td>\n",
              "      <td>6.853846</td>\n",
              "      <td>15.407692</td>\n",
              "      <td>10.446154</td>\n",
              "      <td>36.341667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RO</th>\n",
              "      <td>5.100000</td>\n",
              "      <td>94.200000</td>\n",
              "      <td>19.133333</td>\n",
              "      <td>1.725000</td>\n",
              "      <td>-1.050000</td>\n",
              "      <td>4.400000</td>\n",
              "      <td>2.300000</td>\n",
              "      <td>2.666667</td>\n",
              "      <td>11.066667</td>\n",
              "      <td>7.200000</td>\n",
              "      <td>-13.450000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SE</th>\n",
              "      <td>22.276923</td>\n",
              "      <td>14.161538</td>\n",
              "      <td>9.484615</td>\n",
              "      <td>10.300000</td>\n",
              "      <td>10.915385</td>\n",
              "      <td>12.692308</td>\n",
              "      <td>9.509091</td>\n",
              "      <td>11.577778</td>\n",
              "      <td>13.916667</td>\n",
              "      <td>13.650000</td>\n",
              "      <td>10.116667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SI</th>\n",
              "      <td>12.881818</td>\n",
              "      <td>8.461538</td>\n",
              "      <td>17.946154</td>\n",
              "      <td>9.023077</td>\n",
              "      <td>3.269231</td>\n",
              "      <td>1.315385</td>\n",
              "      <td>6.615385</td>\n",
              "      <td>-2.723077</td>\n",
              "      <td>16.138462</td>\n",
              "      <td>8.430769</td>\n",
              "      <td>6.391667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SK</th>\n",
              "      <td>8.266667</td>\n",
              "      <td>20.560000</td>\n",
              "      <td>6.500000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>4.950000</td>\n",
              "      <td>5.487500</td>\n",
              "      <td>4.887500</td>\n",
              "      <td>5.525000</td>\n",
              "      <td>11.771429</td>\n",
              "      <td>3.560000</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39a48f0b-91f1-4fa1-b1a9-0f0f7e8051f8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-39a48f0b-91f1-4fa1-b1a9-0f0f7e8051f8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-39a48f0b-91f1-4fa1-b1a9-0f0f7e8051f8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-30d5aaa0-7b68-4462-a0c6-675aa451a15a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-30d5aaa0-7b68-4462-a0c6-675aa451a15a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-30d5aaa0-7b68-4462-a0c6-675aa451a15a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "FDI_impact",
              "summary": "{\n  \"name\": \"FDI_impact\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": [\n        \"country\",\n        \"\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"2013\",\n        \"IPOS\",\n        \"DO__D__F\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.849643847213217,\n        \"min\": -17.407692307692308,\n        \"max\": 22.27692307692308,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          15.466666666666667,\n          3.5615384615384613,\n          8.592307692307692\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"2014\",\n        \"IPOS\",\n        \"DO__D__F\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19.189543998713503,\n        \"min\": -14.508333333333333,\n        \"max\": 94.2,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          8.492307692307692,\n          3.123076923076923,\n          5.276923076923077\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"2015\",\n        \"IPOS\",\n        \"DO__D__F\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.769949133918486,\n        \"min\": -38.41111111111111,\n        \"max\": 19.13333333333333,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          5.246153846153846,\n          2.5846153846153848,\n          5.623076923076923\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"2016\",\n        \"IPOS\",\n        \"DO__D__F\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.993318139008757,\n        \"min\": -62.472727272727276,\n        \"max\": 50.48461538461538,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          9.36923076923077,\n          3.0923076923076924,\n          6.623076923076923\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"2017\",\n        \"IPOS\",\n        \"DO__D__F\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 65.43973828851752,\n        \"min\": -328.73999999999995,\n        \"max\": 10.915384615384616,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          5.7846153846153845,\n          5.423076923076923,\n          5.554545454545455\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"2018\",\n        \"IPOS\",\n        \"DO__D__F\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.849898114652903,\n        \"min\": -10.315384615384614,\n        \"max\": 16.50769230769231,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          7.699999999999999,\n          6.161538461538461,\n          -4.3083333333333345\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"2019\",\n        \"IPOS\",\n        \"DO__D__F\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 46.54974382545343,\n        \"min\": -195.67000000000002,\n        \"max\": 108.47692307692309,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          6.084615384615384,\n          5.591666666666666,\n          11.072727272727272\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"2020\",\n        \"IPOS\",\n        \"DO__D__F\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.073977706583008,\n        \"min\": -2.723076923076923,\n        \"max\": 21.941666666666666,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          5.808333333333334,\n          7.145454545454546,\n          5.39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"2021\",\n        \"IPOS\",\n        \"DO__D__F\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.988366037030168,\n        \"min\": -4.5,\n        \"max\": 50.309090909090905,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          8.200000000000001,\n          8.818181818181818,\n          7.95\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"2022\",\n        \"IPOS\",\n        \"DO__D__F\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.386814396474189,\n        \"min\": -4.485714285714286,\n        \"max\": 18.815384615384616,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          8.466666666666667,\n          6.618181818181818,\n          13.327272727272726\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"2023\",\n        \"IPOS\",\n        \"DO__D__F\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.660218581497297,\n        \"min\": -62.65999999999999,\n        \"max\": 36.34166666666667,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          8.549999999999999,\n          8.129999999999999,\n          6.2299999999999995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Supprimer le multi-index\n",
        "\n",
        "# Réinitialiser l'index pour récupérer les pays\n",
        "FDI_impact = FDI_impact.reset_index()\n",
        "\n",
        "# Vérifier si les colonnes ont un MultiIndex\n",
        "if isinstance(FDI_impact.columns, pd.MultiIndex):\n",
        "    # Aplatir les colonnes MultiIndex proprement\n",
        "    FDI_impact.columns = ['_'.join(filter(None, map(str, col))) for col in FDI_impact.columns]\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = FDI_impact.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = FDI_impact.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "FDI_impact['mean_FDI_impact'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "FDI_impact = FDI_impact.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "\n",
        "FDI_impact.head()\n"
      ],
      "metadata": {
        "id": "efKtMuzjl9gJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "67b56ae8-5019-45e8-e420-e12ca92ec837"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  country  mean_FDI_impact\n",
              "0      AT         6.484691\n",
              "1      BE        11.365664\n",
              "2      BG         2.378030\n",
              "3      CY         4.319232\n",
              "4      CZ       -37.148363"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bb29091e-a33d-4058-80f6-7050f5472893\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_FDI_impact</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AT</td>\n",
              "      <td>6.484691</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>BE</td>\n",
              "      <td>11.365664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>BG</td>\n",
              "      <td>2.378030</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CY</td>\n",
              "      <td>4.319232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CZ</td>\n",
              "      <td>-37.148363</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bb29091e-a33d-4058-80f6-7050f5472893')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bb29091e-a33d-4058-80f6-7050f5472893 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bb29091e-a33d-4058-80f6-7050f5472893');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3506eb8f-5777-4e92-8443-cd8084578615\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3506eb8f-5777-4e92-8443-cd8084578615')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3506eb8f-5777-4e92-8443-cd8084578615 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "FDI_impact",
              "summary": "{\n  \"name\": \"FDI_impact\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_FDI_impact\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.047142695382853,\n        \"min\": -37.148363353817906,\n        \"max\": 12.60008829554284,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          8.106235431235431,\n          5.47723988133079,\n          6.484690612417885\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Gross domestic product (GDP) and main components (output, expenditure and income)"
      ],
      "metadata": {
        "id": "iyiIsxMaiO8p"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "GOV_GDP = eurostat.get_data_df('nama_10_gdp')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "GOV_GDP = GOV_GDP.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes de colusions lors du merge\n",
        "GOV_GDP = GOV_GDP.rename(columns={\"2023\": \"PIB_2023\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "GOV_GDP = GOV_GDP[GOV_GDP[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "GOV_GDP = GOV_GDP[GOV_GDP['na_item']=='B1G']\n",
        "GOV_GDP = GOV_GDP[GOV_GDP[\"unit\"]=='PC_GDP']\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "GOV_GDP = GOV_GDP.drop(columns=GOV_GDP.columns[0:GOV_GDP.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = GOV_GDP.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = GOV_GDP.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "GOV_GDP['mean_GOV_GDP'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "GOV_GDP = GOV_GDP.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "GOV_GDP.head()"
      ],
      "metadata": {
        "id": "dIa59hflJAoN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "54049d93-3369-40f1-bbd8-25623c5c3fd0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      country  mean_GOV_GDP\n",
              "20380      AT     89.144828\n",
              "20382      BE     89.534483\n",
              "20383      BG     87.341379\n",
              "20385      CY     88.927586\n",
              "20386      CZ     90.734483"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cc911ac5-dff7-4828-9667-c452e09002ce\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_GOV_GDP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>20380</th>\n",
              "      <td>AT</td>\n",
              "      <td>89.144828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20382</th>\n",
              "      <td>BE</td>\n",
              "      <td>89.534483</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20383</th>\n",
              "      <td>BG</td>\n",
              "      <td>87.341379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20385</th>\n",
              "      <td>CY</td>\n",
              "      <td>88.927586</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20386</th>\n",
              "      <td>CZ</td>\n",
              "      <td>90.734483</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc911ac5-dff7-4828-9667-c452e09002ce')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cc911ac5-dff7-4828-9667-c452e09002ce button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cc911ac5-dff7-4828-9667-c452e09002ce');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c8a14a5f-b793-496f-85a0-1e19a4389777\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c8a14a5f-b793-496f-85a0-1e19a4389777')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c8a14a5f-b793-496f-85a0-1e19a4389777 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GOV_GDP",
              "summary": "{\n  \"name\": \"GOV_GDP\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_GOV_GDP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7863239662024932,\n        \"min\": 83.3896551724138,\n        \"max\": 91.20333333333333,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          91.20333333333333,\n          90.10000000000002,\n          89.14482758620689\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Green bond issuance by corporates and governments"
      ],
      "metadata": {
        "id": "xIgkg0vs-5kB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "GREEN_Bound = eurostat.get_data_df('sdg_13_70a')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "GREEN_Bound = GREEN_Bound.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "GREEN_Bound = GREEN_Bound[GREEN_Bound[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "GREEN_Bound = GREEN_Bound.drop(columns=GREEN_Bound.columns[0:GREEN_Bound.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = GREEN_Bound.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = GREEN_Bound.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "GREEN_Bound['mean_GREEN_Bound'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "GREEN_Bound = GREEN_Bound.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "GREEN_Bound.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "TxJN2e_t-5Yy",
        "outputId": "569d7d78-f448-4f89-f3f3-185fa58c1a77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  country  mean_GREEN_Bound\n",
              "0      AT               8.3\n",
              "1      BE              14.8\n",
              "2      BG               0.0\n",
              "3      CY               0.0\n",
              "4      CZ               3.3"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e66b51a0-553b-4e12-9584-9276e8318280\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_GREEN_Bound</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AT</td>\n",
              "      <td>8.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>BE</td>\n",
              "      <td>14.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>BG</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CY</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CZ</td>\n",
              "      <td>3.3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e66b51a0-553b-4e12-9584-9276e8318280')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e66b51a0-553b-4e12-9584-9276e8318280 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e66b51a0-553b-4e12-9584-9276e8318280');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a4193c75-2007-4528-a6d6-09c5950a400c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a4193c75-2007-4528-a6d6-09c5950a400c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a4193c75-2007-4528-a6d6-09c5950a400c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GREEN_Bound",
              "summary": "{\n  \"name\": \"GREEN_Bound\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_GREEN_Bound\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.8497297767964,\n        \"min\": 0.0,\n        \"max\": 16.3,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          8.3,\n          13.9,\n          6.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Climate related economic losses – values at constant 2022 prices"
      ],
      "metadata": {
        "id": "yeEGZzJK_WF5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "GREEN_Losses = eurostat.get_data_df('sdg_13_40')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "GREEN_Losses = GREEN_Losses.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "GREEN_Losses = GREEN_Losses[GREEN_Losses[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\"\"\"\n",
        "[VAL_A] Annual value\n",
        "[AVG_30Y] Thirty-year average\n",
        "[CP_MEUR] Current prices, million euro\n",
        "[CP_EUR_HAB] Current prices, euro per capita\n",
        "\"\"\"\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "GREEN_Losses = GREEN_Losses[GREEN_Losses['statinfo']=='VAL_A']\n",
        "GREEN_Losses = GREEN_Losses[GREEN_Losses[\"unit\"]=='CP_EUR_HAB']\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "GREEN_Losses = GREEN_Losses.drop(columns=GREEN_Losses.columns[0:GREEN_Losses.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = GREEN_Losses.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = GREEN_Losses.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "GREEN_Losses['mean_GREEN_Losses'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "GREEN_Losses = GREEN_Losses.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "GREEN_Losses.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "9QK2BYwC_V8x",
        "outputId": "83588aa8-0693-47bf-aad1-2e8f9532e33d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   country  mean_GREEN_Losses\n",
              "66      AT          40.223636\n",
              "67      BE          34.092500\n",
              "68      BG          16.006136\n",
              "70      CY          12.567045\n",
              "71      CZ          40.780682"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91cd8f84-9577-4167-8958-0d180f4a63d5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_GREEN_Losses</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>AT</td>\n",
              "      <td>40.223636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>BE</td>\n",
              "      <td>34.092500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>68</th>\n",
              "      <td>BG</td>\n",
              "      <td>16.006136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>CY</td>\n",
              "      <td>12.567045</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>CZ</td>\n",
              "      <td>40.780682</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91cd8f84-9577-4167-8958-0d180f4a63d5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-91cd8f84-9577-4167-8958-0d180f4a63d5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-91cd8f84-9577-4167-8958-0d180f4a63d5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fef368db-8cf8-4ffb-94ad-437cb387151e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fef368db-8cf8-4ffb-94ad-437cb387151e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fef368db-8cf8-4ffb-94ad-437cb387151e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GREEN_Losses",
              "summary": "{\n  \"name\": \"GREEN_Losses\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_GREEN_Losses\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36.576001971589925,\n        \"min\": 2.5520454545454543,\n        \"max\": 191.3090909090909,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          52.18113636363637,\n          64.93318181818181,\n          40.22363636363636\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Contribution to the international 100bn USD commitment on climate related expending (source: DG CLIMA, EIONET)"
      ],
      "metadata": {
        "id": "83-jwiUAAqKF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "GREEN_COP21 = eurostat.get_data_df('sdg_13_50')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "GREEN_COP21 = GREEN_COP21.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "GREEN_COP21 = GREEN_COP21[GREEN_COP21[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "GREEN_COP21 = GREEN_COP21.drop(columns=GREEN_COP21.columns[0:GREEN_COP21.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = GREEN_COP21.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = GREEN_COP21.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "GREEN_COP21['mean_GREEN_COP21'] = df.sum(axis=1) #calcul la moyenne des colonnes\n",
        "GREEN_COP21 = GREEN_COP21.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "GREEN_COP21.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "St6LfORhAqAP",
        "outputId": "fd8e97b6-ba47-49da-98d3-896f1690cacd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  country  mean_GREEN_COP21\n",
              "0      AT           2641.17\n",
              "1      BE           1614.33\n",
              "2      BG              0.47\n",
              "4      CY              0.00\n",
              "5      CZ             86.71"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b255f4e8-cdaa-401d-aadc-ab63b676859b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_GREEN_COP21</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AT</td>\n",
              "      <td>2641.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>BE</td>\n",
              "      <td>1614.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>BG</td>\n",
              "      <td>0.47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CY</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>CZ</td>\n",
              "      <td>86.71</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b255f4e8-cdaa-401d-aadc-ab63b676859b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b255f4e8-cdaa-401d-aadc-ab63b676859b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b255f4e8-cdaa-401d-aadc-ab63b676859b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f1697295-d78b-44b1-af1b-52a401e74435\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f1697295-d78b-44b1-af1b-52a401e74435')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f1697295-d78b-44b1-af1b-52a401e74435 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GREEN_COP21",
              "summary": "{\n  \"name\": \"GREEN_COP21\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_GREEN_COP21\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17409.336502563212,\n        \"min\": 0.0,\n        \"max\": 75708.13,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          6967.47,\n          0.82,\n          2641.17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Gross value added in environmental goods and services sector"
      ],
      "metadata": {
        "id": "GoJiKHG7EMr8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "GREEN_gross_value = eurostat.get_data_df('sdg_12_61')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "GREEN_gross_value = GREEN_gross_value.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "GREEN_gross_value = GREEN_gross_value[GREEN_gross_value[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "\"\"\"\n",
        "[CLV10_MEUR] Chain linked volumes (2010), million euro\n",
        "[PC_GDP] Percentage of gross domestic product (GDP)\n",
        "\"\"\"\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "GREEN_gross_value = GREEN_gross_value[GREEN_gross_value['unit']=='PC_GDP']\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "GREEN_gross_value = GREEN_gross_value.drop(columns=GREEN_gross_value.columns[0:GREEN_gross_value.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = GREEN_gross_value.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = GREEN_gross_value.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "GREEN_gross_value['mean_GREEN_gross_value'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "GREEN_gross_value = GREEN_gross_value.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "\n",
        "GREEN_gross_value.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "AgSzjfnNEMiy",
        "outputId": "2bbbf884-1380-4701-9d74-381c9a259e2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   country  mean_GREEN_gross_value\n",
              "33      AT                4.484000\n",
              "34      BE                1.795556\n",
              "35      BG                2.332000\n",
              "37      CY                1.832000\n",
              "38      CZ                2.486667"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dc8cd4bf-7ddc-4b22-9d29-409a3ad78496\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_GREEN_gross_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>AT</td>\n",
              "      <td>4.484000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>BE</td>\n",
              "      <td>1.795556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>BG</td>\n",
              "      <td>2.332000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>CY</td>\n",
              "      <td>1.832000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>CZ</td>\n",
              "      <td>2.486667</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc8cd4bf-7ddc-4b22-9d29-409a3ad78496')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dc8cd4bf-7ddc-4b22-9d29-409a3ad78496 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dc8cd4bf-7ddc-4b22-9d29-409a3ad78496');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7fc1098e-020f-497b-928b-7a8c25400c16\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7fc1098e-020f-497b-928b-7a8c25400c16')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7fc1098e-020f-497b-928b-7a8c25400c16 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GREEN_gross_value",
              "summary": "{\n  \"name\": \"GREEN_gross_value\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_GREEN_gross_value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1536112508663874,\n        \"min\": 0.6316666666666667,\n        \"max\": 5.850909090909091,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          2.469,\n          2.1166666666666667,\n          4.484\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Energy productivity"
      ],
      "metadata": {
        "id": "63x5l780FACb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "NRJ_productivity = eurostat.get_data_df('sdg_07_30')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "NRJ_productivity = NRJ_productivity.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "NRJ_productivity = NRJ_productivity[NRJ_productivity[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "\"\"\"\n",
        "[EUR_KGOE] Euro per kilogram of oil equivalent (KGOE)\n",
        "[PPS_KGOE] Purchasing power standard (PPS) per kilogram of oil equivalent\n",
        "\"\"\"\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "NRJ_productivity = NRJ_productivity[NRJ_productivity['unit']=='PPS_KGOE']\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "NRJ_productivity = NRJ_productivity.drop(columns=NRJ_productivity.columns[0:NRJ_productivity.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = NRJ_productivity.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = NRJ_productivity.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "NRJ_productivity['mean_NRJ_productivity'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "NRJ_productivity = NRJ_productivity.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "\n",
        "NRJ_productivity.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "JDP1igOzEf8f",
        "outputId": "f9b74b26-c1ae-419f-d134-a5a31566444d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   country  mean_NRJ_productivity\n",
              "39      AT               8.568333\n",
              "41      BE               5.556667\n",
              "42      BG               4.720000\n",
              "43      CY               7.485000\n",
              "44      CZ               5.612500"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-82514bbf-1b65-486f-8899-963d5d2fbad0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_NRJ_productivity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>AT</td>\n",
              "      <td>8.568333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>BE</td>\n",
              "      <td>5.556667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>BG</td>\n",
              "      <td>4.720000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>CY</td>\n",
              "      <td>7.485000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>CZ</td>\n",
              "      <td>5.612500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-82514bbf-1b65-486f-8899-963d5d2fbad0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-82514bbf-1b65-486f-8899-963d5d2fbad0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-82514bbf-1b65-486f-8899-963d5d2fbad0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2ec2fd62-e13a-4524-82d1-f1f67ab417e0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2ec2fd62-e13a-4524-82d1-f1f67ab417e0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2ec2fd62-e13a-4524-82d1-f1f67ab417e0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "NRJ_productivity",
              "summary": "{\n  \"name\": \"NRJ_productivity\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_NRJ_productivity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0840906700381754,\n        \"min\": 4.659583333333334,\n        \"max\": 14.102916666666665,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          8.36125,\n          8.929583333333333,\n          8.568333333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Premature deaths due to exposure to fine particulate matter (PM2.5)"
      ],
      "metadata": {
        "id": "LLgh3zK-FPXu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "POLL_death = eurostat.get_data_df('sdg_11_52')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "POLL_death = POLL_death.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "POLL_death = POLL_death[POLL_death[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "\"\"\"\n",
        "[NR] Number\n",
        "[RT] Rate\n",
        "\"\"\"\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "POLL_death = POLL_death[POLL_death['unit']=='RT']\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "POLL_death = POLL_death.drop(columns=POLL_death.columns[0:POLL_death.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = POLL_death.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = POLL_death.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "POLL_death['mean_POLL_death'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "POLL_death = POLL_death.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "\n",
        "POLL_death.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "tQxigDl1FPP3",
        "outputId": "f1fa76c7-9be8-40e4-bd3a-adfad5b35f6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   country  mean_POLL_death\n",
              "39      AT        58.470588\n",
              "41      BE        62.411765\n",
              "42      BG       205.941176\n",
              "44      CY        88.764706\n",
              "45      CZ        90.882353"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2c3c35dc-bfea-4da7-93ff-7cdea24a02b6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_POLL_death</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>AT</td>\n",
              "      <td>58.470588</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>BE</td>\n",
              "      <td>62.411765</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>BG</td>\n",
              "      <td>205.941176</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>CY</td>\n",
              "      <td>88.764706</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>CZ</td>\n",
              "      <td>90.882353</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c3c35dc-bfea-4da7-93ff-7cdea24a02b6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2c3c35dc-bfea-4da7-93ff-7cdea24a02b6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2c3c35dc-bfea-4da7-93ff-7cdea24a02b6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-aadb9625-4073-4adc-b8fb-a9d6f4aa4404\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aadb9625-4073-4adc-b8fb-a9d6f4aa4404')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-aadb9625-4073-4adc-b8fb-a9d6f4aa4404 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "POLL_death",
              "summary": "{\n  \"name\": \"POLL_death\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_POLL_death\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44.070635404738326,\n        \"min\": 10.352941176470589,\n        \"max\": 205.94117647058823,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          44.05882352941177,\n          34.411764705882355,\n          58.470588235294116\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Environmental tax revenues"
      ],
      "metadata": {
        "id": "no1_2AN6G5HI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "GREEN_tax = eurostat.get_data_df('env_ac_tax')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "GREEN_tax = GREEN_tax.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "GREEN_tax = GREEN_tax[GREEN_tax[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "\"\"\"\n",
        "[ENV] Total environmental taxes\n",
        "[NRG] Energy taxes\n",
        "[TRA] Transport taxes\n",
        "[POL_RES] Taxes on pollution/resources\n",
        "\n",
        "[MIO_EUR] Million euro\n",
        "[MIO_NAC] Million units of national currency\n",
        "[PC_TSCO] Percentage of total revenues from taxes and social contributions (including imputed social contributions)\n",
        "[PC_TSCO_X_ISCO] Percentage of total revenues from taxes and social contributions (excluding imputed social contributions)\n",
        "[PC_GDP] Percentage of gross domestic product (GDP)\n",
        "\"\"\"\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "GREEN_tax = GREEN_tax[GREEN_tax['tax']=='ENV']\n",
        "GREEN_tax = GREEN_tax[GREEN_tax['unit']=='PC_GDP']\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "GREEN_tax = GREEN_tax.drop(columns=GREEN_tax.columns[0:GREEN_tax.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = GREEN_tax.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = GREEN_tax.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "GREEN_tax['mean_GREEN_tax'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "GREEN_tax = GREEN_tax.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "\n",
        "GREEN_tax.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "NRxq_F0yG5AK",
        "outputId": "292630c4-0132-4cd0-8c7a-bca278248c04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   country  mean_GREEN_tax\n",
              "64      AT        2.444828\n",
              "65      BE        2.485172\n",
              "66      BG        2.704483\n",
              "68      CY        3.049310\n",
              "69      CZ        2.159655"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-163a36e3-bc80-432a-9b1b-dc5f4daa2bf3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_GREEN_tax</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>AT</td>\n",
              "      <td>2.444828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>BE</td>\n",
              "      <td>2.485172</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>BG</td>\n",
              "      <td>2.704483</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>68</th>\n",
              "      <td>CY</td>\n",
              "      <td>3.049310</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>CZ</td>\n",
              "      <td>2.159655</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-163a36e3-bc80-432a-9b1b-dc5f4daa2bf3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-163a36e3-bc80-432a-9b1b-dc5f4daa2bf3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-163a36e3-bc80-432a-9b1b-dc5f4daa2bf3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ef6d7879-da0c-477e-9bd2-e09efad62093\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ef6d7879-da0c-477e-9bd2-e09efad62093')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ef6d7879-da0c-477e-9bd2-e09efad62093 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GREEN_tax",
              "summary": "{\n  \"name\": \"GREEN_tax\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_GREEN_tax\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5627424864085969,\n        \"min\": 1.8606896551724135,\n        \"max\": 4.133793103448277,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          1.8606896551724135,\n          2.2510344827586204,\n          2.444827586206897\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Employment in the environmental goods and services sector"
      ],
      "metadata": {
        "id": "rOrX5J9EHpZ1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "GREEN_employment = eurostat.get_data_df('env_ac_egss1')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "GREEN_employment = GREEN_employment.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "GREEN_employment = GREEN_employment[GREEN_employment[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "\"\"\"\n",
        "[TOT_EGSS] Total environmental goods and services sector\n",
        "[ANC] Ancillary activities\n",
        "[MKT] Market activities\n",
        "[ES_CS] Market activities: environmental specific and connected services\n",
        "[C_REP] Market activities: cleaner and resource efficient products\n",
        "[NMKT] Non-market activities\n",
        "[OWN_USE] Own final use activities\n",
        "\"\"\"\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "GREEN_employment = GREEN_employment[GREEN_employment['ty']=='TOT_EGSS']\n",
        "\n",
        "GREEN_employment = GREEN_employment.groupby('country').sum()\n",
        "GREEN_employment.reset_index(inplace=True)\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "GREEN_employment = GREEN_employment.drop(columns=GREEN_employment.columns[1:GREEN_employment.columns.get_loc('unit')+1])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "df = GREEN_employment.iloc[:, 1:] #Retourne la table avec uniquement les prix\n",
        "GREEN_employment['mean_GREEN_employment'] = df.sum(axis=1) #calcul la moyenne des colonnes\n",
        "GREEN_employment = GREEN_employment.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "\n",
        "GREEN_employment"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 864
        },
        "id": "eJQuxbEMHpSf",
        "outputId": "d8b76569-34dd-4048-eef2-b4db6ffcc891"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   country  mean_GREEN_employment\n",
              "0       AT             19383640.0\n",
              "1       BE              5045574.0\n",
              "2       BG              3773866.0\n",
              "3       CY               372371.0\n",
              "4       CZ              7642963.0\n",
              "5       DE             38082271.0\n",
              "6       DK              6043897.0\n",
              "7       EE              2096800.0\n",
              "8       ES             31114862.0\n",
              "9       FI             10686157.0\n",
              "10      FR             65675414.0\n",
              "11      HR              2319895.0\n",
              "12      HU              1773955.0\n",
              "13      IE              2226384.0\n",
              "14      IT             34123037.0\n",
              "15      LT              3705280.0\n",
              "16      LU              1715223.0\n",
              "17      LV              1640729.0\n",
              "18      MT               262660.0\n",
              "19      NL             19285852.0\n",
              "20      PL             15233320.0\n",
              "21      PT              7998754.0\n",
              "22      RO             19107921.0\n",
              "23      SE              8911204.0\n",
              "24      SI              2391372.0\n",
              "25      SK              1392878.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4516cb1-469f-443d-b5ee-4331489b96f0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_GREEN_employment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AT</td>\n",
              "      <td>19383640.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>BE</td>\n",
              "      <td>5045574.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>BG</td>\n",
              "      <td>3773866.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>CY</td>\n",
              "      <td>372371.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CZ</td>\n",
              "      <td>7642963.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>DE</td>\n",
              "      <td>38082271.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>DK</td>\n",
              "      <td>6043897.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>EE</td>\n",
              "      <td>2096800.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>ES</td>\n",
              "      <td>31114862.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>FI</td>\n",
              "      <td>10686157.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>FR</td>\n",
              "      <td>65675414.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>HR</td>\n",
              "      <td>2319895.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>HU</td>\n",
              "      <td>1773955.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>IE</td>\n",
              "      <td>2226384.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>IT</td>\n",
              "      <td>34123037.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>LT</td>\n",
              "      <td>3705280.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>LU</td>\n",
              "      <td>1715223.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>LV</td>\n",
              "      <td>1640729.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>MT</td>\n",
              "      <td>262660.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>NL</td>\n",
              "      <td>19285852.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>PL</td>\n",
              "      <td>15233320.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>PT</td>\n",
              "      <td>7998754.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>RO</td>\n",
              "      <td>19107921.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>SE</td>\n",
              "      <td>8911204.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>SI</td>\n",
              "      <td>2391372.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>SK</td>\n",
              "      <td>1392878.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4516cb1-469f-443d-b5ee-4331489b96f0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e4516cb1-469f-443d-b5ee-4331489b96f0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e4516cb1-469f-443d-b5ee-4331489b96f0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-52bd6a12-ffa4-4bcf-8c48-4cd0b9dbbe3f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-52bd6a12-ffa4-4bcf-8c48-4cd0b9dbbe3f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-52bd6a12-ffa4-4bcf-8c48-4cd0b9dbbe3f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_197721d2-b835-4d4e-8e7f-7d6559a7685f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('GREEN_employment')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_197721d2-b835-4d4e-8e7f-7d6559a7685f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('GREEN_employment');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GREEN_employment",
              "summary": "{\n  \"name\": \"GREEN_employment\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_GREEN_employment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15406569.960205665,\n        \"min\": 262660.0,\n        \"max\": 65675414.0,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          31114862.0,\n          1715223.0,\n          19383640.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "C7gp-TRrItu-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Investments in climate change mitigation by NACE Rev. 2 activity"
      ],
      "metadata": {
        "id": "v4c040dAI_4_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "GREEN_investments = eurostat.get_data_df('env_ac_ccminv')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "GREEN_investments = GREEN_investments.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "GREEN_investments = GREEN_investments[GREEN_investments[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "\"\"\"\n",
        "[TOTAL] Total - all NACE activities\n",
        "[A] Agriculture, forestry and fishing\n",
        "[B] Mining and quarrying\n",
        "[C] Manufacturing\n",
        "[D] Electricity, gas, steam and air conditioning supply\n",
        "\n",
        "[MIO_EUR] Million euro\n",
        "[PC_GDP] Percentage of gross domestic product (GDP)\n",
        "[CLV20_MEUR] Chain linked volumes (2020), million euro\n",
        "\"\"\"\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "GREEN_investments = GREEN_investments[GREEN_investments['nace_r2']=='TOTAL']\n",
        "GREEN_investments = GREEN_investments[GREEN_investments['unit']=='CLV20_MEUR']\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "GREEN_investments = GREEN_investments.drop(columns=GREEN_investments.columns[0:GREEN_investments.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = GREEN_investments.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = GREEN_investments.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "GREEN_investments['mean_GREEN_investments'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "GREEN_investments = GREEN_investments.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "\n",
        "GREEN_investments.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Dt6zO-hvI_ua",
        "outputId": "7d4362d9-09b3-4687-d48d-4f5658ac2676"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    country  mean_GREEN_investments\n",
              "857      AT             3213.635789\n",
              "858      BE             3966.281053\n",
              "859      BG              450.814737\n",
              "860      CY               26.490000\n",
              "861      CZ             1208.926316"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c8442bc2-ffd5-4503-b3f1-90dbf4ed4eac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_GREEN_investments</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>857</th>\n",
              "      <td>AT</td>\n",
              "      <td>3213.635789</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>858</th>\n",
              "      <td>BE</td>\n",
              "      <td>3966.281053</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>859</th>\n",
              "      <td>BG</td>\n",
              "      <td>450.814737</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>860</th>\n",
              "      <td>CY</td>\n",
              "      <td>26.490000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>861</th>\n",
              "      <td>CZ</td>\n",
              "      <td>1208.926316</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c8442bc2-ffd5-4503-b3f1-90dbf4ed4eac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c8442bc2-ffd5-4503-b3f1-90dbf4ed4eac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c8442bc2-ffd5-4503-b3f1-90dbf4ed4eac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ca278705-6255-47ba-9141-cc9a863268e8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ca278705-6255-47ba-9141-cc9a863268e8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ca278705-6255-47ba-9141-cc9a863268e8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GREEN_investments",
              "summary": "{\n  \"name\": \"GREEN_investments\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"ES\",\n          \"LU\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_GREEN_investments\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3642.4878777654994,\n        \"min\": 26.49,\n        \"max\": 14650.29052631579,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          4896.697894736842,\n          511.19578947368416,\n          3213.635789473684\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install pycountry"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HC0_qaWECcok",
        "outputId": "fb96240e-80a2-4a14-a195-ad8ff35209b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pycountry\n",
            "  Downloading pycountry-24.6.1-py3-none-any.whl.metadata (12 kB)\n",
            "Downloading pycountry-24.6.1-py3-none-any.whl (6.3 MB)\n",
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/6.3 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.1/6.3 MB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:03\u001b[0m\r\u001b[2K   \u001b[91m━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.7/6.3 MB\u001b[0m \u001b[31m10.2 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━━━━━━━\u001b[0m \u001b[32m4.2/6.3 MB\u001b[0m \u001b[31m39.4 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m \u001b[32m6.3/6.3 MB\u001b[0m \u001b[31m53.5 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.3/6.3 MB\u001b[0m \u001b[31m42.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pycountry\n",
            "Successfully installed pycountry-24.6.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pycountry\n",
        "GREEN_investmentsTop10=GREEN_investments.nlargest(10, 'mean_GREEN_investments')\n",
        "def iso_to_country_name(iso_code):\n",
        "    try:\n",
        "        return pycountry.countries.get(alpha_2=iso_code).name\n",
        "    except AttributeError:\n",
        "        return None\n",
        "\n",
        "# Appliquer la fonction au DataFrame\n",
        "GREEN_investmentsTop10['country'] = GREEN_investmentsTop10['country'].apply(iso_to_country_name)\n",
        "\n",
        "GREEN_investmentsTop10.plot(x='country', y='mean_GREEN_investments', kind='bar', title='moyenne des investissements verts sur les 5 dernières années (Mds€)' )\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 561
        },
        "id": "pcLzHiE3ADti",
        "outputId": "4bf4ba14-f647-495b-c963-b5b14f75d5e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'moyenne des investissements verts sur les 5 dernières années (Mds€)'}, xlabel='country'>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Environmental protection investments of total economy"
      ],
      "metadata": {
        "id": "YQ3iYem8Jp-Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "GREEN_enviro_protection = eurostat.get_data_df('env_ac_epite1')\n",
        "\n",
        "# Renommer la colonne pour éviter les problèmes avec le backslash\n",
        "GREEN_enviro_protection = GREEN_enviro_protection.rename(columns={\"geo\\TIME_PERIOD\": \"country\"})\n",
        "\n",
        "# Filtrer les lignes où \"geo_TIME_PERIOD\" est dans la colonne \"iso2\" de code_EU\n",
        "GREEN_enviro_protection = GREEN_enviro_protection[GREEN_enviro_protection[\"country\"].isin(code_EU[\"iso2\"])]\n",
        "\n",
        "#Garder uniquement les unités de mesure d'intérêt\n",
        "GREEN_enviro_protection = GREEN_enviro_protection[GREEN_enviro_protection['unit']=='PC_GDP']\n",
        "\n",
        "#supprimer les colonnes inutiles\n",
        "GREEN_enviro_protection = GREEN_enviro_protection.drop(columns=GREEN_enviro_protection.columns[0:GREEN_enviro_protection.columns.get_loc('country')])\n",
        "\n",
        "# Faire la moyenne des colonnes pour une valeur annuelle\n",
        "column_index = GREEN_enviro_protection.columns.get_loc('country') #récupérer l'indice de la colonne country\n",
        "df = GREEN_enviro_protection.iloc[:, (column_index+1):] #Retourne la table avec uniquement les prix\n",
        "GREEN_enviro_protection['mean_GREEN_enviro_protection'] = df.mean(axis=1) #calcul la moyenne des colonnes\n",
        "GREEN_enviro_protection = GREEN_enviro_protection.iloc[:, [0, -1]] #supprime les valeurs semestrielles déjà moyennées\n",
        "\n",
        "GREEN_enviro_protection.head(100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 833
        },
        "id": "VKAgtuvwJptQ",
        "outputId": "f4489995-8d1c-4b66-a79c-22d40d9d21aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   country  mean_GREEN_enviro_protection\n",
              "28      AT                      0.325000\n",
              "29      BE                      0.462500\n",
              "30      BG                      0.862500\n",
              "32      CY                      0.418182\n",
              "33      CZ                      0.750000\n",
              "34      DE                      0.400000\n",
              "35      DK                      0.437500\n",
              "36      EE                      0.650000\n",
              "38      ES                      0.246154\n",
              "40      FI                      0.260000\n",
              "41      FR                      0.400000\n",
              "42      HR                      0.562500\n",
              "43      HU                      0.737500\n",
              "44      IE                      0.225000\n",
              "45      IT                      0.400000\n",
              "46      LT                      0.691667\n",
              "47      LV                      0.400000\n",
              "48      MT                      0.300000\n",
              "49      NL                      0.477778\n",
              "50      PL                      0.600000\n",
              "51      PT                      0.312500\n",
              "52      RO                      0.558824\n",
              "53      SE                      0.383333\n",
              "54      SI                      0.914286\n",
              "55      SK                      0.400000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-33ddeffe-3d69-47f3-9fad-420219bfce65\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>mean_GREEN_enviro_protection</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>AT</td>\n",
              "      <td>0.325000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>BE</td>\n",
              "      <td>0.462500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>BG</td>\n",
              "      <td>0.862500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>CY</td>\n",
              "      <td>0.418182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>CZ</td>\n",
              "      <td>0.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>DE</td>\n",
              "      <td>0.400000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>DK</td>\n",
              "      <td>0.437500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>EE</td>\n",
              "      <td>0.650000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>ES</td>\n",
              "      <td>0.246154</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>FI</td>\n",
              "      <td>0.260000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>FR</td>\n",
              "      <td>0.400000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>HR</td>\n",
              "      <td>0.562500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>HU</td>\n",
              "      <td>0.737500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>IE</td>\n",
              "      <td>0.225000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>IT</td>\n",
              "      <td>0.400000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>LT</td>\n",
              "      <td>0.691667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>LV</td>\n",
              "      <td>0.400000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>MT</td>\n",
              "      <td>0.300000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>NL</td>\n",
              "      <td>0.477778</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>PL</td>\n",
              "      <td>0.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>PT</td>\n",
              "      <td>0.312500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>RO</td>\n",
              "      <td>0.558824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>SE</td>\n",
              "      <td>0.383333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>SI</td>\n",
              "      <td>0.914286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>SK</td>\n",
              "      <td>0.400000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33ddeffe-3d69-47f3-9fad-420219bfce65')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-33ddeffe-3d69-47f3-9fad-420219bfce65 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-33ddeffe-3d69-47f3-9fad-420219bfce65');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-44fb0472-6a42-44c3-95ff-930d8097bc2c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-44fb0472-6a42-44c3-95ff-930d8097bc2c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-44fb0472-6a42-44c3-95ff-930d8097bc2c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "GREEN_enviro_protection",
              "summary": "{\n  \"name\": \"GREEN_enviro_protection\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"ES\",\n          \"LV\",\n          \"AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_GREEN_enviro_protection\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1908188803772704,\n        \"min\": 0.225,\n        \"max\": 0.9142857142857144,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          0.30000000000000004,\n          0.26,\n          0.325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### CCPI des pays en 2024"
      ],
      "metadata": {
        "id": "wT9ruIV6ojZj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# ID du fichier Google Drive (L'ID du fichier est la partie entre /d/ et /edit.)\n",
        "file_id = '1OCd3tciUqE7zKyOWzk6M8h0vxy7vRZ95'\n",
        "\n",
        "# Nom du fichier à enregistrer localement\n",
        "output_file = 'CCPI.csv'\n",
        "\n",
        "# Télécharger le fichier depuis Google Drive\n",
        "gdown.download(f'https://drive.google.com/uc?id={file_id}', output_file, quiet=False)\n",
        "CCPI = pd.read_csv(output_file)\n",
        "CCPI = CCPI[[\"PAYS\",\"CCPI\"]]\n",
        "CCPI.rename(columns={'PAYS': 'country'}, inplace=True)\n",
        "CCPI = CCPI.iloc[:31]\n",
        "\n",
        "CCPI"
      ],
      "metadata": {
        "id": "84Ta48GIo-rv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "dede42ba-65de-40a1-b050-74e9a31790ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1OCd3tciUqE7zKyOWzk6M8h0vxy7vRZ95\n",
            "To: /content/CCPI.csv\n",
            "100%|██████████| 3.77k/3.77k [00:00<00:00, 9.09MB/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                country   CCPI\n",
              "0              Denmark   78.37\n",
              "1           Netherlands  69.60\n",
              "2        United Kingdom  69.29\n",
              "3                Norway  68.21\n",
              "4                Sweden  67.62\n",
              "5            Luxembourg  67.29\n",
              "6               Estonia  66.79\n",
              "7              Portugal  66.59\n",
              "8               Germany  64.91\n",
              "9   European Union (27)  63.76\n",
              "10            Lithuania  63.05\n",
              "11                Spain  61.57\n",
              "12              Greece   59.41\n",
              "13              Austria  59.40\n",
              "14               France  59.18\n",
              "15              Ireland  57.17\n",
              "16             Slovenia  57.16\n",
              "17              Romania  56.45\n",
              "18          Switzerland  56.10\n",
              "19                Malta  55.78\n",
              "20              Belgium  54.89\n",
              "21               Latvia  54.35\n",
              "22              Finland  54.24\n",
              "23              Croatia  51.83\n",
              "24                Italy  49.81\n",
              "25            Cyprus     49.45\n",
              "26              Hungary  48.81\n",
              "27             Slovakia  48.44\n",
              "28               Poland  47.86\n",
              "29      Czech Republic   47.57\n",
              "30             Bulgaria  47.13"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-514d2ca8-29e1-461b-a4bb-480ff90890cb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>CCPI</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>78.37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Netherlands</td>\n",
              "      <td>69.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>69.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Norway</td>\n",
              "      <td>68.21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Sweden</td>\n",
              "      <td>67.62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Luxembourg</td>\n",
              "      <td>67.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Estonia</td>\n",
              "      <td>66.79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Portugal</td>\n",
              "      <td>66.59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Germany</td>\n",
              "      <td>64.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>European Union (27)</td>\n",
              "      <td>63.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Lithuania</td>\n",
              "      <td>63.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Spain</td>\n",
              "      <td>61.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Greece</td>\n",
              "      <td>59.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Austria</td>\n",
              "      <td>59.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>France</td>\n",
              "      <td>59.18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Ireland</td>\n",
              "      <td>57.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Slovenia</td>\n",
              "      <td>57.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Romania</td>\n",
              "      <td>56.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Switzerland</td>\n",
              "      <td>56.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Malta</td>\n",
              "      <td>55.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Belgium</td>\n",
              "      <td>54.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Latvia</td>\n",
              "      <td>54.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Finland</td>\n",
              "      <td>54.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Croatia</td>\n",
              "      <td>51.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Italy</td>\n",
              "      <td>49.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Cyprus</td>\n",
              "      <td>49.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Hungary</td>\n",
              "      <td>48.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Slovakia</td>\n",
              "      <td>48.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>Poland</td>\n",
              "      <td>47.86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>Czech Republic</td>\n",
              "      <td>47.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>Bulgaria</td>\n",
              "      <td>47.13</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-514d2ca8-29e1-461b-a4bb-480ff90890cb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-514d2ca8-29e1-461b-a4bb-480ff90890cb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-514d2ca8-29e1-461b-a4bb-480ff90890cb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-04910383-1693-468a-837f-7761f42bbbd1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-04910383-1693-468a-837f-7761f42bbbd1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-04910383-1693-468a-837f-7761f42bbbd1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_cc907fd3-fd00-4c00-84c4-d36ae85d89e8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('CCPI')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_cc907fd3-fd00-4c00-84c4-d36ae85d89e8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('CCPI');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "CCPI",
              "summary": "{\n  \"name\": \"CCPI\",\n  \"rows\": 31,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 31,\n        \"samples\": [\n          \"Slovakia\",\n          \"Ireland\",\n          \"Croatia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CCPI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.062755685701498,\n        \"min\": 47.13,\n        \"max\": 78.37,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          48.44,\n          57.17,\n          51.83\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Ajout colonne iso2 et iso3\n",
        "CCPI['iso2'] = CCPI['country'].map(code_EU.set_index('name_en')['iso2'])\n",
        "CCPI['iso3'] = CCPI['country'].map(code_EU.set_index('name_en')['iso3'])\n",
        "\n",
        "display(CCPI)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "cTXkFLlEu39X",
        "outputId": "d376b45c-60d8-4d89-d556-caef7965fa5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                country   CCPI iso2 iso3\n",
              "0              Denmark   78.37  NaN  NaN\n",
              "1           Netherlands  69.60   NL  NLD\n",
              "2        United Kingdom  69.29  NaN  NaN\n",
              "3                Norway  68.21  NaN  NaN\n",
              "4                Sweden  67.62   SE  SWE\n",
              "5            Luxembourg  67.29   LU  LUX\n",
              "6               Estonia  66.79   EE  EST\n",
              "7              Portugal  66.59   PT  PRT\n",
              "8               Germany  64.91   DE  DEU\n",
              "9   European Union (27)  63.76  NaN  NaN\n",
              "10            Lithuania  63.05   LT  LTU\n",
              "11                Spain  61.57   ES  ESP\n",
              "12              Greece   59.41  NaN  NaN\n",
              "13              Austria  59.40   AT  AUT\n",
              "14               France  59.18   FR  FRA\n",
              "15              Ireland  57.17   IE  IRL\n",
              "16             Slovenia  57.16   SI  SVN\n",
              "17              Romania  56.45   RO  ROU\n",
              "18          Switzerland  56.10  NaN  NaN\n",
              "19                Malta  55.78   MT  MLT\n",
              "20              Belgium  54.89   BE  BEL\n",
              "21               Latvia  54.35   LV  LVA\n",
              "22              Finland  54.24   FI  FIN\n",
              "23              Croatia  51.83   HR  HRV\n",
              "24                Italy  49.81   IT  ITA\n",
              "25            Cyprus     49.45  NaN  NaN\n",
              "26              Hungary  48.81   HU  HUN\n",
              "27             Slovakia  48.44   SK  SVK\n",
              "28               Poland  47.86   PL  POL\n",
              "29      Czech Republic   47.57  NaN  NaN\n",
              "30             Bulgaria  47.13   BG  BGR"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dae097ad-173c-4721-bd9d-da52c4827ce7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>CCPI</th>\n",
              "      <th>iso2</th>\n",
              "      <th>iso3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>78.37</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Netherlands</td>\n",
              "      <td>69.60</td>\n",
              "      <td>NL</td>\n",
              "      <td>NLD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>69.29</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Norway</td>\n",
              "      <td>68.21</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Sweden</td>\n",
              "      <td>67.62</td>\n",
              "      <td>SE</td>\n",
              "      <td>SWE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Luxembourg</td>\n",
              "      <td>67.29</td>\n",
              "      <td>LU</td>\n",
              "      <td>LUX</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Estonia</td>\n",
              "      <td>66.79</td>\n",
              "      <td>EE</td>\n",
              "      <td>EST</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Portugal</td>\n",
              "      <td>66.59</td>\n",
              "      <td>PT</td>\n",
              "      <td>PRT</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Germany</td>\n",
              "      <td>64.91</td>\n",
              "      <td>DE</td>\n",
              "      <td>DEU</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>European Union (27)</td>\n",
              "      <td>63.76</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Lithuania</td>\n",
              "      <td>63.05</td>\n",
              "      <td>LT</td>\n",
              "      <td>LTU</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Spain</td>\n",
              "      <td>61.57</td>\n",
              "      <td>ES</td>\n",
              "      <td>ESP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Greece</td>\n",
              "      <td>59.41</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Austria</td>\n",
              "      <td>59.40</td>\n",
              "      <td>AT</td>\n",
              "      <td>AUT</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>France</td>\n",
              "      <td>59.18</td>\n",
              "      <td>FR</td>\n",
              "      <td>FRA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Ireland</td>\n",
              "      <td>57.17</td>\n",
              "      <td>IE</td>\n",
              "      <td>IRL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Slovenia</td>\n",
              "      <td>57.16</td>\n",
              "      <td>SI</td>\n",
              "      <td>SVN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Romania</td>\n",
              "      <td>56.45</td>\n",
              "      <td>RO</td>\n",
              "      <td>ROU</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Switzerland</td>\n",
              "      <td>56.10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Malta</td>\n",
              "      <td>55.78</td>\n",
              "      <td>MT</td>\n",
              "      <td>MLT</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Belgium</td>\n",
              "      <td>54.89</td>\n",
              "      <td>BE</td>\n",
              "      <td>BEL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Latvia</td>\n",
              "      <td>54.35</td>\n",
              "      <td>LV</td>\n",
              "      <td>LVA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Finland</td>\n",
              "      <td>54.24</td>\n",
              "      <td>FI</td>\n",
              "      <td>FIN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Croatia</td>\n",
              "      <td>51.83</td>\n",
              "      <td>HR</td>\n",
              "      <td>HRV</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Italy</td>\n",
              "      <td>49.81</td>\n",
              "      <td>IT</td>\n",
              "      <td>ITA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Cyprus</td>\n",
              "      <td>49.45</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Hungary</td>\n",
              "      <td>48.81</td>\n",
              "      <td>HU</td>\n",
              "      <td>HUN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Slovakia</td>\n",
              "      <td>48.44</td>\n",
              "      <td>SK</td>\n",
              "      <td>SVK</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>Poland</td>\n",
              "      <td>47.86</td>\n",
              "      <td>PL</td>\n",
              "      <td>POL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>Czech Republic</td>\n",
              "      <td>47.57</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>Bulgaria</td>\n",
              "      <td>47.13</td>\n",
              "      <td>BG</td>\n",
              "      <td>BGR</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dae097ad-173c-4721-bd9d-da52c4827ce7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dae097ad-173c-4721-bd9d-da52c4827ce7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dae097ad-173c-4721-bd9d-da52c4827ce7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1aea3ebd-6417-435d-bc5e-037247ee446a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1aea3ebd-6417-435d-bc5e-037247ee446a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1aea3ebd-6417-435d-bc5e-037247ee446a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9c83f615-12bb-4965-ad80-f519963caec5\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('CCPI')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9c83f615-12bb-4965-ad80-f519963caec5 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('CCPI');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "CCPI",
              "summary": "{\n  \"name\": \"CCPI\",\n  \"rows\": 31,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 31,\n        \"samples\": [\n          \"Slovakia\",\n          \"Ireland\",\n          \"Croatia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CCPI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.062755685701498,\n        \"min\": 47.13,\n        \"max\": 78.37,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          48.44,\n          57.17,\n          51.83\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"iso2\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"LV\",\n          \"FR\",\n          \"NL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"iso3\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"LVA\",\n          \"FRA\",\n          \"NLD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Exploration et analyse des données"
      ],
      "metadata": {
        "id": "lCr7m9otN1yc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Liste des DataFrames à fusionner\n",
        "dataframes = [\n",
        "    electricity_price, GDP_per_capita, HICP_inflation, NRJ_dependency, NRJ_productivity, POLL_death,\n",
        "    GREEN_Bound, GREEN_COP21, GREEN_Losses, GREEN_employment, GREEN_enviro_protection, GREEN_gross_value,\n",
        "    GREEN_investments, GREEN_tax, FDI_impact, GOV_GDP, GOV_bound, GOV_deficit, share_renew_energy, CO2_emissions\n",
        "]\n",
        "\n",
        "# Fusionner les DataFrames successivement\n",
        "data = code_EU.rename(columns={'iso2': 'country'})\n",
        "\n",
        "for df in dataframes:\n",
        "    data = pd.merge(data, df, on='country', how='left')\n",
        "\n",
        "data.dropna(inplace=True) #supprimer la Grèce\n",
        "\n",
        "# Afficher un aperçu des données fusionnées\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 870
        },
        "id": "q4UU6BveutWJ",
        "outputId": "7621f25b-ff7a-4ab2-c6ce-397187a6d410"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           name_en             name_fr country iso3  mean_energy_price  \\\n",
              "0          Croatia             Croatie      HR  HRV           0.175217   \n",
              "1          Romania            Roumanie      RO  ROU           0.287683   \n",
              "2           Latvia            Lettonie      LV  LVA           0.289067   \n",
              "3          Austria            Autriche      AT  AUT           0.198467   \n",
              "4        Lithuania            Lituanie      LT  LTU           0.247333   \n",
              "5            Spain             Espagne      ES  ESP           0.252800   \n",
              "6         Slovenia            Slovénie      SI  SVN           0.165267   \n",
              "7          Belgium            Belgique      BE  BEL           0.257600   \n",
              "8      Netherlands            Pays-Bas      NL  NLD           0.250000   \n",
              "9           Poland             Pologne      PL  POL           0.167360   \n",
              "10  Czech Republic  République tchèque      CZ  CZE           0.263067   \n",
              "11          France              France      FR  FRA           0.162367   \n",
              "12        Slovakia           Slovaquie      SK  SVK           0.152867   \n",
              "14         Finland            Finlande      FI  FIN           0.107600   \n",
              "15           Italy              Italie      IT  ITA           0.298900   \n",
              "16          Sweden               Suède      SE  SWE           0.118917   \n",
              "17         Denmark            Danemark      DK  DNK           0.177750   \n",
              "18         Germany           Allemagne      DE  DEU           0.224517   \n",
              "19        Portugal            Portugal      PT  PRT           0.242600   \n",
              "20        Bulgaria            Bulgarie      BG  BGR           0.164633   \n",
              "21          Cyprus              Chypre      CY  CYP           0.226533   \n",
              "22         Hungary             Hongrie      HU  HUN           0.127667   \n",
              "23         Ireland             Irlande      IE  IRL           0.292733   \n",
              "25         Estonia             Estonie      EE  EST           0.192833   \n",
              "26           Malta               Malte      MT  MLT           0.161320   \n",
              "\n",
              "    mean_GDP_per_capita  mean_HICP_inflation  mean_NRJ_dependency  \\\n",
              "0              2.945833             2.591667            47.643618   \n",
              "1              4.429167             3.841667            26.227059   \n",
              "2              4.579167             3.341667            58.673618   \n",
              "3              0.916667             2.883333            66.289353   \n",
              "4              4.891667             3.666667            63.143147   \n",
              "5              1.012000             1.850000            73.347853   \n",
              "6              2.124000             2.225000            49.982029   \n",
              "7              1.100000             2.525000            78.216324   \n",
              "8              1.116000             2.633333            37.543235   \n",
              "9              3.729167             3.466667            21.813794   \n",
              "10             2.229167             3.816667            27.591353   \n",
              "11             0.833333             1.925000            49.091000   \n",
              "12             3.283333             3.200000            65.371706   \n",
              "14             1.012500             1.808333            51.129882   \n",
              "15             0.387500             1.833333            80.630471   \n",
              "16             1.320833             2.283333            35.010118   \n",
              "17             1.152000             1.583333             4.645794   \n",
              "18             0.960000             2.441667            60.400500   \n",
              "19             0.883333             1.775000            79.480382   \n",
              "20             4.383333             2.575000            46.046500   \n",
              "21             1.825000             1.241667            96.887500   \n",
              "22             2.775000             4.625000            55.578882   \n",
              "23             3.770833             1.583333            79.806294   \n",
              "25             3.483333             4.175000            22.794588   \n",
              "26             2.865217             2.000000           100.615912   \n",
              "\n",
              "    mean_NRJ_productivity  mean_POLL_death  mean_GREEN_Bound  \\\n",
              "0                7.673333       114.941176               0.0   \n",
              "1                8.495833       126.117647               0.7   \n",
              "2                6.618750        73.411765              10.5   \n",
              "3                8.568333        58.470588               8.3   \n",
              "4                6.910417        76.235294               0.0   \n",
              "5                8.361250        44.058824               7.6   \n",
              "6                6.699583        74.411765               0.0   \n",
              "7                5.556667        62.411765              14.8   \n",
              "8                6.666667        50.941176              11.1   \n",
              "9                6.564583       114.058824               3.8   \n",
              "10               5.612500        90.882353               3.3   \n",
              "11               7.224167        44.352941               5.9   \n",
              "12               5.726667        94.823529              16.3   \n",
              "14               4.659583        10.352941              10.6   \n",
              "15               9.740833        91.647059               6.1   \n",
              "16               6.238750        15.176471              16.2   \n",
              "17              10.085833        36.411765              13.9   \n",
              "18               8.298750        60.647059              13.3   \n",
              "19               8.876667        37.764706               8.4   \n",
              "20               4.720000       205.941176               0.0   \n",
              "21               7.485000        88.764706               0.0   \n",
              "22               6.774167       124.352941              15.3   \n",
              "23              14.102917        13.294118               6.3   \n",
              "25               4.707917        21.705882               0.0   \n",
              "26               4.834583        46.470588               0.0   \n",
              "\n",
              "    mean_GREEN_COP21  mean_GREEN_Losses  mean_GREEN_employment  \\\n",
              "0               0.47          22.510682              2319895.0   \n",
              "1              52.97          21.244773             19107921.0   \n",
              "2               0.82          13.584318              1640729.0   \n",
              "3            2641.17          40.223636             19383640.0   \n",
              "4              18.99          16.253864              3705280.0   \n",
              "5            6967.47          52.181136             31114862.0   \n",
              "6              42.87         191.309091              2391372.0   \n",
              "7            1614.33          34.092500              5045574.0   \n",
              "8            6742.48          15.590000             19285852.0   \n",
              "9             147.37          12.435682             15233320.0   \n",
              "10             86.71          40.780682              7642963.0   \n",
              "11          51822.11          49.259524             65675414.0   \n",
              "12             47.72           8.251591              1392878.0   \n",
              "14           1264.68          10.729318             10686157.0   \n",
              "15           5326.15          52.183636             34123037.0   \n",
              "16           5934.53           9.141818              8911204.0   \n",
              "17           2567.42          37.135909              6043897.0   \n",
              "18          75708.13          49.874091             38082271.0   \n",
              "19             37.77          36.377727              7998754.0   \n",
              "20              0.47          16.006136              3773866.0   \n",
              "21              0.00          12.567045               372371.0   \n",
              "22            174.96          23.343409              1773955.0   \n",
              "23            800.96          20.831818              2226384.0   \n",
              "25             12.76           5.573864              2096800.0   \n",
              "26              1.80           2.552045               262660.0   \n",
              "\n",
              "    mean_GREEN_enviro_protection  mean_GREEN_gross_value  \\\n",
              "0                       0.562500                1.644444   \n",
              "1                       0.558824                2.802000   \n",
              "2                       0.400000                2.837778   \n",
              "3                       0.325000                4.484000   \n",
              "4                       0.691667                2.415385   \n",
              "5                       0.246154                2.469000   \n",
              "6                       0.914286                1.606923   \n",
              "7                       0.462500                1.795556   \n",
              "8                       0.477778                2.131818   \n",
              "9                       0.600000                2.348889   \n",
              "10                      0.750000                2.486667   \n",
              "11                      0.400000                2.092000   \n",
              "12                      0.400000                1.520000   \n",
              "14                      0.260000                5.850909   \n",
              "15                      0.400000                2.625714   \n",
              "16                      0.383333                3.610909   \n",
              "17                      0.437500                3.153636   \n",
              "18                      0.400000                2.028889   \n",
              "19                      0.312500                2.497778   \n",
              "20                      0.862500                2.332000   \n",
              "21                      0.418182                1.832000   \n",
              "22                      0.737500                0.631667   \n",
              "23                      0.225000                0.874444   \n",
              "25                      0.650000                4.441111   \n",
              "26                      0.300000                1.006364   \n",
              "\n",
              "    mean_GREEN_investments  mean_GREEN_tax  mean_FDI_impact  mean_GOV_GDP  \\\n",
              "0               375.637368        3.682759        -6.537475     83.389655   \n",
              "1              2227.852105        2.294828        12.117424     90.237931   \n",
              "2               458.715789        2.701034         6.196840     88.148276   \n",
              "3              3213.635789        2.444828         6.484691     89.144828   \n",
              "4               666.511053        2.072414         0.894307     89.500000   \n",
              "5              4896.697895        1.860690         8.106235     91.203333   \n",
              "6               355.560000        3.664138         7.977310     87.053333   \n",
              "7              3966.281053        2.485172        11.365664     89.534483   \n",
              "8              2641.880000        3.531034         5.896115     89.556667   \n",
              "9              2674.091579        2.471724        10.176542     88.282759   \n",
              "10             1208.926316        2.159655       -37.148363     90.734483   \n",
              "11            14650.290526        2.111379         7.837741     89.267391   \n",
              "12              528.607368        2.300690         7.955281     89.396552   \n",
              "14             1295.963684        2.884828       -13.488083     87.254545   \n",
              "15             6289.255263        3.139310         4.047319     89.606897   \n",
              "16             4533.070000        2.451724        12.600088     88.500000   \n",
              "17             5205.151053        4.133793        10.117949     86.550000   \n",
              "18            12181.241579        2.426552         8.956760     89.920588   \n",
              "19             1298.203158        2.648966         4.537354     87.224138   \n",
              "20              450.814737        2.704483         2.378030     87.341379   \n",
              "21               26.490000        3.049310         4.319232     88.927586   \n",
              "22             1022.838947        2.560690         3.773871     85.344828   \n",
              "23              347.608421        2.176207         6.520967     91.048276   \n",
              "25              207.604737        2.433448         6.993160     87.934483   \n",
              "26               34.116842        2.831379         0.415972     89.158621   \n",
              "\n",
              "    mean_GOV_bound  mean_GOV_deficit  mean_share_renew_energy  \\\n",
              "0         3.284167         -2.541667                 26.50435   \n",
              "1         6.394167         -4.091667                 22.44690   \n",
              "2         3.273333         -2.208333                 36.54865   \n",
              "3         2.855000         -2.333333                 31.83285   \n",
              "4         2.880000         -1.308333                 22.81555   \n",
              "5         3.149167         -5.666667                 15.26090   \n",
              "6         3.112500         -3.408333                 21.74110   \n",
              "7         2.949167         -3.466667                  7.67355   \n",
              "8         2.640000         -1.008333                  6.78340   \n",
              "9         5.583333         -3.033333                 11.36660   \n",
              "10        4.005000         -1.841667                 12.94330   \n",
              "11        3.017500         -4.683333                 14.30665   \n",
              "12        3.476667         -3.033333                 11.51695   \n",
              "14        2.865000         -2.133333                 37.11270   \n",
              "15        3.696667         -4.450000                 14.92930   \n",
              "16        2.207500         -0.375000                 51.09950   \n",
              "17        2.286667          1.225000                 27.98060   \n",
              "18        2.347500         -0.425000                 13.93285   \n",
              "19        2.957500         -3.016667                 27.39560   \n",
              "20        3.930000         -1.300000                 16.11650   \n",
              "21        3.113333         -2.733333                  9.75290   \n",
              "22        6.571667         -3.791667                 12.42230   \n",
              "23        2.734167         -1.991667                  8.28040   \n",
              "25        3.562500         -1.058333                 26.71950   \n",
              "26        3.369167         -2.175000                  5.11215   \n",
              "\n",
              "    mean_CO2_emissions  \n",
              "0            79.372727  \n",
              "1            49.530303  \n",
              "2            43.642424  \n",
              "3           105.006061  \n",
              "4            39.812121  \n",
              "5           121.993939  \n",
              "6            98.715152  \n",
              "7            94.218182  \n",
              "8            96.000000  \n",
              "9            84.763636  \n",
              "10           72.954545  \n",
              "11           91.660606  \n",
              "12           63.857576  \n",
              "14          101.387879  \n",
              "15           93.721212  \n",
              "16           67.272727  \n",
              "17           89.851515  \n",
              "18           77.066667  \n",
              "19          101.615152  \n",
              "20           62.218182  \n",
              "21          144.924242  \n",
              "22           73.963636  \n",
              "23          114.751515  \n",
              "25           51.245455  \n",
              "26          107.072727  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ab5939ae-d590-4778-8e66-426ca3475a46\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name_en</th>\n",
              "      <th>name_fr</th>\n",
              "      <th>country</th>\n",
              "      <th>iso3</th>\n",
              "      <th>mean_energy_price</th>\n",
              "      <th>mean_GDP_per_capita</th>\n",
              "      <th>mean_HICP_inflation</th>\n",
              "      <th>mean_NRJ_dependency</th>\n",
              "      <th>mean_NRJ_productivity</th>\n",
              "      <th>mean_POLL_death</th>\n",
              "      <th>mean_GREEN_Bound</th>\n",
              "      <th>mean_GREEN_COP21</th>\n",
              "      <th>mean_GREEN_Losses</th>\n",
              "      <th>mean_GREEN_employment</th>\n",
              "      <th>mean_GREEN_enviro_protection</th>\n",
              "      <th>mean_GREEN_gross_value</th>\n",
              "      <th>mean_GREEN_investments</th>\n",
              "      <th>mean_GREEN_tax</th>\n",
              "      <th>mean_FDI_impact</th>\n",
              "      <th>mean_GOV_GDP</th>\n",
              "      <th>mean_GOV_bound</th>\n",
              "      <th>mean_GOV_deficit</th>\n",
              "      <th>mean_share_renew_energy</th>\n",
              "      <th>mean_CO2_emissions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Croatia</td>\n",
              "      <td>Croatie</td>\n",
              "      <td>HR</td>\n",
              "      <td>HRV</td>\n",
              "      <td>0.175217</td>\n",
              "      <td>2.945833</td>\n",
              "      <td>2.591667</td>\n",
              "      <td>47.643618</td>\n",
              "      <td>7.673333</td>\n",
              "      <td>114.941176</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.47</td>\n",
              "      <td>22.510682</td>\n",
              "      <td>2319895.0</td>\n",
              "      <td>0.562500</td>\n",
              "      <td>1.644444</td>\n",
              "      <td>375.637368</td>\n",
              "      <td>3.682759</td>\n",
              "      <td>-6.537475</td>\n",
              "      <td>83.389655</td>\n",
              "      <td>3.284167</td>\n",
              "      <td>-2.541667</td>\n",
              "      <td>26.50435</td>\n",
              "      <td>79.372727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Romania</td>\n",
              "      <td>Roumanie</td>\n",
              "      <td>RO</td>\n",
              "      <td>ROU</td>\n",
              "      <td>0.287683</td>\n",
              "      <td>4.429167</td>\n",
              "      <td>3.841667</td>\n",
              "      <td>26.227059</td>\n",
              "      <td>8.495833</td>\n",
              "      <td>126.117647</td>\n",
              "      <td>0.7</td>\n",
              "      <td>52.97</td>\n",
              "      <td>21.244773</td>\n",
              "      <td>19107921.0</td>\n",
              "      <td>0.558824</td>\n",
              "      <td>2.802000</td>\n",
              "      <td>2227.852105</td>\n",
              "      <td>2.294828</td>\n",
              "      <td>12.117424</td>\n",
              "      <td>90.237931</td>\n",
              "      <td>6.394167</td>\n",
              "      <td>-4.091667</td>\n",
              "      <td>22.44690</td>\n",
              "      <td>49.530303</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Latvia</td>\n",
              "      <td>Lettonie</td>\n",
              "      <td>LV</td>\n",
              "      <td>LVA</td>\n",
              "      <td>0.289067</td>\n",
              "      <td>4.579167</td>\n",
              "      <td>3.341667</td>\n",
              "      <td>58.673618</td>\n",
              "      <td>6.618750</td>\n",
              "      <td>73.411765</td>\n",
              "      <td>10.5</td>\n",
              "      <td>0.82</td>\n",
              "      <td>13.584318</td>\n",
              "      <td>1640729.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2.837778</td>\n",
              "      <td>458.715789</td>\n",
              "      <td>2.701034</td>\n",
              "      <td>6.196840</td>\n",
              "      <td>88.148276</td>\n",
              "      <td>3.273333</td>\n",
              "      <td>-2.208333</td>\n",
              "      <td>36.54865</td>\n",
              "      <td>43.642424</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Austria</td>\n",
              "      <td>Autriche</td>\n",
              "      <td>AT</td>\n",
              "      <td>AUT</td>\n",
              "      <td>0.198467</td>\n",
              "      <td>0.916667</td>\n",
              "      <td>2.883333</td>\n",
              "      <td>66.289353</td>\n",
              "      <td>8.568333</td>\n",
              "      <td>58.470588</td>\n",
              "      <td>8.3</td>\n",
              "      <td>2641.17</td>\n",
              "      <td>40.223636</td>\n",
              "      <td>19383640.0</td>\n",
              "      <td>0.325000</td>\n",
              "      <td>4.484000</td>\n",
              "      <td>3213.635789</td>\n",
              "      <td>2.444828</td>\n",
              "      <td>6.484691</td>\n",
              "      <td>89.144828</td>\n",
              "      <td>2.855000</td>\n",
              "      <td>-2.333333</td>\n",
              "      <td>31.83285</td>\n",
              "      <td>105.006061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Lithuania</td>\n",
              "      <td>Lituanie</td>\n",
              "      <td>LT</td>\n",
              "      <td>LTU</td>\n",
              "      <td>0.247333</td>\n",
              "      <td>4.891667</td>\n",
              "      <td>3.666667</td>\n",
              "      <td>63.143147</td>\n",
              "      <td>6.910417</td>\n",
              "      <td>76.235294</td>\n",
              "      <td>0.0</td>\n",
              "      <td>18.99</td>\n",
              "      <td>16.253864</td>\n",
              "      <td>3705280.0</td>\n",
              "      <td>0.691667</td>\n",
              "      <td>2.415385</td>\n",
              "      <td>666.511053</td>\n",
              "      <td>2.072414</td>\n",
              "      <td>0.894307</td>\n",
              "      <td>89.500000</td>\n",
              "      <td>2.880000</td>\n",
              "      <td>-1.308333</td>\n",
              "      <td>22.81555</td>\n",
              "      <td>39.812121</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Spain</td>\n",
              "      <td>Espagne</td>\n",
              "      <td>ES</td>\n",
              "      <td>ESP</td>\n",
              "      <td>0.252800</td>\n",
              "      <td>1.012000</td>\n",
              "      <td>1.850000</td>\n",
              "      <td>73.347853</td>\n",
              "      <td>8.361250</td>\n",
              "      <td>44.058824</td>\n",
              "      <td>7.6</td>\n",
              "      <td>6967.47</td>\n",
              "      <td>52.181136</td>\n",
              "      <td>31114862.0</td>\n",
              "      <td>0.246154</td>\n",
              "      <td>2.469000</td>\n",
              "      <td>4896.697895</td>\n",
              "      <td>1.860690</td>\n",
              "      <td>8.106235</td>\n",
              "      <td>91.203333</td>\n",
              "      <td>3.149167</td>\n",
              "      <td>-5.666667</td>\n",
              "      <td>15.26090</td>\n",
              "      <td>121.993939</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Slovenia</td>\n",
              "      <td>Slovénie</td>\n",
              "      <td>SI</td>\n",
              "      <td>SVN</td>\n",
              "      <td>0.165267</td>\n",
              "      <td>2.124000</td>\n",
              "      <td>2.225000</td>\n",
              "      <td>49.982029</td>\n",
              "      <td>6.699583</td>\n",
              "      <td>74.411765</td>\n",
              "      <td>0.0</td>\n",
              "      <td>42.87</td>\n",
              "      <td>191.309091</td>\n",
              "      <td>2391372.0</td>\n",
              "      <td>0.914286</td>\n",
              "      <td>1.606923</td>\n",
              "      <td>355.560000</td>\n",
              "      <td>3.664138</td>\n",
              "      <td>7.977310</td>\n",
              "      <td>87.053333</td>\n",
              "      <td>3.112500</td>\n",
              "      <td>-3.408333</td>\n",
              "      <td>21.74110</td>\n",
              "      <td>98.715152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Belgium</td>\n",
              "      <td>Belgique</td>\n",
              "      <td>BE</td>\n",
              "      <td>BEL</td>\n",
              "      <td>0.257600</td>\n",
              "      <td>1.100000</td>\n",
              "      <td>2.525000</td>\n",
              "      <td>78.216324</td>\n",
              "      <td>5.556667</td>\n",
              "      <td>62.411765</td>\n",
              "      <td>14.8</td>\n",
              "      <td>1614.33</td>\n",
              "      <td>34.092500</td>\n",
              "      <td>5045574.0</td>\n",
              "      <td>0.462500</td>\n",
              "      <td>1.795556</td>\n",
              "      <td>3966.281053</td>\n",
              "      <td>2.485172</td>\n",
              "      <td>11.365664</td>\n",
              "      <td>89.534483</td>\n",
              "      <td>2.949167</td>\n",
              "      <td>-3.466667</td>\n",
              "      <td>7.67355</td>\n",
              "      <td>94.218182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Netherlands</td>\n",
              "      <td>Pays-Bas</td>\n",
              "      <td>NL</td>\n",
              "      <td>NLD</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>1.116000</td>\n",
              "      <td>2.633333</td>\n",
              "      <td>37.543235</td>\n",
              "      <td>6.666667</td>\n",
              "      <td>50.941176</td>\n",
              "      <td>11.1</td>\n",
              "      <td>6742.48</td>\n",
              "      <td>15.590000</td>\n",
              "      <td>19285852.0</td>\n",
              "      <td>0.477778</td>\n",
              "      <td>2.131818</td>\n",
              "      <td>2641.880000</td>\n",
              "      <td>3.531034</td>\n",
              "      <td>5.896115</td>\n",
              "      <td>89.556667</td>\n",
              "      <td>2.640000</td>\n",
              "      <td>-1.008333</td>\n",
              "      <td>6.78340</td>\n",
              "      <td>96.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Poland</td>\n",
              "      <td>Pologne</td>\n",
              "      <td>PL</td>\n",
              "      <td>POL</td>\n",
              "      <td>0.167360</td>\n",
              "      <td>3.729167</td>\n",
              "      <td>3.466667</td>\n",
              "      <td>21.813794</td>\n",
              "      <td>6.564583</td>\n",
              "      <td>114.058824</td>\n",
              "      <td>3.8</td>\n",
              "      <td>147.37</td>\n",
              "      <td>12.435682</td>\n",
              "      <td>15233320.0</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>2.348889</td>\n",
              "      <td>2674.091579</td>\n",
              "      <td>2.471724</td>\n",
              "      <td>10.176542</td>\n",
              "      <td>88.282759</td>\n",
              "      <td>5.583333</td>\n",
              "      <td>-3.033333</td>\n",
              "      <td>11.36660</td>\n",
              "      <td>84.763636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Czech Republic</td>\n",
              "      <td>République tchèque</td>\n",
              "      <td>CZ</td>\n",
              "      <td>CZE</td>\n",
              "      <td>0.263067</td>\n",
              "      <td>2.229167</td>\n",
              "      <td>3.816667</td>\n",
              "      <td>27.591353</td>\n",
              "      <td>5.612500</td>\n",
              "      <td>90.882353</td>\n",
              "      <td>3.3</td>\n",
              "      <td>86.71</td>\n",
              "      <td>40.780682</td>\n",
              "      <td>7642963.0</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>2.486667</td>\n",
              "      <td>1208.926316</td>\n",
              "      <td>2.159655</td>\n",
              "      <td>-37.148363</td>\n",
              "      <td>90.734483</td>\n",
              "      <td>4.005000</td>\n",
              "      <td>-1.841667</td>\n",
              "      <td>12.94330</td>\n",
              "      <td>72.954545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>France</td>\n",
              "      <td>France</td>\n",
              "      <td>FR</td>\n",
              "      <td>FRA</td>\n",
              "      <td>0.162367</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>1.925000</td>\n",
              "      <td>49.091000</td>\n",
              "      <td>7.224167</td>\n",
              "      <td>44.352941</td>\n",
              "      <td>5.9</td>\n",
              "      <td>51822.11</td>\n",
              "      <td>49.259524</td>\n",
              "      <td>65675414.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2.092000</td>\n",
              "      <td>14650.290526</td>\n",
              "      <td>2.111379</td>\n",
              "      <td>7.837741</td>\n",
              "      <td>89.267391</td>\n",
              "      <td>3.017500</td>\n",
              "      <td>-4.683333</td>\n",
              "      <td>14.30665</td>\n",
              "      <td>91.660606</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Slovakia</td>\n",
              "      <td>Slovaquie</td>\n",
              "      <td>SK</td>\n",
              "      <td>SVK</td>\n",
              "      <td>0.152867</td>\n",
              "      <td>3.283333</td>\n",
              "      <td>3.200000</td>\n",
              "      <td>65.371706</td>\n",
              "      <td>5.726667</td>\n",
              "      <td>94.823529</td>\n",
              "      <td>16.3</td>\n",
              "      <td>47.72</td>\n",
              "      <td>8.251591</td>\n",
              "      <td>1392878.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>1.520000</td>\n",
              "      <td>528.607368</td>\n",
              "      <td>2.300690</td>\n",
              "      <td>7.955281</td>\n",
              "      <td>89.396552</td>\n",
              "      <td>3.476667</td>\n",
              "      <td>-3.033333</td>\n",
              "      <td>11.51695</td>\n",
              "      <td>63.857576</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Finland</td>\n",
              "      <td>Finlande</td>\n",
              "      <td>FI</td>\n",
              "      <td>FIN</td>\n",
              "      <td>0.107600</td>\n",
              "      <td>1.012500</td>\n",
              "      <td>1.808333</td>\n",
              "      <td>51.129882</td>\n",
              "      <td>4.659583</td>\n",
              "      <td>10.352941</td>\n",
              "      <td>10.6</td>\n",
              "      <td>1264.68</td>\n",
              "      <td>10.729318</td>\n",
              "      <td>10686157.0</td>\n",
              "      <td>0.260000</td>\n",
              "      <td>5.850909</td>\n",
              "      <td>1295.963684</td>\n",
              "      <td>2.884828</td>\n",
              "      <td>-13.488083</td>\n",
              "      <td>87.254545</td>\n",
              "      <td>2.865000</td>\n",
              "      <td>-2.133333</td>\n",
              "      <td>37.11270</td>\n",
              "      <td>101.387879</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Italy</td>\n",
              "      <td>Italie</td>\n",
              "      <td>IT</td>\n",
              "      <td>ITA</td>\n",
              "      <td>0.298900</td>\n",
              "      <td>0.387500</td>\n",
              "      <td>1.833333</td>\n",
              "      <td>80.630471</td>\n",
              "      <td>9.740833</td>\n",
              "      <td>91.647059</td>\n",
              "      <td>6.1</td>\n",
              "      <td>5326.15</td>\n",
              "      <td>52.183636</td>\n",
              "      <td>34123037.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2.625714</td>\n",
              "      <td>6289.255263</td>\n",
              "      <td>3.139310</td>\n",
              "      <td>4.047319</td>\n",
              "      <td>89.606897</td>\n",
              "      <td>3.696667</td>\n",
              "      <td>-4.450000</td>\n",
              "      <td>14.92930</td>\n",
              "      <td>93.721212</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Sweden</td>\n",
              "      <td>Suède</td>\n",
              "      <td>SE</td>\n",
              "      <td>SWE</td>\n",
              "      <td>0.118917</td>\n",
              "      <td>1.320833</td>\n",
              "      <td>2.283333</td>\n",
              "      <td>35.010118</td>\n",
              "      <td>6.238750</td>\n",
              "      <td>15.176471</td>\n",
              "      <td>16.2</td>\n",
              "      <td>5934.53</td>\n",
              "      <td>9.141818</td>\n",
              "      <td>8911204.0</td>\n",
              "      <td>0.383333</td>\n",
              "      <td>3.610909</td>\n",
              "      <td>4533.070000</td>\n",
              "      <td>2.451724</td>\n",
              "      <td>12.600088</td>\n",
              "      <td>88.500000</td>\n",
              "      <td>2.207500</td>\n",
              "      <td>-0.375000</td>\n",
              "      <td>51.09950</td>\n",
              "      <td>67.272727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>Danemark</td>\n",
              "      <td>DK</td>\n",
              "      <td>DNK</td>\n",
              "      <td>0.177750</td>\n",
              "      <td>1.152000</td>\n",
              "      <td>1.583333</td>\n",
              "      <td>4.645794</td>\n",
              "      <td>10.085833</td>\n",
              "      <td>36.411765</td>\n",
              "      <td>13.9</td>\n",
              "      <td>2567.42</td>\n",
              "      <td>37.135909</td>\n",
              "      <td>6043897.0</td>\n",
              "      <td>0.437500</td>\n",
              "      <td>3.153636</td>\n",
              "      <td>5205.151053</td>\n",
              "      <td>4.133793</td>\n",
              "      <td>10.117949</td>\n",
              "      <td>86.550000</td>\n",
              "      <td>2.286667</td>\n",
              "      <td>1.225000</td>\n",
              "      <td>27.98060</td>\n",
              "      <td>89.851515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Germany</td>\n",
              "      <td>Allemagne</td>\n",
              "      <td>DE</td>\n",
              "      <td>DEU</td>\n",
              "      <td>0.224517</td>\n",
              "      <td>0.960000</td>\n",
              "      <td>2.441667</td>\n",
              "      <td>60.400500</td>\n",
              "      <td>8.298750</td>\n",
              "      <td>60.647059</td>\n",
              "      <td>13.3</td>\n",
              "      <td>75708.13</td>\n",
              "      <td>49.874091</td>\n",
              "      <td>38082271.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2.028889</td>\n",
              "      <td>12181.241579</td>\n",
              "      <td>2.426552</td>\n",
              "      <td>8.956760</td>\n",
              "      <td>89.920588</td>\n",
              "      <td>2.347500</td>\n",
              "      <td>-0.425000</td>\n",
              "      <td>13.93285</td>\n",
              "      <td>77.066667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Portugal</td>\n",
              "      <td>Portugal</td>\n",
              "      <td>PT</td>\n",
              "      <td>PRT</td>\n",
              "      <td>0.242600</td>\n",
              "      <td>0.883333</td>\n",
              "      <td>1.775000</td>\n",
              "      <td>79.480382</td>\n",
              "      <td>8.876667</td>\n",
              "      <td>37.764706</td>\n",
              "      <td>8.4</td>\n",
              "      <td>37.77</td>\n",
              "      <td>36.377727</td>\n",
              "      <td>7998754.0</td>\n",
              "      <td>0.312500</td>\n",
              "      <td>2.497778</td>\n",
              "      <td>1298.203158</td>\n",
              "      <td>2.648966</td>\n",
              "      <td>4.537354</td>\n",
              "      <td>87.224138</td>\n",
              "      <td>2.957500</td>\n",
              "      <td>-3.016667</td>\n",
              "      <td>27.39560</td>\n",
              "      <td>101.615152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Bulgaria</td>\n",
              "      <td>Bulgarie</td>\n",
              "      <td>BG</td>\n",
              "      <td>BGR</td>\n",
              "      <td>0.164633</td>\n",
              "      <td>4.383333</td>\n",
              "      <td>2.575000</td>\n",
              "      <td>46.046500</td>\n",
              "      <td>4.720000</td>\n",
              "      <td>205.941176</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.47</td>\n",
              "      <td>16.006136</td>\n",
              "      <td>3773866.0</td>\n",
              "      <td>0.862500</td>\n",
              "      <td>2.332000</td>\n",
              "      <td>450.814737</td>\n",
              "      <td>2.704483</td>\n",
              "      <td>2.378030</td>\n",
              "      <td>87.341379</td>\n",
              "      <td>3.930000</td>\n",
              "      <td>-1.300000</td>\n",
              "      <td>16.11650</td>\n",
              "      <td>62.218182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Cyprus</td>\n",
              "      <td>Chypre</td>\n",
              "      <td>CY</td>\n",
              "      <td>CYP</td>\n",
              "      <td>0.226533</td>\n",
              "      <td>1.825000</td>\n",
              "      <td>1.241667</td>\n",
              "      <td>96.887500</td>\n",
              "      <td>7.485000</td>\n",
              "      <td>88.764706</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>12.567045</td>\n",
              "      <td>372371.0</td>\n",
              "      <td>0.418182</td>\n",
              "      <td>1.832000</td>\n",
              "      <td>26.490000</td>\n",
              "      <td>3.049310</td>\n",
              "      <td>4.319232</td>\n",
              "      <td>88.927586</td>\n",
              "      <td>3.113333</td>\n",
              "      <td>-2.733333</td>\n",
              "      <td>9.75290</td>\n",
              "      <td>144.924242</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Hungary</td>\n",
              "      <td>Hongrie</td>\n",
              "      <td>HU</td>\n",
              "      <td>HUN</td>\n",
              "      <td>0.127667</td>\n",
              "      <td>2.775000</td>\n",
              "      <td>4.625000</td>\n",
              "      <td>55.578882</td>\n",
              "      <td>6.774167</td>\n",
              "      <td>124.352941</td>\n",
              "      <td>15.3</td>\n",
              "      <td>174.96</td>\n",
              "      <td>23.343409</td>\n",
              "      <td>1773955.0</td>\n",
              "      <td>0.737500</td>\n",
              "      <td>0.631667</td>\n",
              "      <td>1022.838947</td>\n",
              "      <td>2.560690</td>\n",
              "      <td>3.773871</td>\n",
              "      <td>85.344828</td>\n",
              "      <td>6.571667</td>\n",
              "      <td>-3.791667</td>\n",
              "      <td>12.42230</td>\n",
              "      <td>73.963636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Ireland</td>\n",
              "      <td>Irlande</td>\n",
              "      <td>IE</td>\n",
              "      <td>IRL</td>\n",
              "      <td>0.292733</td>\n",
              "      <td>3.770833</td>\n",
              "      <td>1.583333</td>\n",
              "      <td>79.806294</td>\n",
              "      <td>14.102917</td>\n",
              "      <td>13.294118</td>\n",
              "      <td>6.3</td>\n",
              "      <td>800.96</td>\n",
              "      <td>20.831818</td>\n",
              "      <td>2226384.0</td>\n",
              "      <td>0.225000</td>\n",
              "      <td>0.874444</td>\n",
              "      <td>347.608421</td>\n",
              "      <td>2.176207</td>\n",
              "      <td>6.520967</td>\n",
              "      <td>91.048276</td>\n",
              "      <td>2.734167</td>\n",
              "      <td>-1.991667</td>\n",
              "      <td>8.28040</td>\n",
              "      <td>114.751515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Estonia</td>\n",
              "      <td>Estonie</td>\n",
              "      <td>EE</td>\n",
              "      <td>EST</td>\n",
              "      <td>0.192833</td>\n",
              "      <td>3.483333</td>\n",
              "      <td>4.175000</td>\n",
              "      <td>22.794588</td>\n",
              "      <td>4.707917</td>\n",
              "      <td>21.705882</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.76</td>\n",
              "      <td>5.573864</td>\n",
              "      <td>2096800.0</td>\n",
              "      <td>0.650000</td>\n",
              "      <td>4.441111</td>\n",
              "      <td>207.604737</td>\n",
              "      <td>2.433448</td>\n",
              "      <td>6.993160</td>\n",
              "      <td>87.934483</td>\n",
              "      <td>3.562500</td>\n",
              "      <td>-1.058333</td>\n",
              "      <td>26.71950</td>\n",
              "      <td>51.245455</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Malta</td>\n",
              "      <td>Malte</td>\n",
              "      <td>MT</td>\n",
              "      <td>MLT</td>\n",
              "      <td>0.161320</td>\n",
              "      <td>2.865217</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>100.615912</td>\n",
              "      <td>4.834583</td>\n",
              "      <td>46.470588</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.80</td>\n",
              "      <td>2.552045</td>\n",
              "      <td>262660.0</td>\n",
              "      <td>0.300000</td>\n",
              "      <td>1.006364</td>\n",
              "      <td>34.116842</td>\n",
              "      <td>2.831379</td>\n",
              "      <td>0.415972</td>\n",
              "      <td>89.158621</td>\n",
              "      <td>3.369167</td>\n",
              "      <td>-2.175000</td>\n",
              "      <td>5.11215</td>\n",
              "      <td>107.072727</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ab5939ae-d590-4778-8e66-426ca3475a46')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ab5939ae-d590-4778-8e66-426ca3475a46 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ab5939ae-d590-4778-8e66-426ca3475a46');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9bf6ac67-8ec3-45c0-8a36-ef89b786acc1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9bf6ac67-8ec3-45c0-8a36-ef89b786acc1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9bf6ac67-8ec3-45c0-8a36-ef89b786acc1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_335f68c4-bfc6-43bb-a4e1-2cf41a9a92a3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_335f68c4-bfc6-43bb-a4e1-2cf41a9a92a3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe = data.copy()\n",
        "dataframe.drop(columns=['name_en','name_fr','country','iso3'], inplace=True)"
      ],
      "metadata": {
        "id": "CwC6Ve5BOA1-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Les corrélations"
      ],
      "metadata": {
        "id": "opvrB4yBpwpo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "corr_matrix = dataframe.corr()\n",
        "\n",
        "# Afficher la matrice sous forme de heatmap\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(corr_matrix, annot=True, cmap=\"coolwarm\", fmt=\".2f\", linewidths=0.5)\n",
        "plt.title(\"Matrice de Corrélation\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 908
        },
        "id": "lQGX2q0ap09v",
        "outputId": "f63baae0-a0ba-4834-84e5-ad3e862cdb2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Modèle de Machine Learning"
      ],
      "metadata": {
        "id": "62kRkIpFN9Wo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Random forrest"
      ],
      "metadata": {
        "id": "XcrdcKv20tJA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Calcul des seuils\n",
        "seuil_GOV_GDP = data['mean_GOV_GDP'].mean()\n",
        "seuil_CO2_emissions = data['mean_CO2_emissions'].mean()\n",
        "seuil_share_renew_energy = data['mean_share_renew_energy'].mean()\n",
        "\n",
        "print(seuil_GOV_GDP)\n",
        "print(seuil_CO2_emissions)\n",
        "print(seuil_share_renew_energy)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_roBrZ3W1npb",
        "outputId": "95bb611b-910e-49d7-ccac-714d24832b77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "88.57044122965254\n",
            "85.06472727272727\n",
            "19.703802\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Test création de label seuils\n",
        "data['besoin_aide'] = ((data['mean_GOV_GDP'] < 90) & (data['mean_share_renew_energy'] < 21)).astype(int)\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 870
        },
        "id": "Tzug0WiW02UZ",
        "outputId": "37f7d247-5560-4694-8dee-0a37cee21254"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           name_en             name_fr country iso3  mean_energy_price  \\\n",
              "0          Croatia             Croatie      HR  HRV           0.175217   \n",
              "1          Romania            Roumanie      RO  ROU           0.287683   \n",
              "2           Latvia            Lettonie      LV  LVA           0.289067   \n",
              "3          Austria            Autriche      AT  AUT           0.198467   \n",
              "4        Lithuania            Lituanie      LT  LTU           0.247333   \n",
              "5            Spain             Espagne      ES  ESP           0.252800   \n",
              "6         Slovenia            Slovénie      SI  SVN           0.165267   \n",
              "7          Belgium            Belgique      BE  BEL           0.257600   \n",
              "8      Netherlands            Pays-Bas      NL  NLD           0.250000   \n",
              "9           Poland             Pologne      PL  POL           0.167360   \n",
              "10  Czech Republic  République tchèque      CZ  CZE           0.263067   \n",
              "11          France              France      FR  FRA           0.162367   \n",
              "12        Slovakia           Slovaquie      SK  SVK           0.152867   \n",
              "14         Finland            Finlande      FI  FIN           0.107600   \n",
              "15           Italy              Italie      IT  ITA           0.298900   \n",
              "16          Sweden               Suède      SE  SWE           0.118917   \n",
              "17         Denmark            Danemark      DK  DNK           0.177750   \n",
              "18         Germany           Allemagne      DE  DEU           0.224517   \n",
              "19        Portugal            Portugal      PT  PRT           0.242600   \n",
              "20        Bulgaria            Bulgarie      BG  BGR           0.164633   \n",
              "21          Cyprus              Chypre      CY  CYP           0.226533   \n",
              "22         Hungary             Hongrie      HU  HUN           0.127667   \n",
              "23         Ireland             Irlande      IE  IRL           0.292733   \n",
              "25         Estonia             Estonie      EE  EST           0.192833   \n",
              "26           Malta               Malte      MT  MLT           0.161320   \n",
              "\n",
              "    mean_GDP_per_capita  mean_HICP_inflation  mean_NRJ_dependency  \\\n",
              "0              2.945833             2.591667            47.643618   \n",
              "1              4.429167             3.841667            26.227059   \n",
              "2              4.579167             3.341667            58.673618   \n",
              "3              0.916667             2.883333            66.289353   \n",
              "4              4.891667             3.666667            63.143147   \n",
              "5              1.012000             1.850000            73.347853   \n",
              "6              2.124000             2.225000            49.982029   \n",
              "7              1.100000             2.525000            78.216324   \n",
              "8              1.116000             2.633333            37.543235   \n",
              "9              3.729167             3.466667            21.813794   \n",
              "10             2.229167             3.816667            27.591353   \n",
              "11             0.833333             1.925000            49.091000   \n",
              "12             3.283333             3.200000            65.371706   \n",
              "14             1.012500             1.808333            51.129882   \n",
              "15             0.387500             1.833333            80.630471   \n",
              "16             1.320833             2.283333            35.010118   \n",
              "17             1.152000             1.583333             4.645794   \n",
              "18             0.960000             2.441667            60.400500   \n",
              "19             0.883333             1.775000            79.480382   \n",
              "20             4.383333             2.575000            46.046500   \n",
              "21             1.825000             1.241667            96.887500   \n",
              "22             2.775000             4.625000            55.578882   \n",
              "23             3.770833             1.583333            79.806294   \n",
              "25             3.483333             4.175000            22.794588   \n",
              "26             2.865217             2.000000           100.615912   \n",
              "\n",
              "    mean_NRJ_productivity  mean_POLL_death  mean_GREEN_Bound  \\\n",
              "0                7.673333       114.941176               0.0   \n",
              "1                8.495833       126.117647               0.7   \n",
              "2                6.618750        73.411765              10.5   \n",
              "3                8.568333        58.470588               8.3   \n",
              "4                6.910417        76.235294               0.0   \n",
              "5                8.361250        44.058824               7.6   \n",
              "6                6.699583        74.411765               0.0   \n",
              "7                5.556667        62.411765              14.8   \n",
              "8                6.666667        50.941176              11.1   \n",
              "9                6.564583       114.058824               3.8   \n",
              "10               5.612500        90.882353               3.3   \n",
              "11               7.224167        44.352941               5.9   \n",
              "12               5.726667        94.823529              16.3   \n",
              "14               4.659583        10.352941              10.6   \n",
              "15               9.740833        91.647059               6.1   \n",
              "16               6.238750        15.176471              16.2   \n",
              "17              10.085833        36.411765              13.9   \n",
              "18               8.298750        60.647059              13.3   \n",
              "19               8.876667        37.764706               8.4   \n",
              "20               4.720000       205.941176               0.0   \n",
              "21               7.485000        88.764706               0.0   \n",
              "22               6.774167       124.352941              15.3   \n",
              "23              14.102917        13.294118               6.3   \n",
              "25               4.707917        21.705882               0.0   \n",
              "26               4.834583        46.470588               0.0   \n",
              "\n",
              "    mean_GREEN_COP21  mean_GREEN_Losses  mean_GREEN_employment  \\\n",
              "0               0.47          22.510682              2319895.0   \n",
              "1              52.97          21.244773             19107921.0   \n",
              "2               0.82          13.584318              1640729.0   \n",
              "3            2641.17          40.223636             19383640.0   \n",
              "4              18.99          16.253864              3705280.0   \n",
              "5            6967.47          52.181136             31114862.0   \n",
              "6              42.87         191.309091              2391372.0   \n",
              "7            1614.33          34.092500              5045574.0   \n",
              "8            6742.48          15.590000             19285852.0   \n",
              "9             147.37          12.435682             15233320.0   \n",
              "10             86.71          40.780682              7642963.0   \n",
              "11          51822.11          49.259524             65675414.0   \n",
              "12             47.72           8.251591              1392878.0   \n",
              "14           1264.68          10.729318             10686157.0   \n",
              "15           5326.15          52.183636             34123037.0   \n",
              "16           5934.53           9.141818              8911204.0   \n",
              "17           2567.42          37.135909              6043897.0   \n",
              "18          75708.13          49.874091             38082271.0   \n",
              "19             37.77          36.377727              7998754.0   \n",
              "20              0.47          16.006136              3773866.0   \n",
              "21              0.00          12.567045               372371.0   \n",
              "22            174.96          23.343409              1773955.0   \n",
              "23            800.96          20.831818              2226384.0   \n",
              "25             12.76           5.573864              2096800.0   \n",
              "26              1.80           2.552045               262660.0   \n",
              "\n",
              "    mean_GREEN_enviro_protection  mean_GREEN_gross_value  \\\n",
              "0                       0.562500                1.644444   \n",
              "1                       0.558824                2.802000   \n",
              "2                       0.400000                2.837778   \n",
              "3                       0.325000                4.484000   \n",
              "4                       0.691667                2.415385   \n",
              "5                       0.246154                2.469000   \n",
              "6                       0.914286                1.606923   \n",
              "7                       0.462500                1.795556   \n",
              "8                       0.477778                2.131818   \n",
              "9                       0.600000                2.348889   \n",
              "10                      0.750000                2.486667   \n",
              "11                      0.400000                2.092000   \n",
              "12                      0.400000                1.520000   \n",
              "14                      0.260000                5.850909   \n",
              "15                      0.400000                2.625714   \n",
              "16                      0.383333                3.610909   \n",
              "17                      0.437500                3.153636   \n",
              "18                      0.400000                2.028889   \n",
              "19                      0.312500                2.497778   \n",
              "20                      0.862500                2.332000   \n",
              "21                      0.418182                1.832000   \n",
              "22                      0.737500                0.631667   \n",
              "23                      0.225000                0.874444   \n",
              "25                      0.650000                4.441111   \n",
              "26                      0.300000                1.006364   \n",
              "\n",
              "    mean_GREEN_investments  mean_GREEN_tax  mean_FDI_impact  mean_GOV_GDP  \\\n",
              "0               375.637368        3.682759        -6.537475     83.389655   \n",
              "1              2227.852105        2.294828        12.117424     90.237931   \n",
              "2               458.715789        2.701034         6.196840     88.148276   \n",
              "3              3213.635789        2.444828         6.484691     89.144828   \n",
              "4               666.511053        2.072414         0.894307     89.500000   \n",
              "5              4896.697895        1.860690         8.106235     91.203333   \n",
              "6               355.560000        3.664138         7.977310     87.053333   \n",
              "7              3966.281053        2.485172        11.365664     89.534483   \n",
              "8              2641.880000        3.531034         5.896115     89.556667   \n",
              "9              2674.091579        2.471724        10.176542     88.282759   \n",
              "10             1208.926316        2.159655       -37.148363     90.734483   \n",
              "11            14650.290526        2.111379         7.837741     89.267391   \n",
              "12              528.607368        2.300690         7.955281     89.396552   \n",
              "14             1295.963684        2.884828       -13.488083     87.254545   \n",
              "15             6289.255263        3.139310         4.047319     89.606897   \n",
              "16             4533.070000        2.451724        12.600088     88.500000   \n",
              "17             5205.151053        4.133793        10.117949     86.550000   \n",
              "18            12181.241579        2.426552         8.956760     89.920588   \n",
              "19             1298.203158        2.648966         4.537354     87.224138   \n",
              "20              450.814737        2.704483         2.378030     87.341379   \n",
              "21               26.490000        3.049310         4.319232     88.927586   \n",
              "22             1022.838947        2.560690         3.773871     85.344828   \n",
              "23              347.608421        2.176207         6.520967     91.048276   \n",
              "25              207.604737        2.433448         6.993160     87.934483   \n",
              "26               34.116842        2.831379         0.415972     89.158621   \n",
              "\n",
              "    mean_GOV_bound  mean_GOV_deficit  mean_share_renew_energy  \\\n",
              "0         3.284167         -2.541667                 26.50435   \n",
              "1         6.394167         -4.091667                 22.44690   \n",
              "2         3.273333         -2.208333                 36.54865   \n",
              "3         2.855000         -2.333333                 31.83285   \n",
              "4         2.880000         -1.308333                 22.81555   \n",
              "5         3.149167         -5.666667                 15.26090   \n",
              "6         3.112500         -3.408333                 21.74110   \n",
              "7         2.949167         -3.466667                  7.67355   \n",
              "8         2.640000         -1.008333                  6.78340   \n",
              "9         5.583333         -3.033333                 11.36660   \n",
              "10        4.005000         -1.841667                 12.94330   \n",
              "11        3.017500         -4.683333                 14.30665   \n",
              "12        3.476667         -3.033333                 11.51695   \n",
              "14        2.865000         -2.133333                 37.11270   \n",
              "15        3.696667         -4.450000                 14.92930   \n",
              "16        2.207500         -0.375000                 51.09950   \n",
              "17        2.286667          1.225000                 27.98060   \n",
              "18        2.347500         -0.425000                 13.93285   \n",
              "19        2.957500         -3.016667                 27.39560   \n",
              "20        3.930000         -1.300000                 16.11650   \n",
              "21        3.113333         -2.733333                  9.75290   \n",
              "22        6.571667         -3.791667                 12.42230   \n",
              "23        2.734167         -1.991667                  8.28040   \n",
              "25        3.562500         -1.058333                 26.71950   \n",
              "26        3.369167         -2.175000                  5.11215   \n",
              "\n",
              "    mean_CO2_emissions  besoin_aide  \n",
              "0            79.372727            0  \n",
              "1            49.530303            0  \n",
              "2            43.642424            0  \n",
              "3           105.006061            0  \n",
              "4            39.812121            0  \n",
              "5           121.993939            0  \n",
              "6            98.715152            0  \n",
              "7            94.218182            1  \n",
              "8            96.000000            1  \n",
              "9            84.763636            1  \n",
              "10           72.954545            0  \n",
              "11           91.660606            1  \n",
              "12           63.857576            1  \n",
              "14          101.387879            0  \n",
              "15           93.721212            1  \n",
              "16           67.272727            0  \n",
              "17           89.851515            0  \n",
              "18           77.066667            1  \n",
              "19          101.615152            0  \n",
              "20           62.218182            1  \n",
              "21          144.924242            1  \n",
              "22           73.963636            1  \n",
              "23          114.751515            0  \n",
              "25           51.245455            0  \n",
              "26          107.072727            1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7fd64fba-d002-4356-b53a-9646edbcf233\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name_en</th>\n",
              "      <th>name_fr</th>\n",
              "      <th>country</th>\n",
              "      <th>iso3</th>\n",
              "      <th>mean_energy_price</th>\n",
              "      <th>mean_GDP_per_capita</th>\n",
              "      <th>mean_HICP_inflation</th>\n",
              "      <th>mean_NRJ_dependency</th>\n",
              "      <th>mean_NRJ_productivity</th>\n",
              "      <th>mean_POLL_death</th>\n",
              "      <th>mean_GREEN_Bound</th>\n",
              "      <th>mean_GREEN_COP21</th>\n",
              "      <th>mean_GREEN_Losses</th>\n",
              "      <th>mean_GREEN_employment</th>\n",
              "      <th>mean_GREEN_enviro_protection</th>\n",
              "      <th>mean_GREEN_gross_value</th>\n",
              "      <th>mean_GREEN_investments</th>\n",
              "      <th>mean_GREEN_tax</th>\n",
              "      <th>mean_FDI_impact</th>\n",
              "      <th>mean_GOV_GDP</th>\n",
              "      <th>mean_GOV_bound</th>\n",
              "      <th>mean_GOV_deficit</th>\n",
              "      <th>mean_share_renew_energy</th>\n",
              "      <th>mean_CO2_emissions</th>\n",
              "      <th>besoin_aide</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Croatia</td>\n",
              "      <td>Croatie</td>\n",
              "      <td>HR</td>\n",
              "      <td>HRV</td>\n",
              "      <td>0.175217</td>\n",
              "      <td>2.945833</td>\n",
              "      <td>2.591667</td>\n",
              "      <td>47.643618</td>\n",
              "      <td>7.673333</td>\n",
              "      <td>114.941176</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.47</td>\n",
              "      <td>22.510682</td>\n",
              "      <td>2319895.0</td>\n",
              "      <td>0.562500</td>\n",
              "      <td>1.644444</td>\n",
              "      <td>375.637368</td>\n",
              "      <td>3.682759</td>\n",
              "      <td>-6.537475</td>\n",
              "      <td>83.389655</td>\n",
              "      <td>3.284167</td>\n",
              "      <td>-2.541667</td>\n",
              "      <td>26.50435</td>\n",
              "      <td>79.372727</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Romania</td>\n",
              "      <td>Roumanie</td>\n",
              "      <td>RO</td>\n",
              "      <td>ROU</td>\n",
              "      <td>0.287683</td>\n",
              "      <td>4.429167</td>\n",
              "      <td>3.841667</td>\n",
              "      <td>26.227059</td>\n",
              "      <td>8.495833</td>\n",
              "      <td>126.117647</td>\n",
              "      <td>0.7</td>\n",
              "      <td>52.97</td>\n",
              "      <td>21.244773</td>\n",
              "      <td>19107921.0</td>\n",
              "      <td>0.558824</td>\n",
              "      <td>2.802000</td>\n",
              "      <td>2227.852105</td>\n",
              "      <td>2.294828</td>\n",
              "      <td>12.117424</td>\n",
              "      <td>90.237931</td>\n",
              "      <td>6.394167</td>\n",
              "      <td>-4.091667</td>\n",
              "      <td>22.44690</td>\n",
              "      <td>49.530303</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Latvia</td>\n",
              "      <td>Lettonie</td>\n",
              "      <td>LV</td>\n",
              "      <td>LVA</td>\n",
              "      <td>0.289067</td>\n",
              "      <td>4.579167</td>\n",
              "      <td>3.341667</td>\n",
              "      <td>58.673618</td>\n",
              "      <td>6.618750</td>\n",
              "      <td>73.411765</td>\n",
              "      <td>10.5</td>\n",
              "      <td>0.82</td>\n",
              "      <td>13.584318</td>\n",
              "      <td>1640729.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2.837778</td>\n",
              "      <td>458.715789</td>\n",
              "      <td>2.701034</td>\n",
              "      <td>6.196840</td>\n",
              "      <td>88.148276</td>\n",
              "      <td>3.273333</td>\n",
              "      <td>-2.208333</td>\n",
              "      <td>36.54865</td>\n",
              "      <td>43.642424</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Austria</td>\n",
              "      <td>Autriche</td>\n",
              "      <td>AT</td>\n",
              "      <td>AUT</td>\n",
              "      <td>0.198467</td>\n",
              "      <td>0.916667</td>\n",
              "      <td>2.883333</td>\n",
              "      <td>66.289353</td>\n",
              "      <td>8.568333</td>\n",
              "      <td>58.470588</td>\n",
              "      <td>8.3</td>\n",
              "      <td>2641.17</td>\n",
              "      <td>40.223636</td>\n",
              "      <td>19383640.0</td>\n",
              "      <td>0.325000</td>\n",
              "      <td>4.484000</td>\n",
              "      <td>3213.635789</td>\n",
              "      <td>2.444828</td>\n",
              "      <td>6.484691</td>\n",
              "      <td>89.144828</td>\n",
              "      <td>2.855000</td>\n",
              "      <td>-2.333333</td>\n",
              "      <td>31.83285</td>\n",
              "      <td>105.006061</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Lithuania</td>\n",
              "      <td>Lituanie</td>\n",
              "      <td>LT</td>\n",
              "      <td>LTU</td>\n",
              "      <td>0.247333</td>\n",
              "      <td>4.891667</td>\n",
              "      <td>3.666667</td>\n",
              "      <td>63.143147</td>\n",
              "      <td>6.910417</td>\n",
              "      <td>76.235294</td>\n",
              "      <td>0.0</td>\n",
              "      <td>18.99</td>\n",
              "      <td>16.253864</td>\n",
              "      <td>3705280.0</td>\n",
              "      <td>0.691667</td>\n",
              "      <td>2.415385</td>\n",
              "      <td>666.511053</td>\n",
              "      <td>2.072414</td>\n",
              "      <td>0.894307</td>\n",
              "      <td>89.500000</td>\n",
              "      <td>2.880000</td>\n",
              "      <td>-1.308333</td>\n",
              "      <td>22.81555</td>\n",
              "      <td>39.812121</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Spain</td>\n",
              "      <td>Espagne</td>\n",
              "      <td>ES</td>\n",
              "      <td>ESP</td>\n",
              "      <td>0.252800</td>\n",
              "      <td>1.012000</td>\n",
              "      <td>1.850000</td>\n",
              "      <td>73.347853</td>\n",
              "      <td>8.361250</td>\n",
              "      <td>44.058824</td>\n",
              "      <td>7.6</td>\n",
              "      <td>6967.47</td>\n",
              "      <td>52.181136</td>\n",
              "      <td>31114862.0</td>\n",
              "      <td>0.246154</td>\n",
              "      <td>2.469000</td>\n",
              "      <td>4896.697895</td>\n",
              "      <td>1.860690</td>\n",
              "      <td>8.106235</td>\n",
              "      <td>91.203333</td>\n",
              "      <td>3.149167</td>\n",
              "      <td>-5.666667</td>\n",
              "      <td>15.26090</td>\n",
              "      <td>121.993939</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Slovenia</td>\n",
              "      <td>Slovénie</td>\n",
              "      <td>SI</td>\n",
              "      <td>SVN</td>\n",
              "      <td>0.165267</td>\n",
              "      <td>2.124000</td>\n",
              "      <td>2.225000</td>\n",
              "      <td>49.982029</td>\n",
              "      <td>6.699583</td>\n",
              "      <td>74.411765</td>\n",
              "      <td>0.0</td>\n",
              "      <td>42.87</td>\n",
              "      <td>191.309091</td>\n",
              "      <td>2391372.0</td>\n",
              "      <td>0.914286</td>\n",
              "      <td>1.606923</td>\n",
              "      <td>355.560000</td>\n",
              "      <td>3.664138</td>\n",
              "      <td>7.977310</td>\n",
              "      <td>87.053333</td>\n",
              "      <td>3.112500</td>\n",
              "      <td>-3.408333</td>\n",
              "      <td>21.74110</td>\n",
              "      <td>98.715152</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Belgium</td>\n",
              "      <td>Belgique</td>\n",
              "      <td>BE</td>\n",
              "      <td>BEL</td>\n",
              "      <td>0.257600</td>\n",
              "      <td>1.100000</td>\n",
              "      <td>2.525000</td>\n",
              "      <td>78.216324</td>\n",
              "      <td>5.556667</td>\n",
              "      <td>62.411765</td>\n",
              "      <td>14.8</td>\n",
              "      <td>1614.33</td>\n",
              "      <td>34.092500</td>\n",
              "      <td>5045574.0</td>\n",
              "      <td>0.462500</td>\n",
              "      <td>1.795556</td>\n",
              "      <td>3966.281053</td>\n",
              "      <td>2.485172</td>\n",
              "      <td>11.365664</td>\n",
              "      <td>89.534483</td>\n",
              "      <td>2.949167</td>\n",
              "      <td>-3.466667</td>\n",
              "      <td>7.67355</td>\n",
              "      <td>94.218182</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Netherlands</td>\n",
              "      <td>Pays-Bas</td>\n",
              "      <td>NL</td>\n",
              "      <td>NLD</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>1.116000</td>\n",
              "      <td>2.633333</td>\n",
              "      <td>37.543235</td>\n",
              "      <td>6.666667</td>\n",
              "      <td>50.941176</td>\n",
              "      <td>11.1</td>\n",
              "      <td>6742.48</td>\n",
              "      <td>15.590000</td>\n",
              "      <td>19285852.0</td>\n",
              "      <td>0.477778</td>\n",
              "      <td>2.131818</td>\n",
              "      <td>2641.880000</td>\n",
              "      <td>3.531034</td>\n",
              "      <td>5.896115</td>\n",
              "      <td>89.556667</td>\n",
              "      <td>2.640000</td>\n",
              "      <td>-1.008333</td>\n",
              "      <td>6.78340</td>\n",
              "      <td>96.000000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Poland</td>\n",
              "      <td>Pologne</td>\n",
              "      <td>PL</td>\n",
              "      <td>POL</td>\n",
              "      <td>0.167360</td>\n",
              "      <td>3.729167</td>\n",
              "      <td>3.466667</td>\n",
              "      <td>21.813794</td>\n",
              "      <td>6.564583</td>\n",
              "      <td>114.058824</td>\n",
              "      <td>3.8</td>\n",
              "      <td>147.37</td>\n",
              "      <td>12.435682</td>\n",
              "      <td>15233320.0</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>2.348889</td>\n",
              "      <td>2674.091579</td>\n",
              "      <td>2.471724</td>\n",
              "      <td>10.176542</td>\n",
              "      <td>88.282759</td>\n",
              "      <td>5.583333</td>\n",
              "      <td>-3.033333</td>\n",
              "      <td>11.36660</td>\n",
              "      <td>84.763636</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Czech Republic</td>\n",
              "      <td>République tchèque</td>\n",
              "      <td>CZ</td>\n",
              "      <td>CZE</td>\n",
              "      <td>0.263067</td>\n",
              "      <td>2.229167</td>\n",
              "      <td>3.816667</td>\n",
              "      <td>27.591353</td>\n",
              "      <td>5.612500</td>\n",
              "      <td>90.882353</td>\n",
              "      <td>3.3</td>\n",
              "      <td>86.71</td>\n",
              "      <td>40.780682</td>\n",
              "      <td>7642963.0</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>2.486667</td>\n",
              "      <td>1208.926316</td>\n",
              "      <td>2.159655</td>\n",
              "      <td>-37.148363</td>\n",
              "      <td>90.734483</td>\n",
              "      <td>4.005000</td>\n",
              "      <td>-1.841667</td>\n",
              "      <td>12.94330</td>\n",
              "      <td>72.954545</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>France</td>\n",
              "      <td>France</td>\n",
              "      <td>FR</td>\n",
              "      <td>FRA</td>\n",
              "      <td>0.162367</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>1.925000</td>\n",
              "      <td>49.091000</td>\n",
              "      <td>7.224167</td>\n",
              "      <td>44.352941</td>\n",
              "      <td>5.9</td>\n",
              "      <td>51822.11</td>\n",
              "      <td>49.259524</td>\n",
              "      <td>65675414.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2.092000</td>\n",
              "      <td>14650.290526</td>\n",
              "      <td>2.111379</td>\n",
              "      <td>7.837741</td>\n",
              "      <td>89.267391</td>\n",
              "      <td>3.017500</td>\n",
              "      <td>-4.683333</td>\n",
              "      <td>14.30665</td>\n",
              "      <td>91.660606</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Slovakia</td>\n",
              "      <td>Slovaquie</td>\n",
              "      <td>SK</td>\n",
              "      <td>SVK</td>\n",
              "      <td>0.152867</td>\n",
              "      <td>3.283333</td>\n",
              "      <td>3.200000</td>\n",
              "      <td>65.371706</td>\n",
              "      <td>5.726667</td>\n",
              "      <td>94.823529</td>\n",
              "      <td>16.3</td>\n",
              "      <td>47.72</td>\n",
              "      <td>8.251591</td>\n",
              "      <td>1392878.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>1.520000</td>\n",
              "      <td>528.607368</td>\n",
              "      <td>2.300690</td>\n",
              "      <td>7.955281</td>\n",
              "      <td>89.396552</td>\n",
              "      <td>3.476667</td>\n",
              "      <td>-3.033333</td>\n",
              "      <td>11.51695</td>\n",
              "      <td>63.857576</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Finland</td>\n",
              "      <td>Finlande</td>\n",
              "      <td>FI</td>\n",
              "      <td>FIN</td>\n",
              "      <td>0.107600</td>\n",
              "      <td>1.012500</td>\n",
              "      <td>1.808333</td>\n",
              "      <td>51.129882</td>\n",
              "      <td>4.659583</td>\n",
              "      <td>10.352941</td>\n",
              "      <td>10.6</td>\n",
              "      <td>1264.68</td>\n",
              "      <td>10.729318</td>\n",
              "      <td>10686157.0</td>\n",
              "      <td>0.260000</td>\n",
              "      <td>5.850909</td>\n",
              "      <td>1295.963684</td>\n",
              "      <td>2.884828</td>\n",
              "      <td>-13.488083</td>\n",
              "      <td>87.254545</td>\n",
              "      <td>2.865000</td>\n",
              "      <td>-2.133333</td>\n",
              "      <td>37.11270</td>\n",
              "      <td>101.387879</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Italy</td>\n",
              "      <td>Italie</td>\n",
              "      <td>IT</td>\n",
              "      <td>ITA</td>\n",
              "      <td>0.298900</td>\n",
              "      <td>0.387500</td>\n",
              "      <td>1.833333</td>\n",
              "      <td>80.630471</td>\n",
              "      <td>9.740833</td>\n",
              "      <td>91.647059</td>\n",
              "      <td>6.1</td>\n",
              "      <td>5326.15</td>\n",
              "      <td>52.183636</td>\n",
              "      <td>34123037.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2.625714</td>\n",
              "      <td>6289.255263</td>\n",
              "      <td>3.139310</td>\n",
              "      <td>4.047319</td>\n",
              "      <td>89.606897</td>\n",
              "      <td>3.696667</td>\n",
              "      <td>-4.450000</td>\n",
              "      <td>14.92930</td>\n",
              "      <td>93.721212</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Sweden</td>\n",
              "      <td>Suède</td>\n",
              "      <td>SE</td>\n",
              "      <td>SWE</td>\n",
              "      <td>0.118917</td>\n",
              "      <td>1.320833</td>\n",
              "      <td>2.283333</td>\n",
              "      <td>35.010118</td>\n",
              "      <td>6.238750</td>\n",
              "      <td>15.176471</td>\n",
              "      <td>16.2</td>\n",
              "      <td>5934.53</td>\n",
              "      <td>9.141818</td>\n",
              "      <td>8911204.0</td>\n",
              "      <td>0.383333</td>\n",
              "      <td>3.610909</td>\n",
              "      <td>4533.070000</td>\n",
              "      <td>2.451724</td>\n",
              "      <td>12.600088</td>\n",
              "      <td>88.500000</td>\n",
              "      <td>2.207500</td>\n",
              "      <td>-0.375000</td>\n",
              "      <td>51.09950</td>\n",
              "      <td>67.272727</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>Danemark</td>\n",
              "      <td>DK</td>\n",
              "      <td>DNK</td>\n",
              "      <td>0.177750</td>\n",
              "      <td>1.152000</td>\n",
              "      <td>1.583333</td>\n",
              "      <td>4.645794</td>\n",
              "      <td>10.085833</td>\n",
              "      <td>36.411765</td>\n",
              "      <td>13.9</td>\n",
              "      <td>2567.42</td>\n",
              "      <td>37.135909</td>\n",
              "      <td>6043897.0</td>\n",
              "      <td>0.437500</td>\n",
              "      <td>3.153636</td>\n",
              "      <td>5205.151053</td>\n",
              "      <td>4.133793</td>\n",
              "      <td>10.117949</td>\n",
              "      <td>86.550000</td>\n",
              "      <td>2.286667</td>\n",
              "      <td>1.225000</td>\n",
              "      <td>27.98060</td>\n",
              "      <td>89.851515</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Germany</td>\n",
              "      <td>Allemagne</td>\n",
              "      <td>DE</td>\n",
              "      <td>DEU</td>\n",
              "      <td>0.224517</td>\n",
              "      <td>0.960000</td>\n",
              "      <td>2.441667</td>\n",
              "      <td>60.400500</td>\n",
              "      <td>8.298750</td>\n",
              "      <td>60.647059</td>\n",
              "      <td>13.3</td>\n",
              "      <td>75708.13</td>\n",
              "      <td>49.874091</td>\n",
              "      <td>38082271.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2.028889</td>\n",
              "      <td>12181.241579</td>\n",
              "      <td>2.426552</td>\n",
              "      <td>8.956760</td>\n",
              "      <td>89.920588</td>\n",
              "      <td>2.347500</td>\n",
              "      <td>-0.425000</td>\n",
              "      <td>13.93285</td>\n",
              "      <td>77.066667</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Portugal</td>\n",
              "      <td>Portugal</td>\n",
              "      <td>PT</td>\n",
              "      <td>PRT</td>\n",
              "      <td>0.242600</td>\n",
              "      <td>0.883333</td>\n",
              "      <td>1.775000</td>\n",
              "      <td>79.480382</td>\n",
              "      <td>8.876667</td>\n",
              "      <td>37.764706</td>\n",
              "      <td>8.4</td>\n",
              "      <td>37.77</td>\n",
              "      <td>36.377727</td>\n",
              "      <td>7998754.0</td>\n",
              "      <td>0.312500</td>\n",
              "      <td>2.497778</td>\n",
              "      <td>1298.203158</td>\n",
              "      <td>2.648966</td>\n",
              "      <td>4.537354</td>\n",
              "      <td>87.224138</td>\n",
              "      <td>2.957500</td>\n",
              "      <td>-3.016667</td>\n",
              "      <td>27.39560</td>\n",
              "      <td>101.615152</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Bulgaria</td>\n",
              "      <td>Bulgarie</td>\n",
              "      <td>BG</td>\n",
              "      <td>BGR</td>\n",
              "      <td>0.164633</td>\n",
              "      <td>4.383333</td>\n",
              "      <td>2.575000</td>\n",
              "      <td>46.046500</td>\n",
              "      <td>4.720000</td>\n",
              "      <td>205.941176</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.47</td>\n",
              "      <td>16.006136</td>\n",
              "      <td>3773866.0</td>\n",
              "      <td>0.862500</td>\n",
              "      <td>2.332000</td>\n",
              "      <td>450.814737</td>\n",
              "      <td>2.704483</td>\n",
              "      <td>2.378030</td>\n",
              "      <td>87.341379</td>\n",
              "      <td>3.930000</td>\n",
              "      <td>-1.300000</td>\n",
              "      <td>16.11650</td>\n",
              "      <td>62.218182</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Cyprus</td>\n",
              "      <td>Chypre</td>\n",
              "      <td>CY</td>\n",
              "      <td>CYP</td>\n",
              "      <td>0.226533</td>\n",
              "      <td>1.825000</td>\n",
              "      <td>1.241667</td>\n",
              "      <td>96.887500</td>\n",
              "      <td>7.485000</td>\n",
              "      <td>88.764706</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>12.567045</td>\n",
              "      <td>372371.0</td>\n",
              "      <td>0.418182</td>\n",
              "      <td>1.832000</td>\n",
              "      <td>26.490000</td>\n",
              "      <td>3.049310</td>\n",
              "      <td>4.319232</td>\n",
              "      <td>88.927586</td>\n",
              "      <td>3.113333</td>\n",
              "      <td>-2.733333</td>\n",
              "      <td>9.75290</td>\n",
              "      <td>144.924242</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Hungary</td>\n",
              "      <td>Hongrie</td>\n",
              "      <td>HU</td>\n",
              "      <td>HUN</td>\n",
              "      <td>0.127667</td>\n",
              "      <td>2.775000</td>\n",
              "      <td>4.625000</td>\n",
              "      <td>55.578882</td>\n",
              "      <td>6.774167</td>\n",
              "      <td>124.352941</td>\n",
              "      <td>15.3</td>\n",
              "      <td>174.96</td>\n",
              "      <td>23.343409</td>\n",
              "      <td>1773955.0</td>\n",
              "      <td>0.737500</td>\n",
              "      <td>0.631667</td>\n",
              "      <td>1022.838947</td>\n",
              "      <td>2.560690</td>\n",
              "      <td>3.773871</td>\n",
              "      <td>85.344828</td>\n",
              "      <td>6.571667</td>\n",
              "      <td>-3.791667</td>\n",
              "      <td>12.42230</td>\n",
              "      <td>73.963636</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Ireland</td>\n",
              "      <td>Irlande</td>\n",
              "      <td>IE</td>\n",
              "      <td>IRL</td>\n",
              "      <td>0.292733</td>\n",
              "      <td>3.770833</td>\n",
              "      <td>1.583333</td>\n",
              "      <td>79.806294</td>\n",
              "      <td>14.102917</td>\n",
              "      <td>13.294118</td>\n",
              "      <td>6.3</td>\n",
              "      <td>800.96</td>\n",
              "      <td>20.831818</td>\n",
              "      <td>2226384.0</td>\n",
              "      <td>0.225000</td>\n",
              "      <td>0.874444</td>\n",
              "      <td>347.608421</td>\n",
              "      <td>2.176207</td>\n",
              "      <td>6.520967</td>\n",
              "      <td>91.048276</td>\n",
              "      <td>2.734167</td>\n",
              "      <td>-1.991667</td>\n",
              "      <td>8.28040</td>\n",
              "      <td>114.751515</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Estonia</td>\n",
              "      <td>Estonie</td>\n",
              "      <td>EE</td>\n",
              "      <td>EST</td>\n",
              "      <td>0.192833</td>\n",
              "      <td>3.483333</td>\n",
              "      <td>4.175000</td>\n",
              "      <td>22.794588</td>\n",
              "      <td>4.707917</td>\n",
              "      <td>21.705882</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.76</td>\n",
              "      <td>5.573864</td>\n",
              "      <td>2096800.0</td>\n",
              "      <td>0.650000</td>\n",
              "      <td>4.441111</td>\n",
              "      <td>207.604737</td>\n",
              "      <td>2.433448</td>\n",
              "      <td>6.993160</td>\n",
              "      <td>87.934483</td>\n",
              "      <td>3.562500</td>\n",
              "      <td>-1.058333</td>\n",
              "      <td>26.71950</td>\n",
              "      <td>51.245455</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Malta</td>\n",
              "      <td>Malte</td>\n",
              "      <td>MT</td>\n",
              "      <td>MLT</td>\n",
              "      <td>0.161320</td>\n",
              "      <td>2.865217</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>100.615912</td>\n",
              "      <td>4.834583</td>\n",
              "      <td>46.470588</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.80</td>\n",
              "      <td>2.552045</td>\n",
              "      <td>262660.0</td>\n",
              "      <td>0.300000</td>\n",
              "      <td>1.006364</td>\n",
              "      <td>34.116842</td>\n",
              "      <td>2.831379</td>\n",
              "      <td>0.415972</td>\n",
              "      <td>89.158621</td>\n",
              "      <td>3.369167</td>\n",
              "      <td>-2.175000</td>\n",
              "      <td>5.11215</td>\n",
              "      <td>107.072727</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7fd64fba-d002-4356-b53a-9646edbcf233')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7fd64fba-d002-4356-b53a-9646edbcf233 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7fd64fba-d002-4356-b53a-9646edbcf233');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eed60ff9-ea0b-46e7-83c9-1c9dffe4214a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eed60ff9-ea0b-46e7-83c9-1c9dffe4214a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eed60ff9-ea0b-46e7-83c9-1c9dffe4214a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3032f14b-3417-40da-a474-72a9eddc2600\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3032f14b-3417-40da-a474-72a9eddc2600 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "\n",
        "# 1. Préparer les features et le label\n",
        "X = data[['mean_share_renew_energy', 'mean_GOV_GDP']]  # Variables explicatives\n",
        "y = data['besoin_aide']  # Variable cible\n",
        "\n",
        "# 2. Diviser les données en train (80%) et test (20%)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# 3. Entraîner le modèle Random Forest\n",
        "rf = RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42)\n",
        "rf.fit(X_train, y_train)\n",
        "\n",
        "# 4. Prédire sur le jeu de test\n",
        "y_pred = rf.predict(X_test)\n",
        "\n",
        "# 5. Évaluer le modèle\n",
        "print(\"Matrice de confusion :\")\n",
        "print(confusion_matrix(y_test, y_pred))\n",
        "\n",
        "print(\"\\nRapport de classification :\")\n",
        "print(classification_report(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lqfG_YqB5rxC",
        "outputId": "7b1053ff-72ec-47d0-bd92-07cac081be21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matrice de confusion :\n",
            "[[5 0]\n",
            " [0 3]]\n",
            "\n",
            "Rapport de classification :\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00         5\n",
            "           1       1.00      1.00      1.00         3\n",
            "\n",
            "    accuracy                           1.00         8\n",
            "   macro avg       1.00      1.00      1.00         8\n",
            "weighted avg       1.00      1.00      1.00         8\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Test avec 3 niveaux de besoin\n",
        "def assign_besoin(data):\n",
        "    if data['mean_share_renew_energy'] > 20 and data['mean_GOV_GDP'] > 88:\n",
        "        return 2  # Pas besoin d’aide\n",
        "    elif 18 <= data['mean_share_renew_energy'] <= 20 or (86 <= data['mean_GOV_GDP'] <= 88):\n",
        "        return 1  # Besoin modéré d’aide\n",
        "    else:\n",
        "        return 0  # Besoin urgent d’aide\n",
        "\n",
        "# Application des critères sur le DataFrame\n",
        "data['niveau_besoin'] = data.apply(assign_besoin, axis=1)\n",
        "\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 870
        },
        "id": "meFeriCN8g8U",
        "outputId": "9c21a286-65da-4f8e-a0aa-bce0e82ff4d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           name_en             name_fr country iso3  mean_energy_price  \\\n",
              "0          Croatia             Croatie      HR  HRV           0.175217   \n",
              "1          Romania            Roumanie      RO  ROU           0.287683   \n",
              "2           Latvia            Lettonie      LV  LVA           0.289067   \n",
              "3          Austria            Autriche      AT  AUT           0.198467   \n",
              "4        Lithuania            Lituanie      LT  LTU           0.247333   \n",
              "5            Spain             Espagne      ES  ESP           0.252800   \n",
              "6         Slovenia            Slovénie      SI  SVN           0.165267   \n",
              "7          Belgium            Belgique      BE  BEL           0.257600   \n",
              "8      Netherlands            Pays-Bas      NL  NLD           0.250000   \n",
              "9           Poland             Pologne      PL  POL           0.167360   \n",
              "10  Czech Republic  République tchèque      CZ  CZE           0.263067   \n",
              "11          France              France      FR  FRA           0.162367   \n",
              "12        Slovakia           Slovaquie      SK  SVK           0.152867   \n",
              "14         Finland            Finlande      FI  FIN           0.107600   \n",
              "15           Italy              Italie      IT  ITA           0.298900   \n",
              "16          Sweden               Suède      SE  SWE           0.118917   \n",
              "17         Denmark            Danemark      DK  DNK           0.177750   \n",
              "18         Germany           Allemagne      DE  DEU           0.224517   \n",
              "19        Portugal            Portugal      PT  PRT           0.242600   \n",
              "20        Bulgaria            Bulgarie      BG  BGR           0.164633   \n",
              "21          Cyprus              Chypre      CY  CYP           0.226533   \n",
              "22         Hungary             Hongrie      HU  HUN           0.127667   \n",
              "23         Ireland             Irlande      IE  IRL           0.292733   \n",
              "25         Estonia             Estonie      EE  EST           0.192833   \n",
              "26           Malta               Malte      MT  MLT           0.161320   \n",
              "\n",
              "    mean_GDP_per_capita  mean_HICP_inflation  mean_NRJ_dependency  \\\n",
              "0              2.945833             2.591667            47.643618   \n",
              "1              4.429167             3.841667            26.227059   \n",
              "2              4.579167             3.341667            58.673618   \n",
              "3              0.916667             2.883333            66.289353   \n",
              "4              4.891667             3.666667            63.143147   \n",
              "5              1.012000             1.850000            73.347853   \n",
              "6              2.124000             2.225000            49.982029   \n",
              "7              1.100000             2.525000            78.216324   \n",
              "8              1.116000             2.633333            37.543235   \n",
              "9              3.729167             3.466667            21.813794   \n",
              "10             2.229167             3.816667            27.591353   \n",
              "11             0.833333             1.925000            49.091000   \n",
              "12             3.283333             3.200000            65.371706   \n",
              "14             1.012500             1.808333            51.129882   \n",
              "15             0.387500             1.833333            80.630471   \n",
              "16             1.320833             2.283333            35.010118   \n",
              "17             1.152000             1.583333             4.645794   \n",
              "18             0.960000             2.441667            60.400500   \n",
              "19             0.883333             1.775000            79.480382   \n",
              "20             4.383333             2.575000            46.046500   \n",
              "21             1.825000             1.241667            96.887500   \n",
              "22             2.775000             4.625000            55.578882   \n",
              "23             3.770833             1.583333            79.806294   \n",
              "25             3.483333             4.175000            22.794588   \n",
              "26             2.865217             2.000000           100.615912   \n",
              "\n",
              "    mean_NRJ_productivity  mean_POLL_death  mean_GREEN_Bound  \\\n",
              "0                7.673333       114.941176               0.0   \n",
              "1                8.495833       126.117647               0.7   \n",
              "2                6.618750        73.411765              10.5   \n",
              "3                8.568333        58.470588               8.3   \n",
              "4                6.910417        76.235294               0.0   \n",
              "5                8.361250        44.058824               7.6   \n",
              "6                6.699583        74.411765               0.0   \n",
              "7                5.556667        62.411765              14.8   \n",
              "8                6.666667        50.941176              11.1   \n",
              "9                6.564583       114.058824               3.8   \n",
              "10               5.612500        90.882353               3.3   \n",
              "11               7.224167        44.352941               5.9   \n",
              "12               5.726667        94.823529              16.3   \n",
              "14               4.659583        10.352941              10.6   \n",
              "15               9.740833        91.647059               6.1   \n",
              "16               6.238750        15.176471              16.2   \n",
              "17              10.085833        36.411765              13.9   \n",
              "18               8.298750        60.647059              13.3   \n",
              "19               8.876667        37.764706               8.4   \n",
              "20               4.720000       205.941176               0.0   \n",
              "21               7.485000        88.764706               0.0   \n",
              "22               6.774167       124.352941              15.3   \n",
              "23              14.102917        13.294118               6.3   \n",
              "25               4.707917        21.705882               0.0   \n",
              "26               4.834583        46.470588               0.0   \n",
              "\n",
              "    mean_GREEN_COP21  mean_GREEN_Losses  mean_GREEN_employment  \\\n",
              "0               0.47          22.510682              2319895.0   \n",
              "1              52.97          21.244773             19107921.0   \n",
              "2               0.82          13.584318              1640729.0   \n",
              "3            2641.17          40.223636             19383640.0   \n",
              "4              18.99          16.253864              3705280.0   \n",
              "5            6967.47          52.181136             31114862.0   \n",
              "6              42.87         191.309091              2391372.0   \n",
              "7            1614.33          34.092500              5045574.0   \n",
              "8            6742.48          15.590000             19285852.0   \n",
              "9             147.37          12.435682             15233320.0   \n",
              "10             86.71          40.780682              7642963.0   \n",
              "11          51822.11          49.259524             65675414.0   \n",
              "12             47.72           8.251591              1392878.0   \n",
              "14           1264.68          10.729318             10686157.0   \n",
              "15           5326.15          52.183636             34123037.0   \n",
              "16           5934.53           9.141818              8911204.0   \n",
              "17           2567.42          37.135909              6043897.0   \n",
              "18          75708.13          49.874091             38082271.0   \n",
              "19             37.77          36.377727              7998754.0   \n",
              "20              0.47          16.006136              3773866.0   \n",
              "21              0.00          12.567045               372371.0   \n",
              "22            174.96          23.343409              1773955.0   \n",
              "23            800.96          20.831818              2226384.0   \n",
              "25             12.76           5.573864              2096800.0   \n",
              "26              1.80           2.552045               262660.0   \n",
              "\n",
              "    mean_GREEN_enviro_protection  mean_GREEN_gross_value  \\\n",
              "0                       0.562500                1.644444   \n",
              "1                       0.558824                2.802000   \n",
              "2                       0.400000                2.837778   \n",
              "3                       0.325000                4.484000   \n",
              "4                       0.691667                2.415385   \n",
              "5                       0.246154                2.469000   \n",
              "6                       0.914286                1.606923   \n",
              "7                       0.462500                1.795556   \n",
              "8                       0.477778                2.131818   \n",
              "9                       0.600000                2.348889   \n",
              "10                      0.750000                2.486667   \n",
              "11                      0.400000                2.092000   \n",
              "12                      0.400000                1.520000   \n",
              "14                      0.260000                5.850909   \n",
              "15                      0.400000                2.625714   \n",
              "16                      0.383333                3.610909   \n",
              "17                      0.437500                3.153636   \n",
              "18                      0.400000                2.028889   \n",
              "19                      0.312500                2.497778   \n",
              "20                      0.862500                2.332000   \n",
              "21                      0.418182                1.832000   \n",
              "22                      0.737500                0.631667   \n",
              "23                      0.225000                0.874444   \n",
              "25                      0.650000                4.441111   \n",
              "26                      0.300000                1.006364   \n",
              "\n",
              "    mean_GREEN_investments  mean_GREEN_tax  mean_FDI_impact  mean_GOV_GDP  \\\n",
              "0               375.637368        3.682759        -6.537475     83.389655   \n",
              "1              2227.852105        2.294828        12.117424     90.237931   \n",
              "2               458.715789        2.701034         6.196840     88.148276   \n",
              "3              3213.635789        2.444828         6.484691     89.144828   \n",
              "4               666.511053        2.072414         0.894307     89.500000   \n",
              "5              4896.697895        1.860690         8.106235     91.203333   \n",
              "6               355.560000        3.664138         7.977310     87.053333   \n",
              "7              3966.281053        2.485172        11.365664     89.534483   \n",
              "8              2641.880000        3.531034         5.896115     89.556667   \n",
              "9              2674.091579        2.471724        10.176542     88.282759   \n",
              "10             1208.926316        2.159655       -37.148363     90.734483   \n",
              "11            14650.290526        2.111379         7.837741     89.267391   \n",
              "12              528.607368        2.300690         7.955281     89.396552   \n",
              "14             1295.963684        2.884828       -13.488083     87.254545   \n",
              "15             6289.255263        3.139310         4.047319     89.606897   \n",
              "16             4533.070000        2.451724        12.600088     88.500000   \n",
              "17             5205.151053        4.133793        10.117949     86.550000   \n",
              "18            12181.241579        2.426552         8.956760     89.920588   \n",
              "19             1298.203158        2.648966         4.537354     87.224138   \n",
              "20              450.814737        2.704483         2.378030     87.341379   \n",
              "21               26.490000        3.049310         4.319232     88.927586   \n",
              "22             1022.838947        2.560690         3.773871     85.344828   \n",
              "23              347.608421        2.176207         6.520967     91.048276   \n",
              "25              207.604737        2.433448         6.993160     87.934483   \n",
              "26               34.116842        2.831379         0.415972     89.158621   \n",
              "\n",
              "    mean_GOV_bound  mean_GOV_deficit  mean_share_renew_energy  \\\n",
              "0         3.284167         -2.541667                 26.50435   \n",
              "1         6.394167         -4.091667                 22.44690   \n",
              "2         3.273333         -2.208333                 36.54865   \n",
              "3         2.855000         -2.333333                 31.83285   \n",
              "4         2.880000         -1.308333                 22.81555   \n",
              "5         3.149167         -5.666667                 15.26090   \n",
              "6         3.112500         -3.408333                 21.74110   \n",
              "7         2.949167         -3.466667                  7.67355   \n",
              "8         2.640000         -1.008333                  6.78340   \n",
              "9         5.583333         -3.033333                 11.36660   \n",
              "10        4.005000         -1.841667                 12.94330   \n",
              "11        3.017500         -4.683333                 14.30665   \n",
              "12        3.476667         -3.033333                 11.51695   \n",
              "14        2.865000         -2.133333                 37.11270   \n",
              "15        3.696667         -4.450000                 14.92930   \n",
              "16        2.207500         -0.375000                 51.09950   \n",
              "17        2.286667          1.225000                 27.98060   \n",
              "18        2.347500         -0.425000                 13.93285   \n",
              "19        2.957500         -3.016667                 27.39560   \n",
              "20        3.930000         -1.300000                 16.11650   \n",
              "21        3.113333         -2.733333                  9.75290   \n",
              "22        6.571667         -3.791667                 12.42230   \n",
              "23        2.734167         -1.991667                  8.28040   \n",
              "25        3.562500         -1.058333                 26.71950   \n",
              "26        3.369167         -2.175000                  5.11215   \n",
              "\n",
              "    mean_CO2_emissions  besoin_aide  niveau_besoin  \n",
              "0            79.372727            0              0  \n",
              "1            49.530303            0              2  \n",
              "2            43.642424            0              2  \n",
              "3           105.006061            0              2  \n",
              "4            39.812121            0              2  \n",
              "5           121.993939            0              0  \n",
              "6            98.715152            0              1  \n",
              "7            94.218182            1              0  \n",
              "8            96.000000            1              0  \n",
              "9            84.763636            1              0  \n",
              "10           72.954545            0              0  \n",
              "11           91.660606            1              0  \n",
              "12           63.857576            1              0  \n",
              "14          101.387879            0              1  \n",
              "15           93.721212            1              0  \n",
              "16           67.272727            0              2  \n",
              "17           89.851515            0              1  \n",
              "18           77.066667            1              0  \n",
              "19          101.615152            0              1  \n",
              "20           62.218182            1              1  \n",
              "21          144.924242            1              0  \n",
              "22           73.963636            1              0  \n",
              "23          114.751515            0              0  \n",
              "25           51.245455            0              1  \n",
              "26          107.072727            1              0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-757481e6-9190-459e-b939-d57f825965fd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name_en</th>\n",
              "      <th>name_fr</th>\n",
              "      <th>country</th>\n",
              "      <th>iso3</th>\n",
              "      <th>mean_energy_price</th>\n",
              "      <th>mean_GDP_per_capita</th>\n",
              "      <th>mean_HICP_inflation</th>\n",
              "      <th>mean_NRJ_dependency</th>\n",
              "      <th>mean_NRJ_productivity</th>\n",
              "      <th>mean_POLL_death</th>\n",
              "      <th>mean_GREEN_Bound</th>\n",
              "      <th>mean_GREEN_COP21</th>\n",
              "      <th>mean_GREEN_Losses</th>\n",
              "      <th>mean_GREEN_employment</th>\n",
              "      <th>mean_GREEN_enviro_protection</th>\n",
              "      <th>mean_GREEN_gross_value</th>\n",
              "      <th>mean_GREEN_investments</th>\n",
              "      <th>mean_GREEN_tax</th>\n",
              "      <th>mean_FDI_impact</th>\n",
              "      <th>mean_GOV_GDP</th>\n",
              "      <th>mean_GOV_bound</th>\n",
              "      <th>mean_GOV_deficit</th>\n",
              "      <th>mean_share_renew_energy</th>\n",
              "      <th>mean_CO2_emissions</th>\n",
              "      <th>besoin_aide</th>\n",
              "      <th>niveau_besoin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Croatia</td>\n",
              "      <td>Croatie</td>\n",
              "      <td>HR</td>\n",
              "      <td>HRV</td>\n",
              "      <td>0.175217</td>\n",
              "      <td>2.945833</td>\n",
              "      <td>2.591667</td>\n",
              "      <td>47.643618</td>\n",
              "      <td>7.673333</td>\n",
              "      <td>114.941176</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.47</td>\n",
              "      <td>22.510682</td>\n",
              "      <td>2319895.0</td>\n",
              "      <td>0.562500</td>\n",
              "      <td>1.644444</td>\n",
              "      <td>375.637368</td>\n",
              "      <td>3.682759</td>\n",
              "      <td>-6.537475</td>\n",
              "      <td>83.389655</td>\n",
              "      <td>3.284167</td>\n",
              "      <td>-2.541667</td>\n",
              "      <td>26.50435</td>\n",
              "      <td>79.372727</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Romania</td>\n",
              "      <td>Roumanie</td>\n",
              "      <td>RO</td>\n",
              "      <td>ROU</td>\n",
              "      <td>0.287683</td>\n",
              "      <td>4.429167</td>\n",
              "      <td>3.841667</td>\n",
              "      <td>26.227059</td>\n",
              "      <td>8.495833</td>\n",
              "      <td>126.117647</td>\n",
              "      <td>0.7</td>\n",
              "      <td>52.97</td>\n",
              "      <td>21.244773</td>\n",
              "      <td>19107921.0</td>\n",
              "      <td>0.558824</td>\n",
              "      <td>2.802000</td>\n",
              "      <td>2227.852105</td>\n",
              "      <td>2.294828</td>\n",
              "      <td>12.117424</td>\n",
              "      <td>90.237931</td>\n",
              "      <td>6.394167</td>\n",
              "      <td>-4.091667</td>\n",
              "      <td>22.44690</td>\n",
              "      <td>49.530303</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Latvia</td>\n",
              "      <td>Lettonie</td>\n",
              "      <td>LV</td>\n",
              "      <td>LVA</td>\n",
              "      <td>0.289067</td>\n",
              "      <td>4.579167</td>\n",
              "      <td>3.341667</td>\n",
              "      <td>58.673618</td>\n",
              "      <td>6.618750</td>\n",
              "      <td>73.411765</td>\n",
              "      <td>10.5</td>\n",
              "      <td>0.82</td>\n",
              "      <td>13.584318</td>\n",
              "      <td>1640729.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2.837778</td>\n",
              "      <td>458.715789</td>\n",
              "      <td>2.701034</td>\n",
              "      <td>6.196840</td>\n",
              "      <td>88.148276</td>\n",
              "      <td>3.273333</td>\n",
              "      <td>-2.208333</td>\n",
              "      <td>36.54865</td>\n",
              "      <td>43.642424</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Austria</td>\n",
              "      <td>Autriche</td>\n",
              "      <td>AT</td>\n",
              "      <td>AUT</td>\n",
              "      <td>0.198467</td>\n",
              "      <td>0.916667</td>\n",
              "      <td>2.883333</td>\n",
              "      <td>66.289353</td>\n",
              "      <td>8.568333</td>\n",
              "      <td>58.470588</td>\n",
              "      <td>8.3</td>\n",
              "      <td>2641.17</td>\n",
              "      <td>40.223636</td>\n",
              "      <td>19383640.0</td>\n",
              "      <td>0.325000</td>\n",
              "      <td>4.484000</td>\n",
              "      <td>3213.635789</td>\n",
              "      <td>2.444828</td>\n",
              "      <td>6.484691</td>\n",
              "      <td>89.144828</td>\n",
              "      <td>2.855000</td>\n",
              "      <td>-2.333333</td>\n",
              "      <td>31.83285</td>\n",
              "      <td>105.006061</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Lithuania</td>\n",
              "      <td>Lituanie</td>\n",
              "      <td>LT</td>\n",
              "      <td>LTU</td>\n",
              "      <td>0.247333</td>\n",
              "      <td>4.891667</td>\n",
              "      <td>3.666667</td>\n",
              "      <td>63.143147</td>\n",
              "      <td>6.910417</td>\n",
              "      <td>76.235294</td>\n",
              "      <td>0.0</td>\n",
              "      <td>18.99</td>\n",
              "      <td>16.253864</td>\n",
              "      <td>3705280.0</td>\n",
              "      <td>0.691667</td>\n",
              "      <td>2.415385</td>\n",
              "      <td>666.511053</td>\n",
              "      <td>2.072414</td>\n",
              "      <td>0.894307</td>\n",
              "      <td>89.500000</td>\n",
              "      <td>2.880000</td>\n",
              "      <td>-1.308333</td>\n",
              "      <td>22.81555</td>\n",
              "      <td>39.812121</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Spain</td>\n",
              "      <td>Espagne</td>\n",
              "      <td>ES</td>\n",
              "      <td>ESP</td>\n",
              "      <td>0.252800</td>\n",
              "      <td>1.012000</td>\n",
              "      <td>1.850000</td>\n",
              "      <td>73.347853</td>\n",
              "      <td>8.361250</td>\n",
              "      <td>44.058824</td>\n",
              "      <td>7.6</td>\n",
              "      <td>6967.47</td>\n",
              "      <td>52.181136</td>\n",
              "      <td>31114862.0</td>\n",
              "      <td>0.246154</td>\n",
              "      <td>2.469000</td>\n",
              "      <td>4896.697895</td>\n",
              "      <td>1.860690</td>\n",
              "      <td>8.106235</td>\n",
              "      <td>91.203333</td>\n",
              "      <td>3.149167</td>\n",
              "      <td>-5.666667</td>\n",
              "      <td>15.26090</td>\n",
              "      <td>121.993939</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Slovenia</td>\n",
              "      <td>Slovénie</td>\n",
              "      <td>SI</td>\n",
              "      <td>SVN</td>\n",
              "      <td>0.165267</td>\n",
              "      <td>2.124000</td>\n",
              "      <td>2.225000</td>\n",
              "      <td>49.982029</td>\n",
              "      <td>6.699583</td>\n",
              "      <td>74.411765</td>\n",
              "      <td>0.0</td>\n",
              "      <td>42.87</td>\n",
              "      <td>191.309091</td>\n",
              "      <td>2391372.0</td>\n",
              "      <td>0.914286</td>\n",
              "      <td>1.606923</td>\n",
              "      <td>355.560000</td>\n",
              "      <td>3.664138</td>\n",
              "      <td>7.977310</td>\n",
              "      <td>87.053333</td>\n",
              "      <td>3.112500</td>\n",
              "      <td>-3.408333</td>\n",
              "      <td>21.74110</td>\n",
              "      <td>98.715152</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Belgium</td>\n",
              "      <td>Belgique</td>\n",
              "      <td>BE</td>\n",
              "      <td>BEL</td>\n",
              "      <td>0.257600</td>\n",
              "      <td>1.100000</td>\n",
              "      <td>2.525000</td>\n",
              "      <td>78.216324</td>\n",
              "      <td>5.556667</td>\n",
              "      <td>62.411765</td>\n",
              "      <td>14.8</td>\n",
              "      <td>1614.33</td>\n",
              "      <td>34.092500</td>\n",
              "      <td>5045574.0</td>\n",
              "      <td>0.462500</td>\n",
              "      <td>1.795556</td>\n",
              "      <td>3966.281053</td>\n",
              "      <td>2.485172</td>\n",
              "      <td>11.365664</td>\n",
              "      <td>89.534483</td>\n",
              "      <td>2.949167</td>\n",
              "      <td>-3.466667</td>\n",
              "      <td>7.67355</td>\n",
              "      <td>94.218182</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Netherlands</td>\n",
              "      <td>Pays-Bas</td>\n",
              "      <td>NL</td>\n",
              "      <td>NLD</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>1.116000</td>\n",
              "      <td>2.633333</td>\n",
              "      <td>37.543235</td>\n",
              "      <td>6.666667</td>\n",
              "      <td>50.941176</td>\n",
              "      <td>11.1</td>\n",
              "      <td>6742.48</td>\n",
              "      <td>15.590000</td>\n",
              "      <td>19285852.0</td>\n",
              "      <td>0.477778</td>\n",
              "      <td>2.131818</td>\n",
              "      <td>2641.880000</td>\n",
              "      <td>3.531034</td>\n",
              "      <td>5.896115</td>\n",
              "      <td>89.556667</td>\n",
              "      <td>2.640000</td>\n",
              "      <td>-1.008333</td>\n",
              "      <td>6.78340</td>\n",
              "      <td>96.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Poland</td>\n",
              "      <td>Pologne</td>\n",
              "      <td>PL</td>\n",
              "      <td>POL</td>\n",
              "      <td>0.167360</td>\n",
              "      <td>3.729167</td>\n",
              "      <td>3.466667</td>\n",
              "      <td>21.813794</td>\n",
              "      <td>6.564583</td>\n",
              "      <td>114.058824</td>\n",
              "      <td>3.8</td>\n",
              "      <td>147.37</td>\n",
              "      <td>12.435682</td>\n",
              "      <td>15233320.0</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>2.348889</td>\n",
              "      <td>2674.091579</td>\n",
              "      <td>2.471724</td>\n",
              "      <td>10.176542</td>\n",
              "      <td>88.282759</td>\n",
              "      <td>5.583333</td>\n",
              "      <td>-3.033333</td>\n",
              "      <td>11.36660</td>\n",
              "      <td>84.763636</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Czech Republic</td>\n",
              "      <td>République tchèque</td>\n",
              "      <td>CZ</td>\n",
              "      <td>CZE</td>\n",
              "      <td>0.263067</td>\n",
              "      <td>2.229167</td>\n",
              "      <td>3.816667</td>\n",
              "      <td>27.591353</td>\n",
              "      <td>5.612500</td>\n",
              "      <td>90.882353</td>\n",
              "      <td>3.3</td>\n",
              "      <td>86.71</td>\n",
              "      <td>40.780682</td>\n",
              "      <td>7642963.0</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>2.486667</td>\n",
              "      <td>1208.926316</td>\n",
              "      <td>2.159655</td>\n",
              "      <td>-37.148363</td>\n",
              "      <td>90.734483</td>\n",
              "      <td>4.005000</td>\n",
              "      <td>-1.841667</td>\n",
              "      <td>12.94330</td>\n",
              "      <td>72.954545</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>France</td>\n",
              "      <td>France</td>\n",
              "      <td>FR</td>\n",
              "      <td>FRA</td>\n",
              "      <td>0.162367</td>\n",
              "      <td>0.833333</td>\n",
              "      <td>1.925000</td>\n",
              "      <td>49.091000</td>\n",
              "      <td>7.224167</td>\n",
              "      <td>44.352941</td>\n",
              "      <td>5.9</td>\n",
              "      <td>51822.11</td>\n",
              "      <td>49.259524</td>\n",
              "      <td>65675414.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2.092000</td>\n",
              "      <td>14650.290526</td>\n",
              "      <td>2.111379</td>\n",
              "      <td>7.837741</td>\n",
              "      <td>89.267391</td>\n",
              "      <td>3.017500</td>\n",
              "      <td>-4.683333</td>\n",
              "      <td>14.30665</td>\n",
              "      <td>91.660606</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Slovakia</td>\n",
              "      <td>Slovaquie</td>\n",
              "      <td>SK</td>\n",
              "      <td>SVK</td>\n",
              "      <td>0.152867</td>\n",
              "      <td>3.283333</td>\n",
              "      <td>3.200000</td>\n",
              "      <td>65.371706</td>\n",
              "      <td>5.726667</td>\n",
              "      <td>94.823529</td>\n",
              "      <td>16.3</td>\n",
              "      <td>47.72</td>\n",
              "      <td>8.251591</td>\n",
              "      <td>1392878.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>1.520000</td>\n",
              "      <td>528.607368</td>\n",
              "      <td>2.300690</td>\n",
              "      <td>7.955281</td>\n",
              "      <td>89.396552</td>\n",
              "      <td>3.476667</td>\n",
              "      <td>-3.033333</td>\n",
              "      <td>11.51695</td>\n",
              "      <td>63.857576</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Finland</td>\n",
              "      <td>Finlande</td>\n",
              "      <td>FI</td>\n",
              "      <td>FIN</td>\n",
              "      <td>0.107600</td>\n",
              "      <td>1.012500</td>\n",
              "      <td>1.808333</td>\n",
              "      <td>51.129882</td>\n",
              "      <td>4.659583</td>\n",
              "      <td>10.352941</td>\n",
              "      <td>10.6</td>\n",
              "      <td>1264.68</td>\n",
              "      <td>10.729318</td>\n",
              "      <td>10686157.0</td>\n",
              "      <td>0.260000</td>\n",
              "      <td>5.850909</td>\n",
              "      <td>1295.963684</td>\n",
              "      <td>2.884828</td>\n",
              "      <td>-13.488083</td>\n",
              "      <td>87.254545</td>\n",
              "      <td>2.865000</td>\n",
              "      <td>-2.133333</td>\n",
              "      <td>37.11270</td>\n",
              "      <td>101.387879</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Italy</td>\n",
              "      <td>Italie</td>\n",
              "      <td>IT</td>\n",
              "      <td>ITA</td>\n",
              "      <td>0.298900</td>\n",
              "      <td>0.387500</td>\n",
              "      <td>1.833333</td>\n",
              "      <td>80.630471</td>\n",
              "      <td>9.740833</td>\n",
              "      <td>91.647059</td>\n",
              "      <td>6.1</td>\n",
              "      <td>5326.15</td>\n",
              "      <td>52.183636</td>\n",
              "      <td>34123037.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2.625714</td>\n",
              "      <td>6289.255263</td>\n",
              "      <td>3.139310</td>\n",
              "      <td>4.047319</td>\n",
              "      <td>89.606897</td>\n",
              "      <td>3.696667</td>\n",
              "      <td>-4.450000</td>\n",
              "      <td>14.92930</td>\n",
              "      <td>93.721212</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Sweden</td>\n",
              "      <td>Suède</td>\n",
              "      <td>SE</td>\n",
              "      <td>SWE</td>\n",
              "      <td>0.118917</td>\n",
              "      <td>1.320833</td>\n",
              "      <td>2.283333</td>\n",
              "      <td>35.010118</td>\n",
              "      <td>6.238750</td>\n",
              "      <td>15.176471</td>\n",
              "      <td>16.2</td>\n",
              "      <td>5934.53</td>\n",
              "      <td>9.141818</td>\n",
              "      <td>8911204.0</td>\n",
              "      <td>0.383333</td>\n",
              "      <td>3.610909</td>\n",
              "      <td>4533.070000</td>\n",
              "      <td>2.451724</td>\n",
              "      <td>12.600088</td>\n",
              "      <td>88.500000</td>\n",
              "      <td>2.207500</td>\n",
              "      <td>-0.375000</td>\n",
              "      <td>51.09950</td>\n",
              "      <td>67.272727</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>Danemark</td>\n",
              "      <td>DK</td>\n",
              "      <td>DNK</td>\n",
              "      <td>0.177750</td>\n",
              "      <td>1.152000</td>\n",
              "      <td>1.583333</td>\n",
              "      <td>4.645794</td>\n",
              "      <td>10.085833</td>\n",
              "      <td>36.411765</td>\n",
              "      <td>13.9</td>\n",
              "      <td>2567.42</td>\n",
              "      <td>37.135909</td>\n",
              "      <td>6043897.0</td>\n",
              "      <td>0.437500</td>\n",
              "      <td>3.153636</td>\n",
              "      <td>5205.151053</td>\n",
              "      <td>4.133793</td>\n",
              "      <td>10.117949</td>\n",
              "      <td>86.550000</td>\n",
              "      <td>2.286667</td>\n",
              "      <td>1.225000</td>\n",
              "      <td>27.98060</td>\n",
              "      <td>89.851515</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Germany</td>\n",
              "      <td>Allemagne</td>\n",
              "      <td>DE</td>\n",
              "      <td>DEU</td>\n",
              "      <td>0.224517</td>\n",
              "      <td>0.960000</td>\n",
              "      <td>2.441667</td>\n",
              "      <td>60.400500</td>\n",
              "      <td>8.298750</td>\n",
              "      <td>60.647059</td>\n",
              "      <td>13.3</td>\n",
              "      <td>75708.13</td>\n",
              "      <td>49.874091</td>\n",
              "      <td>38082271.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2.028889</td>\n",
              "      <td>12181.241579</td>\n",
              "      <td>2.426552</td>\n",
              "      <td>8.956760</td>\n",
              "      <td>89.920588</td>\n",
              "      <td>2.347500</td>\n",
              "      <td>-0.425000</td>\n",
              "      <td>13.93285</td>\n",
              "      <td>77.066667</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Portugal</td>\n",
              "      <td>Portugal</td>\n",
              "      <td>PT</td>\n",
              "      <td>PRT</td>\n",
              "      <td>0.242600</td>\n",
              "      <td>0.883333</td>\n",
              "      <td>1.775000</td>\n",
              "      <td>79.480382</td>\n",
              "      <td>8.876667</td>\n",
              "      <td>37.764706</td>\n",
              "      <td>8.4</td>\n",
              "      <td>37.77</td>\n",
              "      <td>36.377727</td>\n",
              "      <td>7998754.0</td>\n",
              "      <td>0.312500</td>\n",
              "      <td>2.497778</td>\n",
              "      <td>1298.203158</td>\n",
              "      <td>2.648966</td>\n",
              "      <td>4.537354</td>\n",
              "      <td>87.224138</td>\n",
              "      <td>2.957500</td>\n",
              "      <td>-3.016667</td>\n",
              "      <td>27.39560</td>\n",
              "      <td>101.615152</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Bulgaria</td>\n",
              "      <td>Bulgarie</td>\n",
              "      <td>BG</td>\n",
              "      <td>BGR</td>\n",
              "      <td>0.164633</td>\n",
              "      <td>4.383333</td>\n",
              "      <td>2.575000</td>\n",
              "      <td>46.046500</td>\n",
              "      <td>4.720000</td>\n",
              "      <td>205.941176</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.47</td>\n",
              "      <td>16.006136</td>\n",
              "      <td>3773866.0</td>\n",
              "      <td>0.862500</td>\n",
              "      <td>2.332000</td>\n",
              "      <td>450.814737</td>\n",
              "      <td>2.704483</td>\n",
              "      <td>2.378030</td>\n",
              "      <td>87.341379</td>\n",
              "      <td>3.930000</td>\n",
              "      <td>-1.300000</td>\n",
              "      <td>16.11650</td>\n",
              "      <td>62.218182</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Cyprus</td>\n",
              "      <td>Chypre</td>\n",
              "      <td>CY</td>\n",
              "      <td>CYP</td>\n",
              "      <td>0.226533</td>\n",
              "      <td>1.825000</td>\n",
              "      <td>1.241667</td>\n",
              "      <td>96.887500</td>\n",
              "      <td>7.485000</td>\n",
              "      <td>88.764706</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>12.567045</td>\n",
              "      <td>372371.0</td>\n",
              "      <td>0.418182</td>\n",
              "      <td>1.832000</td>\n",
              "      <td>26.490000</td>\n",
              "      <td>3.049310</td>\n",
              "      <td>4.319232</td>\n",
              "      <td>88.927586</td>\n",
              "      <td>3.113333</td>\n",
              "      <td>-2.733333</td>\n",
              "      <td>9.75290</td>\n",
              "      <td>144.924242</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Hungary</td>\n",
              "      <td>Hongrie</td>\n",
              "      <td>HU</td>\n",
              "      <td>HUN</td>\n",
              "      <td>0.127667</td>\n",
              "      <td>2.775000</td>\n",
              "      <td>4.625000</td>\n",
              "      <td>55.578882</td>\n",
              "      <td>6.774167</td>\n",
              "      <td>124.352941</td>\n",
              "      <td>15.3</td>\n",
              "      <td>174.96</td>\n",
              "      <td>23.343409</td>\n",
              "      <td>1773955.0</td>\n",
              "      <td>0.737500</td>\n",
              "      <td>0.631667</td>\n",
              "      <td>1022.838947</td>\n",
              "      <td>2.560690</td>\n",
              "      <td>3.773871</td>\n",
              "      <td>85.344828</td>\n",
              "      <td>6.571667</td>\n",
              "      <td>-3.791667</td>\n",
              "      <td>12.42230</td>\n",
              "      <td>73.963636</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Ireland</td>\n",
              "      <td>Irlande</td>\n",
              "      <td>IE</td>\n",
              "      <td>IRL</td>\n",
              "      <td>0.292733</td>\n",
              "      <td>3.770833</td>\n",
              "      <td>1.583333</td>\n",
              "      <td>79.806294</td>\n",
              "      <td>14.102917</td>\n",
              "      <td>13.294118</td>\n",
              "      <td>6.3</td>\n",
              "      <td>800.96</td>\n",
              "      <td>20.831818</td>\n",
              "      <td>2226384.0</td>\n",
              "      <td>0.225000</td>\n",
              "      <td>0.874444</td>\n",
              "      <td>347.608421</td>\n",
              "      <td>2.176207</td>\n",
              "      <td>6.520967</td>\n",
              "      <td>91.048276</td>\n",
              "      <td>2.734167</td>\n",
              "      <td>-1.991667</td>\n",
              "      <td>8.28040</td>\n",
              "      <td>114.751515</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Estonia</td>\n",
              "      <td>Estonie</td>\n",
              "      <td>EE</td>\n",
              "      <td>EST</td>\n",
              "      <td>0.192833</td>\n",
              "      <td>3.483333</td>\n",
              "      <td>4.175000</td>\n",
              "      <td>22.794588</td>\n",
              "      <td>4.707917</td>\n",
              "      <td>21.705882</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.76</td>\n",
              "      <td>5.573864</td>\n",
              "      <td>2096800.0</td>\n",
              "      <td>0.650000</td>\n",
              "      <td>4.441111</td>\n",
              "      <td>207.604737</td>\n",
              "      <td>2.433448</td>\n",
              "      <td>6.993160</td>\n",
              "      <td>87.934483</td>\n",
              "      <td>3.562500</td>\n",
              "      <td>-1.058333</td>\n",
              "      <td>26.71950</td>\n",
              "      <td>51.245455</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Malta</td>\n",
              "      <td>Malte</td>\n",
              "      <td>MT</td>\n",
              "      <td>MLT</td>\n",
              "      <td>0.161320</td>\n",
              "      <td>2.865217</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>100.615912</td>\n",
              "      <td>4.834583</td>\n",
              "      <td>46.470588</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.80</td>\n",
              "      <td>2.552045</td>\n",
              "      <td>262660.0</td>\n",
              "      <td>0.300000</td>\n",
              "      <td>1.006364</td>\n",
              "      <td>34.116842</td>\n",
              "      <td>2.831379</td>\n",
              "      <td>0.415972</td>\n",
              "      <td>89.158621</td>\n",
              "      <td>3.369167</td>\n",
              "      <td>-2.175000</td>\n",
              "      <td>5.11215</td>\n",
              "      <td>107.072727</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-757481e6-9190-459e-b939-d57f825965fd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-757481e6-9190-459e-b939-d57f825965fd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-757481e6-9190-459e-b939-d57f825965fd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a71f67b9-47b3-4cb2-807e-62e71c69a2a0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a71f67b9-47b3-4cb2-807e-62e71c69a2a0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a71f67b9-47b3-4cb2-807e-62e71c69a2a0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f5d9bce7-63e8-41a2-87fb-dc21a9a00763\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f5d9bce7-63e8-41a2-87fb-dc21a9a00763 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Sélection des variables explicatives\n",
        "X = data[['mean_share_renew_energy', 'mean_GOV_GDP']]  # Variables explicatives\n",
        "y = data['niveau_besoin']  # Variable cible\n",
        "\n",
        "# Division des données en ensemble d'entraînement et de test\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Entraînement du modèle Random Forest\n",
        "rf = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')\n",
        "rf.fit(X_train, y_train)\n",
        "\n",
        "# Prédictions\n",
        "y_pred = rf.predict(X_test)\n",
        "\n",
        "# Évaluation du modèle\n",
        "print(confusion_matrix(y_test, y_pred))\n",
        "print(classification_report(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R1V4EFPZ-KC7",
        "outputId": "e6342e4a-6965-42d3-d38e-eae5064563d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[2 1 0]\n",
            " [0 1 1]\n",
            " [0 0 0]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.67      0.80         3\n",
            "           1       0.50      0.50      0.50         2\n",
            "           2       0.00      0.00      0.00         0\n",
            "\n",
            "    accuracy                           0.60         5\n",
            "   macro avg       0.50      0.39      0.43         5\n",
            "weighted avg       0.80      0.60      0.68         5\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Importance des variables\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Récupérer l'importance des variables\n",
        "feature_importances = pd.Series(rf.feature_importances_, index=X.columns)\n",
        "\n",
        "# Afficher les variables les plus importantes\n",
        "feature_importances.sort_values(ascending=False).plot(kind='barh', title='Importance des variables')\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "dCEJiGog-l9f",
        "outputId": "8f6e507f-323d-48db-f442-3db1a46faa1a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "rq : voir pour ajouter d'autres variables"
      ],
      "metadata": {
        "id": "nX58daqQ_PuW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Clustering"
      ],
      "metadata": {
        "id": "An9LdXK20nLL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Fonction pour choisir le nombre de cluster"
      ],
      "metadata": {
        "id": "qZTRaeYvgb2D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def clustering_algorithm(n_clusters, dataset):\n",
        "    kmeans = KMeans(n_clusters=n_clusters, n_init=10, max_iter=300)\n",
        "    labels = kmeans.fit_predict(dataset)\n",
        "    s = metrics.silhouette_score(dataset, labels, metric='euclidean')\n",
        "    dbs = metrics.davies_bouldin_score(dataset, labels)\n",
        "    calinski = metrics.calinski_harabasz_score(dataset, labels)\n",
        "    return s, dbs, calinski"
      ],
      "metadata": {
        "id": "fOy-WUjogYV6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Application de la fonction K-means"
      ],
      "metadata": {
        "id": "mhT0xWFwgwhk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#for i in range(3, 11):\n",
        "#    s, dbs, calinski = clustering_algorithm(i, values)\n",
        "#    print(i, s, dbs, calinski)\n",
        "\n",
        "#    On cherche à avoir s, dbs, calinski tels que:\n",
        "#*   s qui tende vers 1\n",
        "#*   dbs tende vers 0\n",
        "#*   calinski soit le plus grand possible\n",
        "#K=10 semble le plus pertinent\n"
      ],
      "metadata": {
        "id": "x0iDHm3rgxOa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Test du choix de K"
      ],
      "metadata": {
        "id": "ox4cW0mWg83-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#random_data = np.random.rand(167,9)\n",
        "#n_clusters=5\n",
        "#s_random, dbs_random, calinski_random = clustering_algorithm(n_clusters, random_data)\n",
        "#s, dbs, calinski = clustering_algorithm(n_clusters, values)\n",
        "\n",
        "#print(s_random, dbs_random, calinski_random)\n",
        "#print(s, dbs, calinski)"
      ],
      "metadata": {
        "id": "TPFTCtshg8KD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#set1, set2 = np.array_split(values, 2)\n",
        "#s1, dbs1, calinski1 = clustering_algorithm(n_clusters, set1)\n",
        "#s2, dbs2, calinski2 = clustering_algorithm(n_clusters, set2)\n",
        "#print(s1, dbs1, calinski1)\n",
        "#print(s2, dbs2, calinski2)"
      ],
      "metadata": {
        "id": "E3IgiQ2xhAxP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Import des bibliothèques"
      ],
      "metadata": {
        "id": "Uk4OT0V3aYlP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install scikit-learn-extra"
      ],
      "metadata": {
        "id": "59ithhU5ab2H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "57e158cb-101b-4f11-aed2-cee19b7e3c87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting scikit-learn-extra\n",
            "  Downloading scikit_learn_extra-0.3.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.6 kB)\n",
            "Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.11/dist-packages (from scikit-learn-extra) (1.26.4)\n",
            "Requirement already satisfied: scipy>=0.19.1 in /usr/local/lib/python3.11/dist-packages (from scikit-learn-extra) (1.13.1)\n",
            "Requirement already satisfied: scikit-learn>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn-extra) (1.6.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.23.0->scikit-learn-extra) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.23.0->scikit-learn-extra) (3.5.0)\n",
            "Downloading scikit_learn_extra-0.3.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m14.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: scikit-learn-extra\n",
            "Successfully installed scikit-learn-extra-0.3.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn_extra.cluster import KMedoids\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "YNmTOcqXaYRk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Normalisation des données"
      ],
      "metadata": {
        "id": "AWhvZNVtah5J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Normaliser les données (Standardisation)\n",
        "scaler = StandardScaler()\n",
        "df_scaled = scaler.fit_transform(dataframe)"
      ],
      "metadata": {
        "id": "iMmlqzRPalmw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Utilisation de l'ACP"
      ],
      "metadata": {
        "id": "yGrv8ZhYi96w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Appliquer l'ACP pour réduire la dimensionnalité à 2 composantes principales\n",
        "pca = PCA(n_components=3)\n",
        "df_pca = pca.fit_transform(df_scaled)\n",
        "components = pca.components_\n",
        "\n",
        "# Créer un DataFrame pour visualiser les composantes\n",
        "components_df = pd.DataFrame(components, columns=dataframe.columns, index=[f'PC{i+1}' for i in range(components.shape[0])])\n",
        "#components_abs = np.abs(components)\n",
        "\n",
        "# Tracer un graphique en barres\n",
        "components_df.T.plot(kind='bar', figsize=(10, 6))\n",
        "plt.title('Contribution des Caractéristiques à Chaque Composante Principale')\n",
        "plt.xlabel('Caractéristiques')\n",
        "plt.ylabel('Poids des Caractéristiques')\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 774
        },
        "id": "2LvYZXf3raF5",
        "outputId": "3a0ac3e1-c23f-4337-f900-59754ae0468d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Variance expliquée par chaque composante principale\n",
        "explained_variance = pca.explained_variance_ratio_\n",
        "\n",
        "# Variance cumulée expliquée\n",
        "cumulative_variance = explained_variance.cumsum()\n",
        "\n",
        "# Graphique de la variance cumulée\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(range(1, len(explained_variance) + 1), cumulative_variance, marker='o', color='b', linestyle='--')\n",
        "plt.title('Variance Cumulée expliquée par les Composantes Principales')\n",
        "plt.xlabel('Nombre de Composantes Principales')\n",
        "plt.ylabel('Variance Cumulée')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# Affichage des premières variances expliquées et cumulées\n",
        "print(\"Variance expliquée par chaque composante principale:\")\n",
        "print(explained_variance)\n",
        "\n",
        "print(\"\\nVariance cumulée expliquée:\")\n",
        "print(cumulative_variance)"
      ],
      "metadata": {
        "id": "5Yo6ZKWHbyqF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "outputId": "56af4687-a192-46ad-ed68-93bcbb04a1b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Variance expliquée par chaque composante principale:\n",
            "[0.24107628 0.15502031 0.12734616]\n",
            "\n",
            "Variance cumulée expliquée:\n",
            "[0.24107628 0.39609659 0.52344276]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Appliquer K-Means ou K-Medoids après l'ACP"
      ],
      "metadata": {
        "id": "cj7myvKT7BGe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "kmeans = KMeans(n_clusters=4, random_state=42)\n",
        "dataframe['cluster_kmeans'] = kmeans.fit_predict(df_pca)"
      ],
      "metadata": {
        "id": "aauzg141Z05G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Visualisation des résulats"
      ],
      "metadata": {
        "id": "YkQqNousbMu-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "\n",
        "# Créer une figure avec une disposition 2x2\n",
        "fig, axs = plt.subplots(2, 2, figsize=(12, 10))\n",
        "colors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\"]\n",
        "cluster_colors = [colors[i] for i in dataframe['cluster_kmeans']]\n",
        "# Graphique PCA1 vs PCA2\n",
        "axs[0, 0].scatter(df_pca[:, 0], df_pca[:, 1], c=cluster_colors, cmap='viridis', s=100)\n",
        "axs[0, 0].set_xlabel('Développement général')\n",
        "axs[0, 0].set_ylabel('Politique environnementale')\n",
        "axs[0, 0].set_title('Clustering K-Means après ACP (PCA1 vs PCA2)')\n",
        "\n",
        "# Ajouter les noms des pays\n",
        "for x, y, name in zip(df_pca[:, 0], df_pca[:, 1], data['country']):\n",
        "    axs[0, 0].text(x, y, name, fontsize=9, ha='left')\n",
        "\n",
        "# Graphique PCA2 vs PCA3\n",
        "axs[0, 1].scatter(df_pca[:, 1], df_pca[:, 2], c=cluster_colors, cmap='viridis', s=100)\n",
        "axs[0, 1].set_xlabel('Politiques environnementales')\n",
        "axs[0, 1].set_ylabel('Impact Ecologique et Engagements')\n",
        "axs[0, 1].set_title('Clustering K-Means après ACP (PCA2 vs PCA3)')\n",
        "\n",
        "# Ajouter les noms des pays\n",
        "for x, y, name in zip(df_pca[:, 1], df_pca[:, 2], data['country']):\n",
        "    axs[0, 1].text(x, y, name, fontsize=9, ha='left')\n",
        "\n",
        "# Graphique PCA3 vs PCA1\n",
        "axs[1, 0].scatter(df_pca[:, 2], df_pca[:, 0], c=cluster_colors, cmap='viridis', s=100)\n",
        "axs[1, 0].set_xlabel('Politiques environnementales')\n",
        "axs[1, 0].set_ylabel('Impact Ecologique et Engagements')\n",
        "axs[1, 0].set_title('Clustering K-Means après ACP (PCA3 vs PCA1)')\n",
        "\n",
        "# Ajouter les noms des pays\n",
        "for x, y, name in zip(df_pca[:, 2], df_pca[:, 0], data['country']):\n",
        "    axs[1, 0].text(x, y, name, fontsize=9, ha='left')\n",
        "\n",
        "\n",
        "# Graphique 3D avec PCA1, PCA2, PCA3\n",
        "ax = fig.add_subplot(2, 2, 4, projection='3d')\n",
        "ax.scatter(df_pca[:, 0], df_pca[:, 1], df_pca[:, 2], c=cluster_colors, cmap='viridis', s=100)\n",
        "ax.set_xlabel('Composant principal 1')\n",
        "ax.set_ylabel('Composant principal 2')\n",
        "ax.set_zlabel('Composant principal 3')\n",
        "ax.set_title('Clustering K-Means après ACP en 3D')\n",
        "\n",
        "\n",
        "for cluster in np.unique(dataframe['cluster_kmeans']):\n",
        "    ax.scatter([], [], [], c=colors[cluster], label=f'Cluster {cluster}')\n",
        "ax.legend()\n",
        "\n",
        "# Ajuster la mise en page pour éviter que les titres et les axes ne se chevauchent\n",
        "plt.tight_layout()\n",
        "\n",
        "# Afficher tous les graphiques\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "yy75Rw2gcRMw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "273f3656-a50d-4384-c7f6-8a3a2f908e27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-65-6f7482c9b9f6>:10: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n",
            "  axs[0, 0].scatter(df_pca[:, 0], df_pca[:, 1], c=cluster_colors, cmap='viridis', s=100)\n",
            "<ipython-input-65-6f7482c9b9f6>:20: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n",
            "  axs[0, 1].scatter(df_pca[:, 1], df_pca[:, 2], c=cluster_colors, cmap='viridis', s=100)\n",
            "<ipython-input-65-6f7482c9b9f6>:30: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n",
            "  axs[1, 0].scatter(df_pca[:, 2], df_pca[:, 0], c=cluster_colors, cmap='viridis', s=100)\n",
            "<ipython-input-65-6f7482c9b9f6>:42: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n",
            "  ax.scatter(df_pca[:, 0], df_pca[:, 1], df_pca[:, 2], c=cluster_colors, cmap='viridis', s=100)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x1000 with 5 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Analyse du clustering"
      ],
      "metadata": {
        "id": "X0iS-nytAF6T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import silhouette_score\n",
        "from sklearn.metrics import silhouette_samples\n",
        "import seaborn as sns\n",
        "\n",
        "\n",
        "# Calculer la silhouette globale du clustering\n",
        "silhouette_avg = silhouette_score(df_pca, dataframe['cluster_kmeans'])\n",
        "print(f\"Silhouette Score moyen : {silhouette_avg}\")\n",
        "\n",
        "\n",
        "# Calculer la silhouette pour chaque échantillon\n",
        "sample_silhouette_values = silhouette_samples(df_pca, dataframe['cluster_kmeans'])\n",
        "\n",
        "# Afficher la silhouette pour chaque cluster\n",
        "sns.set(style=\"whitegrid\")\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Tracer la silhouette\n",
        "y_lower, y_upper = 0, 0\n",
        "for i in range(len(np.unique(dataframe['cluster_kmeans']))):\n",
        "    # Récupérer les silhouettes des points pour chaque cluster\n",
        "    cluster_silhouette_values = sample_silhouette_values[dataframe['cluster_kmeans'] == i]\n",
        "\n",
        "    cluster_silhouette_values.sort()\n",
        "    y_upper += len(cluster_silhouette_values)\n",
        "    plt.fill_betweenx(np.arange(y_lower, y_upper), 0, cluster_silhouette_values,\n",
        "                      alpha=0.7, color=colors[i], label=f\"Cluster {i}\",)\n",
        "    y_lower = y_upper\n",
        "\n",
        "plt.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n",
        "plt.xlabel(\"Silhouette coefficient\")\n",
        "plt.ylabel(\"Échantillons\")\n",
        "plt.title(f\"Silhouette de l'algorithme K-Means avec score moyen de {silhouette_avg:.2f}\")\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "G0bk6uvTnv2y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 591
        },
        "outputId": "a5c59416-9278-45cb-8e02-85c6a9a4087d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Silhouette Score moyen : 0.4163334762629993\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Vérifions quelles sont les features les plus significatifs"
      ],
      "metadata": {
        "id": "iwE7udIQAxfa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "centroids = kmeans.cluster_centers_\n",
        "print(centroids)"
      ],
      "metadata": {
        "id": "El6uQVQ2BVBp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4a1100c3-fd5a-4783-d834-429b7921b627"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 2.32798036e+00 -3.47387988e-01  5.73765928e-01]\n",
            " [-9.24980636e-01  3.87389148e+00  4.40377927e-04]\n",
            " [-3.28841208e+00 -1.24069393e+00  1.58958705e+00]\n",
            " [-9.18901675e-01 -3.98127357e-01 -1.51216608e+00]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Visualisation du clustering"
      ],
      "metadata": {
        "id": "1A0kIXaxD_N4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "plt.figure(figsize=(8, 6), dpi=80)\n",
        "plt.scatter(df_0['EmCO2_2022'], df_0['FDI_2023'], c='blue', s=10, label='Cluster A')\n",
        "plt.scatter(df_1['EmCO2_2022'], df_1['FDI_2023'], c='red', s=10, label='Cluster B')\n",
        "plt.scatter(df_2['EmCO2_2022'], df_2['FDI_2023'], c='orange', s=10, label='Cluster C')\n",
        "plt.scatter(df_3['EmCO2_2022'], df_3['FDI_2023'], c='yellow', s=10, label='Cluster D')\n",
        "plt.scatter(df_4['EmCO2_2022'], df_4['FDI_2023'], c='green', s=10, label='Cluster E')\n",
        "\n",
        "\n",
        "for dataf in [df_0, df_1, df_2, df_3, df_4]:\n",
        "    for i, country in enumerate(dataf['country']):\n",
        "        plt.annotate(country,\n",
        "                     (dataf['EmCO2_2022'].iloc[i], dataf['FDI_2023'].iloc[i]),\n",
        "                     textcoords=\"offset points\",\n",
        "                     xytext=(5,5),  # Décalage pour éviter de recouvrir le point\n",
        "                     fontsize=8, alpha=0.7)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "plt.xlabel('Emission de CO2')\n",
        "plt.ylabel('Investissement Etrangers')\n",
        "plt.legend(),\n",
        "plt.show\n",
        "print(code_EU)\"\"\""
      ],
      "metadata": {
        "id": "0G0MCHbUEwJm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 127
        },
        "outputId": "36549178-fc86-41fd-9c69-dababe480b09"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nplt.figure(figsize=(8, 6), dpi=80)\\nplt.scatter(df_0[\\'EmCO2_2022\\'], df_0[\\'FDI_2023\\'], c=\\'blue\\', s=10, label=\\'Cluster A\\')\\nplt.scatter(df_1[\\'EmCO2_2022\\'], df_1[\\'FDI_2023\\'], c=\\'red\\', s=10, label=\\'Cluster B\\')\\nplt.scatter(df_2[\\'EmCO2_2022\\'], df_2[\\'FDI_2023\\'], c=\\'orange\\', s=10, label=\\'Cluster C\\')\\nplt.scatter(df_3[\\'EmCO2_2022\\'], df_3[\\'FDI_2023\\'], c=\\'yellow\\', s=10, label=\\'Cluster D\\')\\nplt.scatter(df_4[\\'EmCO2_2022\\'], df_4[\\'FDI_2023\\'], c=\\'green\\', s=10, label=\\'Cluster E\\')\\n\\n\\nfor dataf in [df_0, df_1, df_2, df_3, df_4]:\\n    for i, country in enumerate(dataf[\\'country\\']):\\n        plt.annotate(country,\\n                     (dataf[\\'EmCO2_2022\\'].iloc[i], dataf[\\'FDI_2023\\'].iloc[i]),\\n                     textcoords=\"offset points\",\\n                     xytext=(5,5),  # Décalage pour éviter de recouvrir le point\\n                     fontsize=8, alpha=0.7)\\n\\n\\n\\n\\nplt.xlabel(\\'Emission de CO2\\')\\nplt.ylabel(\\'Investissement Etrangers\\')\\nplt.legend(),\\nplt.show\\nprint(code_EU)'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Il semblerait que le résultat soit un peu flou, les clusterings dégage difficilement des zones claires"
      ],
      "metadata": {
        "id": "IvYEkyHBWw_0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Visualisation sur une carte"
      ],
      "metadata": {
        "id": "y_Ow9F04CPLO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pip install folium pandas"
      ],
      "metadata": {
        "id": "prTg63ZdPwRL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dedfadb2-8615-46e1-8062-8606cb2cc354"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: folium in /usr/local/lib/python3.11/dist-packages (0.19.4)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: branca>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from folium) (0.8.1)\n",
            "Requirement already satisfied: jinja2>=2.9 in /usr/local/lib/python3.11/dist-packages (from folium) (3.1.5)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from folium) (1.26.4)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from folium) (2.32.3)\n",
            "Requirement already satisfied: xyzservices in /usr/local/lib/python3.11/dist-packages (from folium) (2025.1.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2>=2.9->folium) (3.0.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->folium) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->folium) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->folium) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->folium) (2025.1.31)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import folium\n",
        "from geopy.geocoders import Nominatim\n"
      ],
      "metadata": {
        "id": "dZVdheknPzbl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_final=dataframe\n",
        "df_final['country']=data['country']"
      ],
      "metadata": {
        "id": "XS2dVdjpEEg0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Dictionnaire des coordonnées dans le même ordre\n",
        "coordinates = {\n",
        "    'HR': (45.1, 15.2),  # Croatie\n",
        "    'RO': (45.9432, 24.9668),  # Roumanie\n",
        "    'LV': (56.8796, 24.6032),  # Lettonie\n",
        "    'AT': (47.5162, 14.5501),  # Autriche\n",
        "    'LT': (55.1694, 23.8813),  # Lituanie\n",
        "    'ES': (40.4637, -3.7492),  # Espagne\n",
        "    'SI': (46.1512, 14.9955),  # Slovénie\n",
        "    'BE': (50.8503, 4.3517),   # Belgique\n",
        "    'NL': (52.3676, 4.9041),   # Pays-Bas\n",
        "    'PL': (51.9194, 19.1451),  # Pologne\n",
        "    'CZ': (49.8175, 15.4730),  # République tchèque\n",
        "    'FR': (46.6034, 1.8883),   # France\n",
        "    'SK': (48.6690, 19.6990),  # Slovaquie\n",
        "    'GR': (39.0742, 21.8243),  # Grèce\n",
        "    'FI': (61.9241, 25.7482),  # Finlande\n",
        "    'IT': (41.8719, 12.5674),  # Italie\n",
        "    'SE': (60.1282, 18.6435),  # Suède\n",
        "    'DK': (56.2639, 9.5018),   # Danemark\n",
        "    'DE': (51.1657, 10.4515),  # Allemagne\n",
        "    'PT': (39.3999, -8.2245),  # Portugal\n",
        "    'BG': (42.7339, 25.4858),  # Bulgarie\n",
        "    'CY': (35.1264, 33.4299),  # Chypre\n",
        "    'HU': (47.1625, 19.5033),  # Hongrie\n",
        "    'IE': (53.1424, -7.6921),  # Irlande\n",
        "    'LU': (49.8153, 6.1296),   # Luxembourg\n",
        "    'EE': (58.5953, 25.0136),  # Estonie\n",
        "    'MT': (35.9375, 14.3754)   # Malte\n",
        "}\n",
        "\n",
        "# Ajouter les colonnes latitude et longitude en respectant l'ordre\n",
        "df_final['latitude'] = df_final['country'].map(lambda x: coordinates[x][0])\n",
        "df_final['longitude'] = df_final['country'].map(lambda x: coordinates[x][1])\n"
      ],
      "metadata": {
        "id": "iGGEesTkTtCR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Définir une carte centrée sur l'Europe\n",
        "m = folium.Map(location=[50, 10], zoom_start=4)\n",
        "\n",
        "# Définir une palette de couleurs pour les clusters\n",
        "colors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\"]\n",
        "\n",
        "# Ajouter les pays à la carte\n",
        "for _, row in df_final.iterrows():\n",
        "    folium.CircleMarker(\n",
        "        location=[row[\"latitude\"], row[\"longitude\"]],\n",
        "        radius=8,\n",
        "        color=colors[row[\"cluster_kmeans\"]],\n",
        "        fill=True,\n",
        "        fill_color=colors[row[\"cluster_kmeans\"]],\n",
        "        fill_opacity=0.6,\n",
        "        popup=row[\"country\"]\n",
        "    ).add_to(m)\n",
        "\n",
        "# Afficher la carte\n",
        "m"
      ],
      "metadata": {
        "id": "AcPIhuEJP1oH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 860
        },
        "outputId": "bb80d25a-6eaf-4bf9-f475-75f6ce60c2ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<folium.folium.Map at 0x78c7df168fd0>"
            ],
            "text/html": [
              "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n",
              "&lt;html&gt;\n",
              "&lt;head&gt;\n",
              "    \n",
              "    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n",
              "    \n",
              "        &lt;script&gt;\n",
              "            L_NO_TOUCH = false;\n",
              "            L_DISABLE_3D = false;\n",
              "        &lt;/script&gt;\n",
              "    \n",
              "    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n",
              "    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n",
              "    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n",
              "    &lt;script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;&gt;&lt;/script&gt;\n",
              "    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n",
              "    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n",
              "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n",
              "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n",
              "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css&quot;/&gt;\n",
              "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n",
              "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n",
              "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n",
              "    \n",
              "            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n",
              "                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n",
              "            &lt;style&gt;\n",
              "                #map_edad65d784e66e162ab9717bc94a7276 {\n",
              "                    position: relative;\n",
              "                    width: 100.0%;\n",
              "                    height: 100.0%;\n",
              "                    left: 0.0%;\n",
              "                    top: 0.0%;\n",
              "                }\n",
              "                .leaflet-container { font-size: 1rem; }\n",
              "            &lt;/style&gt;\n",
              "        \n",
              "&lt;/head&gt;\n",
              "&lt;body&gt;\n",
              "    \n",
              "    \n",
              "            &lt;div class=&quot;folium-map&quot; id=&quot;map_edad65d784e66e162ab9717bc94a7276&quot; &gt;&lt;/div&gt;\n",
              "        \n",
              "&lt;/body&gt;\n",
              "&lt;script&gt;\n",
              "    \n",
              "    \n",
              "            var map_edad65d784e66e162ab9717bc94a7276 = L.map(\n",
              "                &quot;map_edad65d784e66e162ab9717bc94a7276&quot;,\n",
              "                {\n",
              "                    center: [50.0, 10.0],\n",
              "                    crs: L.CRS.EPSG3857,\n",
              "                    ...{\n",
              "  &quot;zoom&quot;: 4,\n",
              "  &quot;zoomControl&quot;: true,\n",
              "  &quot;preferCanvas&quot;: false,\n",
              "}\n",
              "\n",
              "                }\n",
              "            );\n",
              "\n",
              "            \n",
              "\n",
              "        \n",
              "    \n",
              "            var tile_layer_29e4fdb38be55e4491abadad94c07115 = L.tileLayer(\n",
              "                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n",
              "                {\n",
              "  &quot;minZoom&quot;: 0,\n",
              "  &quot;maxZoom&quot;: 19,\n",
              "  &quot;maxNativeZoom&quot;: 19,\n",
              "  &quot;noWrap&quot;: false,\n",
              "  &quot;attribution&quot;: &quot;\\u0026copy; \\u003ca href=\\&quot;https://www.openstreetmap.org/copyright\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e contributors&quot;,\n",
              "  &quot;subdomains&quot;: &quot;abc&quot;,\n",
              "  &quot;detectRetina&quot;: false,\n",
              "  &quot;tms&quot;: false,\n",
              "  &quot;opacity&quot;: 1,\n",
              "}\n",
              "\n",
              "            );\n",
              "        \n",
              "    \n",
              "            tile_layer_29e4fdb38be55e4491abadad94c07115.addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "            var circle_marker_de2278b0c9faeeace000962d03127991 = L.circleMarker(\n",
              "                [45.1, 15.2],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_8f07fec29e7071f6fdbeb297ee92c408 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_2b9adc4fd5bc7fdae8dad153e38600b6 = $(`&lt;div id=&quot;html_2b9adc4fd5bc7fdae8dad153e38600b6&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;HR&lt;/div&gt;`)[0];\n",
              "                popup_8f07fec29e7071f6fdbeb297ee92c408.setContent(html_2b9adc4fd5bc7fdae8dad153e38600b6);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_de2278b0c9faeeace000962d03127991.bindPopup(popup_8f07fec29e7071f6fdbeb297ee92c408)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_041fc8f557f357e18e124e2d04d97a91 = L.circleMarker(\n",
              "                [45.9432, 24.9668],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_34f1e4f4b4d22a8a2a5e468276c0c801 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_14441435cf5ee38f3ed68da3ba366c03 = $(`&lt;div id=&quot;html_14441435cf5ee38f3ed68da3ba366c03&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;RO&lt;/div&gt;`)[0];\n",
              "                popup_34f1e4f4b4d22a8a2a5e468276c0c801.setContent(html_14441435cf5ee38f3ed68da3ba366c03);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_041fc8f557f357e18e124e2d04d97a91.bindPopup(popup_34f1e4f4b4d22a8a2a5e468276c0c801)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_feee56e565626a7f4e04d522639664a1 = L.circleMarker(\n",
              "                [56.8796, 24.6032],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_c3d04be0e8b09e7b45f7fdac6cbea3d7 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_10468b1c07fdf195f01486ab78b27cc5 = $(`&lt;div id=&quot;html_10468b1c07fdf195f01486ab78b27cc5&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;LV&lt;/div&gt;`)[0];\n",
              "                popup_c3d04be0e8b09e7b45f7fdac6cbea3d7.setContent(html_10468b1c07fdf195f01486ab78b27cc5);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_feee56e565626a7f4e04d522639664a1.bindPopup(popup_c3d04be0e8b09e7b45f7fdac6cbea3d7)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_ef2032bd95db13ccbaed3f205c7fd61e = L.circleMarker(\n",
              "                [47.5162, 14.5501],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;purple&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;purple&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_1ba5f2f172653237b3e220aaa6e75813 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_7ac50f7e3ca1340e0f61f7cbe04eef34 = $(`&lt;div id=&quot;html_7ac50f7e3ca1340e0f61f7cbe04eef34&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;AT&lt;/div&gt;`)[0];\n",
              "                popup_1ba5f2f172653237b3e220aaa6e75813.setContent(html_7ac50f7e3ca1340e0f61f7cbe04eef34);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_ef2032bd95db13ccbaed3f205c7fd61e.bindPopup(popup_1ba5f2f172653237b3e220aaa6e75813)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_12c6c29fd950dce44cf8f9dc31b65f98 = L.circleMarker(\n",
              "                [55.1694, 23.8813],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_3a0c6bd9a737baa9af8699636ec8dbbb = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_0ee029385de4b940dff39e05e5b02ba8 = $(`&lt;div id=&quot;html_0ee029385de4b940dff39e05e5b02ba8&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;LT&lt;/div&gt;`)[0];\n",
              "                popup_3a0c6bd9a737baa9af8699636ec8dbbb.setContent(html_0ee029385de4b940dff39e05e5b02ba8);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_12c6c29fd950dce44cf8f9dc31b65f98.bindPopup(popup_3a0c6bd9a737baa9af8699636ec8dbbb)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_c54447f5e8c7e1787d01f905c859cfef = L.circleMarker(\n",
              "                [40.4637, -3.7492],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;green&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;green&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_aba513d1c0413e4ff9ee7a2210980f4f = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_8ec140a97edb35bb4c503e027f53fefe = $(`&lt;div id=&quot;html_8ec140a97edb35bb4c503e027f53fefe&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ES&lt;/div&gt;`)[0];\n",
              "                popup_aba513d1c0413e4ff9ee7a2210980f4f.setContent(html_8ec140a97edb35bb4c503e027f53fefe);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_c54447f5e8c7e1787d01f905c859cfef.bindPopup(popup_aba513d1c0413e4ff9ee7a2210980f4f)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_ac10f1e431c3da2ec684a44006fcdb9f = L.circleMarker(\n",
              "                [46.1512, 14.9955],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;purple&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;purple&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_8a3d98cfad92f5e6c05bfc79db668324 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_7af24dbb50f387a34c524dca474fb56c = $(`&lt;div id=&quot;html_7af24dbb50f387a34c524dca474fb56c&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;SI&lt;/div&gt;`)[0];\n",
              "                popup_8a3d98cfad92f5e6c05bfc79db668324.setContent(html_7af24dbb50f387a34c524dca474fb56c);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_ac10f1e431c3da2ec684a44006fcdb9f.bindPopup(popup_8a3d98cfad92f5e6c05bfc79db668324)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_60d69c84a0306dd3261cff02424a670c = L.circleMarker(\n",
              "                [50.8503, 4.3517],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;purple&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;purple&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_03226e165be40d17dcc73dd04484930f = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_d19431fc030b7c1b4c2a4058e325a1db = $(`&lt;div id=&quot;html_d19431fc030b7c1b4c2a4058e325a1db&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;BE&lt;/div&gt;`)[0];\n",
              "                popup_03226e165be40d17dcc73dd04484930f.setContent(html_d19431fc030b7c1b4c2a4058e325a1db);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_60d69c84a0306dd3261cff02424a670c.bindPopup(popup_03226e165be40d17dcc73dd04484930f)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_d79c543891d0629d097f1b9503e004a2 = L.circleMarker(\n",
              "                [52.3676, 4.9041],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;purple&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;purple&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_a949549f293c0878f245fde73f06db66 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_48d8a5438b35ee088f0e56fcceea8170 = $(`&lt;div id=&quot;html_48d8a5438b35ee088f0e56fcceea8170&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;NL&lt;/div&gt;`)[0];\n",
              "                popup_a949549f293c0878f245fde73f06db66.setContent(html_48d8a5438b35ee088f0e56fcceea8170);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_d79c543891d0629d097f1b9503e004a2.bindPopup(popup_a949549f293c0878f245fde73f06db66)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_2e0ecfebaee3a1baf18e251a97adb62a = L.circleMarker(\n",
              "                [51.9194, 19.1451],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_cb8152164d6b85da583370d6f083a8ae = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_a868575690be22050fbd900843842e2a = $(`&lt;div id=&quot;html_a868575690be22050fbd900843842e2a&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;PL&lt;/div&gt;`)[0];\n",
              "                popup_cb8152164d6b85da583370d6f083a8ae.setContent(html_a868575690be22050fbd900843842e2a);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_2e0ecfebaee3a1baf18e251a97adb62a.bindPopup(popup_cb8152164d6b85da583370d6f083a8ae)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_27a998bdf04c7e007577798b251ab77e = L.circleMarker(\n",
              "                [49.8175, 15.473],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_1e81c83f9369da27742e7a32108cf7c8 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_b338cb086e3f24d99e5bcbdaf015fa65 = $(`&lt;div id=&quot;html_b338cb086e3f24d99e5bcbdaf015fa65&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;CZ&lt;/div&gt;`)[0];\n",
              "                popup_1e81c83f9369da27742e7a32108cf7c8.setContent(html_b338cb086e3f24d99e5bcbdaf015fa65);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_27a998bdf04c7e007577798b251ab77e.bindPopup(popup_1e81c83f9369da27742e7a32108cf7c8)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_75f6819207b4c5c13f780168bac3afb1 = L.circleMarker(\n",
              "                [46.6034, 1.8883],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;green&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;green&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_356607a3719db9dc22c179476ede4ee7 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_935acf34e916d452faec55a8b3de73bb = $(`&lt;div id=&quot;html_935acf34e916d452faec55a8b3de73bb&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;FR&lt;/div&gt;`)[0];\n",
              "                popup_356607a3719db9dc22c179476ede4ee7.setContent(html_935acf34e916d452faec55a8b3de73bb);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_75f6819207b4c5c13f780168bac3afb1.bindPopup(popup_356607a3719db9dc22c179476ede4ee7)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_160adc151b4df35bf3dfd9e86d6c8c8b = L.circleMarker(\n",
              "                [48.669, 19.699],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_e92e50cc1fcd59b5effa08085fe6274b = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_7ba6b23e00eecdf9e3a7e2f95207d470 = $(`&lt;div id=&quot;html_7ba6b23e00eecdf9e3a7e2f95207d470&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;SK&lt;/div&gt;`)[0];\n",
              "                popup_e92e50cc1fcd59b5effa08085fe6274b.setContent(html_7ba6b23e00eecdf9e3a7e2f95207d470);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_160adc151b4df35bf3dfd9e86d6c8c8b.bindPopup(popup_e92e50cc1fcd59b5effa08085fe6274b)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_38c0b7f0a375e1de424c27087fab6e0e = L.circleMarker(\n",
              "                [61.9241, 25.7482],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_45f5745baf62cfcad7786c4f63aacd0f = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_3f63303b356d8ee5093f28ff875981cb = $(`&lt;div id=&quot;html_3f63303b356d8ee5093f28ff875981cb&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;FI&lt;/div&gt;`)[0];\n",
              "                popup_45f5745baf62cfcad7786c4f63aacd0f.setContent(html_3f63303b356d8ee5093f28ff875981cb);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_38c0b7f0a375e1de424c27087fab6e0e.bindPopup(popup_45f5745baf62cfcad7786c4f63aacd0f)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_47548e73651916d84579dc8039504097 = L.circleMarker(\n",
              "                [41.8719, 12.5674],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;green&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;green&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_520cbdcd9aaf01f9026e7bff07a3b77b = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_e4bf8aa50fc82363d54bf12a37ee4784 = $(`&lt;div id=&quot;html_e4bf8aa50fc82363d54bf12a37ee4784&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;IT&lt;/div&gt;`)[0];\n",
              "                popup_520cbdcd9aaf01f9026e7bff07a3b77b.setContent(html_e4bf8aa50fc82363d54bf12a37ee4784);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_47548e73651916d84579dc8039504097.bindPopup(popup_520cbdcd9aaf01f9026e7bff07a3b77b)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_b1f7bbf35293b785b73c82141a3abb78 = L.circleMarker(\n",
              "                [60.1282, 18.6435],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_fcad0401475395cfe483720fb4ba9381 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_8c8eacea9a9b3fefe2179801807e4a63 = $(`&lt;div id=&quot;html_8c8eacea9a9b3fefe2179801807e4a63&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;SE&lt;/div&gt;`)[0];\n",
              "                popup_fcad0401475395cfe483720fb4ba9381.setContent(html_8c8eacea9a9b3fefe2179801807e4a63);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_b1f7bbf35293b785b73c82141a3abb78.bindPopup(popup_fcad0401475395cfe483720fb4ba9381)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_bbd4fb692e3a0cbe7350534ac0fba2f9 = L.circleMarker(\n",
              "                [56.2639, 9.5018],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_11eb533fea3210246bf230203c186ff2 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_403ffbb6ae886f01b24391deb7d87e0b = $(`&lt;div id=&quot;html_403ffbb6ae886f01b24391deb7d87e0b&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;DK&lt;/div&gt;`)[0];\n",
              "                popup_11eb533fea3210246bf230203c186ff2.setContent(html_403ffbb6ae886f01b24391deb7d87e0b);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_bbd4fb692e3a0cbe7350534ac0fba2f9.bindPopup(popup_11eb533fea3210246bf230203c186ff2)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_129707d8a44f3c32ddf54ab6ba36c146 = L.circleMarker(\n",
              "                [51.1657, 10.4515],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;green&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;green&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_0d46d5fd30690631d8ac8ce1eb636874 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_9669a18175dd0656fc68b7d34647f50a = $(`&lt;div id=&quot;html_9669a18175dd0656fc68b7d34647f50a&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;DE&lt;/div&gt;`)[0];\n",
              "                popup_0d46d5fd30690631d8ac8ce1eb636874.setContent(html_9669a18175dd0656fc68b7d34647f50a);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_129707d8a44f3c32ddf54ab6ba36c146.bindPopup(popup_0d46d5fd30690631d8ac8ce1eb636874)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_0869cfecb797a3bb754bf61aa65052cd = L.circleMarker(\n",
              "                [39.3999, -8.2245],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;purple&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;purple&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_1eb23e3b467ade41f833ef65ae95c848 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_6d83c8526d741a0f24f8678bfe9e54f8 = $(`&lt;div id=&quot;html_6d83c8526d741a0f24f8678bfe9e54f8&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;PT&lt;/div&gt;`)[0];\n",
              "                popup_1eb23e3b467ade41f833ef65ae95c848.setContent(html_6d83c8526d741a0f24f8678bfe9e54f8);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_0869cfecb797a3bb754bf61aa65052cd.bindPopup(popup_1eb23e3b467ade41f833ef65ae95c848)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_ad0bfabcba0cb451ce602913b1985dc1 = L.circleMarker(\n",
              "                [42.7339, 25.4858],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_e4da1145427c75e754a85e9fd113a420 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_7fc1f8a52045eee2bd1b44f76fdf5b70 = $(`&lt;div id=&quot;html_7fc1f8a52045eee2bd1b44f76fdf5b70&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;BG&lt;/div&gt;`)[0];\n",
              "                popup_e4da1145427c75e754a85e9fd113a420.setContent(html_7fc1f8a52045eee2bd1b44f76fdf5b70);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_ad0bfabcba0cb451ce602913b1985dc1.bindPopup(popup_e4da1145427c75e754a85e9fd113a420)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_c2d0bf0e932f922098d67ac3a56f480d = L.circleMarker(\n",
              "                [35.1264, 33.4299],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;purple&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;purple&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_bd883df3814ad76eb454513f092f51f3 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_9052ce2dd76c35c3a5472e9c9bb758fc = $(`&lt;div id=&quot;html_9052ce2dd76c35c3a5472e9c9bb758fc&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;CY&lt;/div&gt;`)[0];\n",
              "                popup_bd883df3814ad76eb454513f092f51f3.setContent(html_9052ce2dd76c35c3a5472e9c9bb758fc);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_c2d0bf0e932f922098d67ac3a56f480d.bindPopup(popup_bd883df3814ad76eb454513f092f51f3)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_17d3f1f04de097d430f1bc102d816251 = L.circleMarker(\n",
              "                [47.1625, 19.5033],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_35339403d802f1e1c50cd937b72955a3 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_fe3f1a6f4da83680dd9c7027d410e9c1 = $(`&lt;div id=&quot;html_fe3f1a6f4da83680dd9c7027d410e9c1&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;HU&lt;/div&gt;`)[0];\n",
              "                popup_35339403d802f1e1c50cd937b72955a3.setContent(html_fe3f1a6f4da83680dd9c7027d410e9c1);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_17d3f1f04de097d430f1bc102d816251.bindPopup(popup_35339403d802f1e1c50cd937b72955a3)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_b506dd0d89ad27230f85f07abaff5253 = L.circleMarker(\n",
              "                [53.1424, -7.6921],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;purple&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;purple&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_8cc7cc29407839ca36b1aa811f3a98b0 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_d2af02ebbfe6efc132e02e4be69621da = $(`&lt;div id=&quot;html_d2af02ebbfe6efc132e02e4be69621da&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;IE&lt;/div&gt;`)[0];\n",
              "                popup_8cc7cc29407839ca36b1aa811f3a98b0.setContent(html_d2af02ebbfe6efc132e02e4be69621da);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_b506dd0d89ad27230f85f07abaff5253.bindPopup(popup_8cc7cc29407839ca36b1aa811f3a98b0)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_01449c8638b1133929c75f407d0ee7f4 = L.circleMarker(\n",
              "                [58.5953, 25.0136],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_d5ce89a3405ccc0ba1f7d42601287d0e = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_26d067be7a805094cb2abf45e747b17d = $(`&lt;div id=&quot;html_26d067be7a805094cb2abf45e747b17d&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;EE&lt;/div&gt;`)[0];\n",
              "                popup_d5ce89a3405ccc0ba1f7d42601287d0e.setContent(html_26d067be7a805094cb2abf45e747b17d);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_01449c8638b1133929c75f407d0ee7f4.bindPopup(popup_d5ce89a3405ccc0ba1f7d42601287d0e)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "    \n",
              "            var circle_marker_129717a7f44c93f50073bb469728f731 = L.circleMarker(\n",
              "                [35.9375, 14.3754],\n",
              "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;purple&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;purple&quot;, &quot;fillOpacity&quot;: 0.6, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 8, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
              "            ).addTo(map_edad65d784e66e162ab9717bc94a7276);\n",
              "        \n",
              "    \n",
              "        var popup_14152e14a9aff4810ecc859c1a730f00 = L.popup({\n",
              "  &quot;maxWidth&quot;: &quot;100%&quot;,\n",
              "});\n",
              "\n",
              "        \n",
              "            \n",
              "                var html_456b05f027864a32b6eafcaa8e20f485 = $(`&lt;div id=&quot;html_456b05f027864a32b6eafcaa8e20f485&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;MT&lt;/div&gt;`)[0];\n",
              "                popup_14152e14a9aff4810ecc859c1a730f00.setContent(html_456b05f027864a32b6eafcaa8e20f485);\n",
              "            \n",
              "        \n",
              "\n",
              "        circle_marker_129717a7f44c93f50073bb469728f731.bindPopup(popup_14152e14a9aff4810ecc859c1a730f00)\n",
              "        ;\n",
              "\n",
              "        \n",
              "    \n",
              "&lt;/script&gt;\n",
              "&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "TEST avec une 2eme methode : DBSCAN"
      ],
      "metadata": {
        "id": "XG7dIo51JnIH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import DBSCAN\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "metadata": {
        "id": "HO71hPCTLS10"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mise sous forme de features"
      ],
      "metadata": {
        "id": "WJzF9i_Cl1Us"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df2=df\n",
        "dataframe2 = df.copy()\n",
        "dataframe2.drop(columns=['country'], inplace=True) #On retire la colonne country\n",
        "dataframe2.drop(columns=['labels'], inplace=True) #On retire la colonne country\n",
        "dataframe2.drop(columns=['latitude'], inplace=True) #On retire la colonne country\n",
        "dataframe2.drop(columns=['longitude'], inplace=True) #On retire la colonne country"
      ],
      "metadata": {
        "id": "LBm2I4gVJp4m",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 370
        },
        "outputId": "79ad30d2-c4fd-439c-db84-944b4ce7ec6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "\"['labels'] not found in axis\"",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-63-897cd67e2f72>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mdataframe2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdataframe2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'country'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#On retire la colonne country\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mdataframe2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'labels'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#On retire la colonne country\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mdataframe2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'latitude'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#On retire la colonne country\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mdataframe2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'longitude'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#On retire la colonne country\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5579\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5580\u001b[0m         \"\"\"\n\u001b[0;32m-> 5581\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   5582\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5583\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4786\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4787\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4788\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4789\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4790\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4828\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4829\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4830\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4831\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4832\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   7068\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7069\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 7070\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask].tolist()} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   7071\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7072\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"['labels'] not found in axis\""
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "methode DBSCAN"
      ],
      "metadata": {
        "id": "VoBhHWpjl5Lz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_scaled = StandardScaler().fit_transform(dataframe2)  # Standardiser les coordonnées\n",
        "\n",
        "# === 3. Appliquer DBSCAN === #\n",
        "dbscan = DBSCAN(eps=2, min_samples=3)  # Ajuste eps si besoin\n",
        "df2['labels'] = dbscan.fit_predict(X_scaled)\n"
      ],
      "metadata": {
        "id": "b57GhSWvKmk7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.decomposition import PCA\n",
        "\n",
        "# Réduction de dimension avec PCA (2D)\n",
        "pca = PCA(n_components=2)\n",
        "X_pca = pca.fit_transform(dataframe2)\n",
        "\n",
        "\n",
        "# Ajouter les résultats PCA à la DataFrame\n",
        "df2['PCA1'] = X_pca[:, 0]\n",
        "df2['PCA2'] = X_pca[:, 1]\n",
        "\n",
        "# Création du scatter plot avec les clusters\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(\n",
        "    x=df2['PCA1'], y=df2['PCA2'],\n",
        "    hue=df['labels'], palette=\"tab10\",\n",
        "    s=100, edgecolor='k', alpha=0.8\n",
        ")\n",
        "\n",
        "# Ajout des noms des pays pour mieux comprendre\n",
        "for i, row in df.iterrows():\n",
        "    plt.text(row['PCA1'], row['PCA2'], row['country'], fontsize=9, ha='right')\n",
        "\n",
        "# Configuration du plot\n",
        "plt.xlabel('PCA 1')\n",
        "plt.ylabel('PCA 2')\n",
        "plt.title('DBSCAN Clustering des Pays Européens (Projection PCA)')\n",
        "plt.legend(title=\"Cluster\")\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "o9GWCdv5PAn2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Définir une carte centrée sur l'Europe\n",
        "m = folium.Map(location=[50, 10], zoom_start=4)\n",
        "\n",
        "# Définir une palette de couleurs pour les clusters\n",
        "colors = [\"red\", \"blue\", \"green\", \"purple\", \"orange\"]\n",
        "\n",
        "# Ajouter les pays à la carte\n",
        "for _, row in df.iterrows():\n",
        "    folium.CircleMarker(\n",
        "        location=[row[\"latitude\"], row[\"longitude\"]],\n",
        "        radius=8,\n",
        "        color=colors[row[\"labels\"]],\n",
        "        fill=True,\n",
        "        fill_color=colors[row[\"labels\"]],\n",
        "        fill_opacity=0.6,\n",
        "        popup=row[\"country\"]\n",
        "    ).add_to(m)\n",
        "\n",
        "# Afficher la carte\n",
        "m"
      ],
      "metadata": {
        "id": "VfofLoSKNB2s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Industrialisation"
      ],
      "metadata": {
        "id": "z_sRgljBOHGU"
      }
    }
  ]
}
